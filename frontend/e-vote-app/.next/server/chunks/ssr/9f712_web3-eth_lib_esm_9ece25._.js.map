{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"detect_transaction_type.js","sources":["file:///Users/jamesmorgan/Developer/web3/E-VOT/frontend/e-vote-app/node_modules/.pnpm/web3-eth%404.11.1_bufferutil%404.0.9_typescript%405.7.3_utf-8-validate%405.0.10_zod%403.24.1/node_modules/web3-eth/src/utils/detect_transaction_type.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { format, toHex } from 'web3-utils';\nimport { TransactionTypeParser, Web3Context } from 'web3-core';\nimport { EthExecutionAPI, HardforksOrdered, Transaction, ETH_DATA_FORMAT } from 'web3-types';\nimport { Web3ValidatorError, isNullish, validator } from 'web3-validator';\nimport { InvalidPropertiesForTransactionTypeError } from 'web3-errors';\n\nimport { InternalTransaction } from '../types.js';\n\n// undefined is treated as null for JSON schema validator\nconst transactionType0x0Schema = {\n\ttype: 'object',\n\tproperties: {\n\t\taccessList: {\n\t\t\ttype: 'null',\n\t\t},\n\t\tmaxFeePerGas: {\n\t\t\ttype: 'null',\n\t\t},\n\t\tmaxPriorityFeePerGas: {\n\t\t\ttype: 'null',\n\t\t},\n\t},\n};\nconst transactionType0x1Schema = {\n\ttype: 'object',\n\tproperties: {\n\t\tmaxFeePerGas: {\n\t\t\ttype: 'null',\n\t\t},\n\t\tmaxPriorityFeePerGas: {\n\t\t\ttype: 'null',\n\t\t},\n\t},\n};\nconst transactionType0x2Schema = {\n\ttype: 'object',\n\tproperties: {\n\t\tgasPrice: {\n\t\t\ttype: 'null',\n\t\t},\n\t},\n};\n\nconst validateTxTypeAndHandleErrors = (\n\ttxSchema: object,\n\ttx: Transaction,\n\ttxType: '0x0' | '0x1' | '0x2',\n) => {\n\ttry {\n\t\tvalidator.validateJSONSchema(txSchema, tx);\n\t} catch (error) {\n\t\tif (error instanceof Web3ValidatorError)\n\t\t\t// Erroneously reported error\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-call\n\t\t\tthrow new InvalidPropertiesForTransactionTypeError(error.errors, txType);\n\n\t\tthrow error;\n\t}\n};\n\nexport const defaultTransactionTypeParser: TransactionTypeParser = transaction => {\n\tconst tx = transaction as unknown as Transaction;\n\tif (!isNullish(tx.type)) {\n\t\tlet txSchema;\n\t\tswitch (tx.type) {\n\t\t\tcase '0x0':\n\t\t\t\ttxSchema = transactionType0x0Schema;\n\t\t\t\tbreak;\n\t\t\tcase '0x1':\n\t\t\t\ttxSchema = transactionType0x1Schema;\n\t\t\t\tbreak;\n\t\t\tcase '0x2':\n\t\t\t\ttxSchema = transactionType0x2Schema;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\treturn format({ format: 'uint' }, tx.type, ETH_DATA_FORMAT);\n\t\t}\n\n\t\tvalidateTxTypeAndHandleErrors(txSchema, tx, tx.type);\n\n\t\treturn format({ format: 'uint' }, tx.type, ETH_DATA_FORMAT);\n\t}\n\n\tif (!isNullish(tx.maxFeePerGas) || !isNullish(tx.maxPriorityFeePerGas)) {\n\t\tvalidateTxTypeAndHandleErrors(transactionType0x2Schema, tx, '0x2');\n\t\treturn '0x2';\n\t}\n\n\tif (!isNullish(tx.accessList)) {\n\t\tvalidateTxTypeAndHandleErrors(transactionType0x1Schema, tx, '0x1');\n\t\treturn '0x1';\n\t}\n\n\tconst givenHardfork = tx.hardfork ?? tx.common?.hardfork;\n\n\tif (!isNullish(givenHardfork)) {\n\t\tconst hardforkIndex = Object.keys(HardforksOrdered).indexOf(givenHardfork);\n\n\t\t// givenHardfork is London or later, so EIP-2718 is supported\n\t\tif (hardforkIndex >= Object.keys(HardforksOrdered).indexOf('london'))\n\t\t\treturn !isNullish(tx.gasPrice) ? '0x0' : '0x2';\n\n\t\t// givenHardfork is Berlin, tx.accessList is undefined, assume type is 0x0\n\t\tif (hardforkIndex === Object.keys(HardforksOrdered).indexOf('berlin')) return '0x0';\n\t}\n\n\t// gasprice is defined\n\tif (!isNullish(tx.gasPrice)) {\n\t\tvalidateTxTypeAndHandleErrors(transactionType0x0Schema, tx, '0x0');\n\t\treturn '0x0';\n\t}\n\n\t// no transaction type can be inferred from properties, use default transaction type\n\treturn undefined;\n};\n\nexport const detectTransactionType = (\n\ttransaction: InternalTransaction,\n\tweb3Context?: Web3Context<EthExecutionAPI>,\n) =>\n\t(web3Context?.transactionTypeParser ?? defaultTransactionTypeParser)(\n\t\ttransaction as unknown as Record<string, unknown>,\n\t);\n\nexport const detectRawTransactionType = (transaction: Uint8Array) =>\n\ttransaction[0] > 0x7f ? '0x0' : toHex(transaction[0]);\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;EAeE;;;;;AAEF,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,YAAY,CAAC;AAE3C,OAAO,EAAmB,gBAAgB,EAAe,eAAe,EAAE,MAAM,YAAY,CAAC;AAC7F,OAAO,EAAE,kBAAkB,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;;;;AAC1E,OAAO,EAAE,wCAAwC,EAAE,MAAM,aAAa,CAAC;;;;;;;;;;AAIvE,yDAAyD;AACzD,MAAM,wBAAwB,GAAG;IAChC,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACX,UAAU,EAAE;YACX,IAAI,EAAE,MAAM;SACZ;QACD,YAAY,EAAE;YACb,IAAI,EAAE,MAAM;SACZ;QACD,oBAAoB,EAAE;YACrB,IAAI,EAAE,MAAM;SACZ;KACD;CACD,CAAC;AACF,MAAM,wBAAwB,GAAG;IAChC,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACX,YAAY,EAAE;YACb,IAAI,EAAE,MAAM;SACZ;QACD,oBAAoB,EAAE;YACrB,IAAI,EAAE,MAAM;SACZ;KACD;CACD,CAAC;AACF,MAAM,wBAAwB,GAAG;IAChC,IAAI,EAAE,QAAQ;IACd,UAAU,EAAE;QACX,QAAQ,EAAE;YACT,IAAI,EAAE,MAAM;SACZ;KACD;CACD,CAAC;AAEF,MAAM,6BAA6B,GAAG,CACrC,QAAgB,EAChB,EAAe,EACf,MAA6B,EAC5B,EAAE;IACH,IAAI,CAAC;2OACJ,YAAS,CAAC,kBAAkB,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;IAC5C,CAAC,CAAC,OAAO,KAAK,EAAE,CAAC;QAChB,IAAI,KAAK,oOAAY,qBAAkB,EACtC,6BAA6B;QAC7B,6DAA6D;QAC7D,MAAM,4OAAI,2CAAwC,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAE1E,MAAM,KAAK,CAAC;IACb,CAAC;AACF,CAAC,CAAC;AAEK,MAAM,4BAA4B,IAA0B,WAAW,CAAC,EAAE;;IAChF,MAAM,EAAE,GAAG,WAAqC,CAAC;IACjD,IAAI,EAAC,qPAAA,AAAS,EAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;QACzB,IAAI,QAAQ,CAAC;QACb,OAAQ,EAAE,CAAC,IAAI,EAAE,CAAC;YACjB,KAAK,KAAK;gBACT,QAAQ,GAAG,wBAAwB,CAAC;gBACpC,MAAM;YACP,KAAK,KAAK;gBACT,QAAQ,GAAG,wBAAwB,CAAC;gBACpC,MAAM;YACP,KAAK,KAAK;gBACT,QAAQ,GAAG,wBAAwB,CAAC;gBACpC,MAAM;YAEP;gBACC,8NAAO,SAAA,AAAM,EAAC;oBAAE,MAAM,EAAE,MAAM;gBAAA,CAAE,EAAE,EAAE,CAAC,IAAI,8NAAE,kBAAe,CAAC,CAAC;QAC9D,CAAC;QAED,6BAA6B,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;QAErD,OAAO,gOAAA,AAAM,EAAC;YAAE,MAAM,EAAE,MAAM;QAAA,CAAE,EAAE,EAAE,CAAC,IAAI,8NAAE,kBAAe,CAAC,CAAC;IAC7D,CAAC;IAED,IAAI,EAAC,qPAAA,AAAS,EAAC,EAAE,CAAC,YAAY,CAAC,IAAI,2OAAC,YAAA,AAAS,EAAC,EAAE,CAAC,oBAAoB,CAAC,EAAE,CAAC;QACxE,6BAA6B,CAAC,wBAAwB,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QACnE,OAAO,KAAK,CAAC;IACd,CAAC;IAED,IAAI,CAAC,sPAAA,AAAS,EAAC,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC;QAC/B,6BAA6B,CAAC,wBAAwB,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QACnE,OAAO,KAAK,CAAC;IACd,CAAC;IAED,MAAM,aAAa,GAAG,CAAA,KAAA,EAAE,CAAC,QAAQ,MAAA,QAAA,OAAA,KAAA,IAAA,KAAI,CAAA,KAAA,EAAE,CAAC,MAAM,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,QAAQ,CAAC;IAEzD,IAAI,2OAAC,YAAA,AAAS,EAAC,aAAa,CAAC,EAAE,CAAC;QAC/B,MAAM,aAAa,GAAG,MAAM,CAAC,IAAI,qNAAC,mBAAgB,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QAE3E,6DAA6D;QAC7D,IAAI,aAAa,IAAI,MAAM,CAAC,IAAI,qNAAC,mBAAgB,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,EACnE,OAAO,EAAC,qPAAA,AAAS,EAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC;QAEhD,0EAA0E;QAC1E,IAAI,aAAa,KAAK,MAAM,CAAC,IAAI,qNAAC,mBAAgB,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,OAAO,KAAK,CAAC;IACrF,CAAC;IAED,sBAAsB;IACtB,IAAI,2OAAC,YAAA,AAAS,EAAC,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC7B,6BAA6B,CAAC,wBAAwB,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QACnE,OAAO,KAAK,CAAC;IACd,CAAC;IAED,oFAAoF;IACpF,OAAO,SAAS,CAAC;AAClB,CAAC,CAAC;AAEK,MAAM,qBAAqB,GAAG,CACpC,WAAgC,EAChC,WAA0C,EACzC,EAAE;;IACH,OAAA,CAAC,CAAA,KAAA,WAAW,KAAA,QAAX,WAAW,KAAA,KAAA,IAAA,KAAA,IAAX,WAAW,CAAE,qBAAqB,MAAA,QAAA,OAAA,KAAA,IAAA,KAAI,4BAA4B,CAAC,CACnE,WAAiD,CACjD,CAAA;CAAA,CAAC;AAEI,MAAM,wBAAwB,GAAG,CAAC,WAAuB,EAAE,CACjE,CADmE,UACxD,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,yNAAC,QAAA,AAAK,EAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC","ignoreList":[0]}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 147, "column": 0}, "map": {"version":3,"file":"schemas.js","sources":["file:///Users/jamesmorgan/Developer/web3/E-VOT/frontend/e-vote-app/node_modules/.pnpm/web3-eth%404.11.1_bufferutil%404.0.9_typescript%405.7.3_utf-8-validate%405.0.10_zod%403.24.1/node_modules/web3-eth/src/schemas.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nexport const accessListItemSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\taddress: {\n\t\t\tformat: 'address',\n\t\t},\n\t\tstorageKeys: {\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\tformat: 'bytes32',\n\t\t\t},\n\t\t},\n\t},\n};\n\nexport const accessListSchema = {\n\ttype: 'array',\n\titems: {\n\t\t...accessListItemSchema,\n\t},\n};\n\nexport const accessListResultSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\taccessList: {\n\t\t\t...accessListSchema,\n\t\t},\n\t\tgasUsed: {\n\t\t\ttype: 'string',\n\t\t},\n\t},\n};\n\nexport const chainSchema = {\n\ttype: 'string',\n\tenum: ['goerli', 'kovan', 'mainnet', 'rinkeby', 'ropsten', 'sepolia'],\n};\n\nexport const hardforkSchema = {\n\ttype: 'string',\n\tenum: [\n\t\t'arrowGlacier',\n\t\t'berlin',\n\t\t'byzantium',\n\t\t'chainstart',\n\t\t'constantinople',\n\t\t'dao',\n\t\t'homestead',\n\t\t'istanbul',\n\t\t'london',\n\t\t'merge',\n\t\t'muirGlacier',\n\t\t'petersburg',\n\t\t'shanghai',\n\t\t'spuriousDragon',\n\t\t'tangerineWhistle',\n\t],\n};\n\nexport const customChainSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tname: {\n\t\t\tformat: 'string',\n\t\t},\n\t\tnetworkId: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tchainId: {\n\t\t\tformat: 'uint',\n\t\t},\n\t},\n};\n\nexport const transactionSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tfrom: {\n\t\t\tformat: 'address',\n\t\t},\n\t\tto: {\n\t\t\toneOf: [{ format: 'address' }, { type: 'null' }],\n\t\t},\n\t\tvalue: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tgas: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tgasPrice: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\teffectiveGasPrice: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\ttype: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tmaxFeePerGas: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tmaxPriorityFeePerGas: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\taccessList: {\n\t\t\t...accessListSchema,\n\t\t},\n\t\tdata: {\n\t\t\tformat: 'bytes',\n\t\t},\n\t\tinput: {\n\t\t\tformat: 'bytes',\n\t\t},\n\t\tnonce: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tchain: { ...chainSchema },\n\t\thardfork: { ...hardforkSchema },\n\t\tchainId: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tnetworkId: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tcommon: {\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\tcustomChain: { ...customChainSchema },\n\t\t\t\tbaseChain: {\n\t\t\t\t\t...chainSchema,\n\t\t\t\t},\n\t\t\t\thardfork: {\n\t\t\t\t\t...hardforkSchema,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tgasLimit: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tv: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tr: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\ts: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t},\n};\n\nexport const transactionInfoSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\t...transactionSchema.properties,\n\t\tblockHash: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\tblockNumber: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\thash: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\ttransactionIndex: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tfrom: {\n\t\t\tformat: 'address',\n\t\t},\n\t\tto: {\n\t\t\toneOf: [{ format: 'address' }, { type: 'null' }],\n\t\t},\n\t\tvalue: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tgas: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tgasPrice: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\teffectiveGasPrice: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\ttype: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tmaxFeePerGas: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tmaxPriorityFeePerGas: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\taccessList: {\n\t\t\t...accessListSchema,\n\t\t},\n\t\tdata: {\n\t\t\tformat: 'bytes',\n\t\t},\n\t\tinput: {\n\t\t\tformat: 'bytes',\n\t\t},\n\t\tnonce: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tgasLimit: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tv: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tr: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\ts: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t},\n};\n\nexport const withdrawalsSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tindex: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tvalidatorIndex: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\taddress: {\n\t\t\tformat: 'address',\n\t\t},\n\t\tamount: {\n\t\t\tformat: 'uint',\n\t\t},\n\t},\n};\n\nexport const blockSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tbaseFeePerGas: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tblobGasUsed: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tdifficulty: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\texcessBlobGas: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\textraData: {\n\t\t\tformat: 'bytes',\n\t\t},\n\t\tgasLimit: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tgasUsed: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\thash: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\tlogsBloom: {\n\t\t\tformat: 'bytes256',\n\t\t},\n\t\tminer: {\n\t\t\tformat: 'bytes',\n\t\t},\n\t\tmixHash: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\tnonce: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tnumber: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tparentBeaconBlockRoot: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\tparentHash: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\treceiptsRoot: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\tsha3Uncles: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\tsize: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tstateRoot: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\ttimestamp: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\ttotalDifficulty: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\ttransactions: {\n\t\t\toneOf: [\n\t\t\t\t{\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\t...transactionInfoSchema,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\titems: {\n\t\t\t\t\t\tformat: 'bytes32',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\ttransactionsRoot: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\tuncles: {\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\tformat: 'bytes32',\n\t\t\t},\n\t\t},\n\t\twithdrawals: {\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\t...withdrawalsSchema,\n\t\t\t},\n\t\t},\n\t\twithdrawalsRoot: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t},\n};\n\nexport const blockHeaderSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tauthor: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\texcessDataGas: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tbaseFeePerGas: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tblobGasUsed: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tdifficulty: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\texcessBlobGas: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\textraData: {\n\t\t\tformat: 'bytes',\n\t\t},\n\t\tgasLimit: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tgasUsed: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\thash: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\tlogsBloom: {\n\t\t\tformat: 'bytes256',\n\t\t},\n\t\tminer: {\n\t\t\tformat: 'bytes',\n\t\t},\n\t\tmixHash: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\tnonce: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tnumber: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tparentBeaconBlockRoot: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\tparentHash: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\treceiptsRoot: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\tsha3Uncles: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\tsize: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tstateRoot: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\ttimestamp: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\ttotalDifficulty: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\ttransactions: {\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\tformat: 'bytes32',\n\t\t\t},\n\t\t},\n\t\ttransactionsRoot: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\tuncles: {\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\tformat: 'bytes32',\n\t\t\t},\n\t\t},\n\t\twithdrawals: {\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\t...withdrawalsSchema,\n\t\t\t},\n\t\t},\n\t\twithdrawalsRoot: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t},\n};\n\nexport const logSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tremoved: {\n\t\t\tformat: 'bool',\n\t\t},\n\t\tlogIndex: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\ttransactionIndex: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\ttransactionHash: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\tblockHash: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\tblockNumber: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\taddress: {\n\t\t\tformat: 'address',\n\t\t},\n\t\tdata: {\n\t\t\tformat: 'bytes',\n\t\t},\n\t\ttopics: {\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\tformat: 'bytes32',\n\t\t\t},\n\t\t},\n\t},\n};\nexport const syncSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tstartingBlock: {\n\t\t\tformat: 'string',\n\t\t},\n\t\tcurrentBlock: {\n\t\t\tformat: 'string',\n\t\t},\n\t\thighestBlock: {\n\t\t\tformat: 'string',\n\t\t},\n\t\tknownStates: {\n\t\t\tformat: 'string',\n\t\t},\n\t\tpulledStates: {\n\t\t\tformat: 'string',\n\t\t},\n\t},\n};\n\nexport const transactionReceiptSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\ttransactionHash: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\ttransactionIndex: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tblockHash: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\tblockNumber: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tfrom: {\n\t\t\tformat: 'address',\n\t\t},\n\t\tto: {\n\t\t\tformat: 'address',\n\t\t},\n\t\tcumulativeGasUsed: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tgasUsed: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\teffectiveGasPrice: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tcontractAddress: {\n\t\t\tformat: 'address',\n\t\t},\n\t\tlogs: {\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\t...logSchema,\n\t\t\t},\n\t\t},\n\t\tlogsBloom: {\n\t\t\tformat: 'bytes',\n\t\t},\n\t\troot: {\n\t\t\tformat: 'bytes',\n\t\t},\n\t\tstatus: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\ttype: {\n\t\t\tformat: 'uint',\n\t\t},\n\t},\n};\n\nexport const SignatureObjectSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tmessageHash: {\n\t\t\tformat: 'bytes',\n\t\t},\n\t\tr: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\ts: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\tv: {\n\t\t\tformat: 'bytes',\n\t\t},\n\t\tmessage: {\n\t\t\tformat: 'bytes',\n\t\t},\n\t\tsignature: {\n\t\t\tformat: 'bytes',\n\t\t},\n\t},\n};\nexport const feeHistorySchema = {\n\ttype: 'object',\n\tproperties: {\n\t\toldestBlock: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tbaseFeePerGas: {\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\tformat: 'uint',\n\t\t\t},\n\t\t},\n\t\treward: {\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\ttype: 'array',\n\t\t\t\titems: {\n\t\t\t\t\tformat: 'uint',\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\tgasUsedRatio: {\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\ttype: 'number',\n\t\t\t},\n\t\t},\n\t},\n};\n\nexport const storageProofSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tkey: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\tvalue: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tproof: {\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\tformat: 'bytes32',\n\t\t\t},\n\t\t},\n\t},\n};\n\nexport const accountSchema = {\n\ttype: 'object',\n\tproperties: {\n\t\tbalance: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tcodeHash: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\tnonce: {\n\t\t\tformat: 'uint',\n\t\t},\n\t\tstorageHash: {\n\t\t\tformat: 'bytes32',\n\t\t},\n\t\taccountProof: {\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\tformat: 'bytes32',\n\t\t\t},\n\t\t},\n\t\tstorageProof: {\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\t...storageProofSchema,\n\t\t\t},\n\t\t},\n\t},\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 817, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 823, "column": 0}, "map": {"version":3,"file":"format_transaction.js","sources":["file:///Users/jamesmorgan/Developer/web3/E-VOT/frontend/e-vote-app/node_modules/.pnpm/web3-eth%404.11.1_bufferutil%404.0.9_typescript%405.7.3_utf-8-validate%405.0.10_zod%403.24.1/node_modules/web3-eth/src/utils/format_transaction.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Transaction, DataFormat, DEFAULT_RETURN_FORMAT, FormatType } from 'web3-types';\nimport { isNullish, ValidationSchemaInput } from 'web3-validator';\nimport { mergeDeep, format, bytesToHex, toHex } from 'web3-utils';\nimport { TransactionDataAndInputError } from 'web3-errors';\n\nimport { transactionInfoSchema } from '../schemas.js';\nimport { type CustomTransactionSchema } from '../types.js';\n\nexport function formatTransaction<\n\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\n\tTransactionType extends Transaction = Transaction,\n>(\n\ttransaction: TransactionType,\n\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n\toptions: {\n\t\ttransactionSchema?: ValidationSchemaInput | CustomTransactionSchema | undefined;\n\t\tfillInputAndData?: boolean;\n\t} = {\n\t\ttransactionSchema: transactionInfoSchema,\n\t\tfillInputAndData: false,\n\t},\n): FormatType<TransactionType, ReturnFormat> {\n\tlet formattedTransaction = mergeDeep({}, transaction as Record<string, unknown>) as Transaction;\n\tif (!isNullish(transaction?.common)) {\n\t\tformattedTransaction.common = { ...transaction.common };\n\t\tif (!isNullish(transaction.common?.customChain))\n\t\t\tformattedTransaction.common.customChain = { ...transaction.common.customChain };\n\t}\n\tformattedTransaction = format(\n\t\toptions.transactionSchema ?? transactionInfoSchema,\n\t\tformattedTransaction,\n\t\treturnFormat,\n\t);\n\tif (\n\t\t!isNullish(formattedTransaction.data) &&\n\t\t!isNullish(formattedTransaction.input) &&\n\t\t// Converting toHex is accounting for data and input being Uint8Arrays\n\t\t// since comparing Uint8Array is not as straightforward as comparing strings\n\t\ttoHex(formattedTransaction.data) !== toHex(formattedTransaction.input)\n\t)\n\t\tthrow new TransactionDataAndInputError({\n\t\t\tdata: bytesToHex(formattedTransaction.data),\n\t\t\tinput: bytesToHex(formattedTransaction.input),\n\t\t});\n\n\tif (options.fillInputAndData) {\n\t\tif (!isNullish(formattedTransaction.data)) {\n\t\t\tformattedTransaction.input = formattedTransaction.data;\n\t\t} else if (!isNullish(formattedTransaction.input)) {\n\t\t\tformattedTransaction.data = formattedTransaction.input;\n\t\t}\n\t}\n\n\tif (!isNullish(formattedTransaction.gasLimit)) {\n\t\tformattedTransaction.gas = formattedTransaction.gasLimit;\n\t\tdelete formattedTransaction.gasLimit;\n\t}\n\n\treturn formattedTransaction as FormatType<TransactionType, ReturnFormat>;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;EAeE;;;AAEF,OAAO,EAA2B,qBAAqB,EAAc,MAAM,YAAY,CAAC;AACxF,OAAO,EAAE,SAAS,EAAyB,MAAM,gBAAgB,CAAC;;;AAIlE,OAAO,EAAE,qBAAqB,EAAE,MAAM,eAAe,CAAC;;;;;AAHtD,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,MAAM,YAAY,CAAC;AAClE,OAAO,EAAE,4BAA4B,EAAE,MAAM,aAAa,CAAC;;;;;;AAKrD,SAAU,iBAAiB,CAIhC,WAA4B,EAC5B,2OAA6B,wBAAqC,EAClE,UAGI;IACH,iBAAiB,EAAE,mVAAqB;IACxC,gBAAgB,EAAE,KAAK;CACvB;;IAED,IAAI,oBAAoB,wNAAG,YAAA,AAAS,EAAC,CAAA,CAAE,EAAE,WAAsC,CAAgB,CAAC;IAChG,IAAI,KAAC,kPAAA,AAAS,EAAC,WAAW,KAAA,QAAX,WAAW,KAAA,KAAA,IAAA,KAAA,IAAX,WAAW,CAAE,MAAM,CAAC,EAAE,CAAC;QACrC,oBAAoB,CAAC,MAAM,GAAA,OAAA,MAAA,CAAA,CAAA,GAAQ,WAAW,CAAC,MAAM,CAAE,CAAC;QACxD,IAAI,2OAAC,YAAA,AAAS,EAAC,CAAA,KAAA,WAAW,CAAC,MAAM,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,WAAW,CAAC,EAC9C,oBAAoB,CAAC,MAAM,CAAC,WAAW,GAAA,OAAA,MAAA,CAAA,CAAA,GAAQ,WAAW,CAAC,MAAM,CAAC,WAAW,CAAE,CAAC;IAClF,CAAC;IACD,oBAAoB,0NAAG,SAAA,AAAM,EAC5B,CAAA,KAAA,OAAO,CAAC,iBAAiB,MAAA,QAAA,OAAA,KAAA,IAAA,gUAAI,wBAAqB,EAClD,oBAAoB,EACpB,YAAY,CACZ,CAAC;IACF,IACC,CAAC,sPAAA,AAAS,EAAC,oBAAoB,CAAC,IAAI,CAAC,IACrC,2OAAC,YAAA,AAAS,EAAC,oBAAoB,CAAC,KAAK,CAAC,IACtC,sEAAsE;IACtE,4EAA4E;4NAC5E,QAAA,AAAK,EAAC,oBAAoB,CAAC,IAAI,CAAC,6NAAK,QAAA,AAAK,EAAC,oBAAoB,CAAC,KAAK,CAAC,EAEtE,MAAM,4OAAI,+BAA4B,CAAC;QACtC,IAAI,0NAAE,aAAA,AAAU,EAAC,oBAAoB,CAAC,IAAI,CAAC;QAC3C,KAAK,0NAAE,aAAA,AAAU,EAAC,oBAAoB,CAAC,KAAK,CAAC;KAC7C,CAAC,CAAC;IAEJ,IAAI,OAAO,CAAC,gBAAgB,EAAE,CAAC;QAC9B,IAAI,2OAAC,YAAA,AAAS,EAAC,oBAAoB,CAAC,IAAI,CAAC,EAAE,CAAC;YAC3C,oBAAoB,CAAC,KAAK,GAAG,oBAAoB,CAAC,IAAI,CAAC;QACxD,CAAC,MAAM,IAAI,2OAAC,YAAA,AAAS,EAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE,CAAC;YACnD,oBAAoB,CAAC,IAAI,GAAG,oBAAoB,CAAC,KAAK,CAAC;QACxD,CAAC;IACF,CAAC;IAED,IAAI,2OAAC,YAAA,AAAS,EAAC,oBAAoB,CAAC,QAAQ,CAAC,EAAE,CAAC;QAC/C,oBAAoB,CAAC,GAAG,GAAG,oBAAoB,CAAC,QAAQ,CAAC;QACzD,OAAO,oBAAoB,CAAC,QAAQ,CAAC;IACtC,CAAC;IAED,OAAO,oBAAiE,CAAC;AAC1E,CAAC","ignoreList":[0]}},
    {"offset": {"line": 887, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 893, "column": 0}, "map": {"version":3,"file":"decode_signed_transaction.js","sources":["file:///Users/jamesmorgan/Developer/web3/E-VOT/frontend/e-vote-app/node_modules/.pnpm/web3-eth%404.11.1_bufferutil%404.0.9_typescript%405.7.3_utf-8-validate%405.0.10_zod%403.24.1/node_modules/web3-eth/src/utils/decode_signed_transaction.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport {\n\tDataFormat,\n\tHexStringBytes,\n\tSignedTransactionInfoAPI,\n\tTransactionSignedAPI,\n} from 'web3-types';\nimport { bytesToHex, format, hexToBytes, keccak256 } from 'web3-utils';\nimport { TransactionFactory } from 'web3-eth-accounts';\nimport { detectRawTransactionType } from './detect_transaction_type.js';\nimport { formatTransaction } from './format_transaction.js';\nimport { type CustomTransactionSchema } from '../types.js';\n\n/**\n * Decodes an [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/#top) encoded transaction.\n *\n * @param encodedSignedTransaction The RLP encoded transaction.\n * @param returnFormat ({@link DataFormat} Specifies how the return data should be formatted.\n * @returns {@link SignedTransactionInfoAPI}, an object containing the RLP encoded signed transaction (accessed via the `raw` property) and the signed transaction object (accessed via the `tx` property).\n */\nexport function decodeSignedTransaction<ReturnFormat extends DataFormat>(\n\tencodedSignedTransaction: HexStringBytes,\n\treturnFormat: ReturnFormat,\n\toptions: { fillInputAndData?: boolean; transactionSchema?: CustomTransactionSchema } = {\n\t\tfillInputAndData: false,\n\t},\n): SignedTransactionInfoAPI {\n\treturn {\n\t\traw: format({ format: 'bytes' }, encodedSignedTransaction, returnFormat),\n\t\ttx: formatTransaction(\n\t\t\t{\n\t\t\t\t...TransactionFactory.fromSerializedData(\n\t\t\t\t\thexToBytes(encodedSignedTransaction),\n\t\t\t\t).toJSON(),\n\t\t\t\thash: bytesToHex(keccak256(hexToBytes(encodedSignedTransaction))),\n\t\t\t\ttype: detectRawTransactionType(hexToBytes(encodedSignedTransaction)),\n\t\t\t} as TransactionSignedAPI,\n\t\t\treturnFormat,\n\t\t\t{\n\t\t\t\tfillInputAndData: options.fillInputAndData,\n\t\t\t\ttransactionSchema: options.transactionSchema,\n\t\t\t},\n\t\t),\n\t};\n}\n"],"names":[],"mappings":";;;AAsBA,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,MAAM,YAAY,CAAC;AACvE,OAAO,EAAE,kBAAkB,EAAE,MAAM,mBAAmB,CAAC;AACvD,OAAO,EAAE,wBAAwB,EAAE,MAAM,8BAA8B,CAAC;AACxE,OAAO,EAAE,iBAAiB,EAAE,MAAM,yBAAyB,CAAC;;;;;;;;;AAUtD,SAAU,uBAAuB,CACtC,wBAAwC,EACxC,YAA0B,EAC1B,UAAuF;IACtF,gBAAgB,EAAE,KAAK;CACvB;IAED,OAAO;QACN,GAAG,yNAAE,SAAA,AAAM,EAAC;YAAE,MAAM,EAAE,OAAO;QAAA,CAAE,EAAE,wBAAwB,EAAE,YAAY,CAAC;QACxE,EAAE,qVAAE,oBAAA,AAAiB,EACpB,OAAA,MAAA,CAAA,OAAA,MAAA,CAAA,CAAA,yPACI,qBAAkB,CAAC,kBAAkB,yNACvC,aAAA,AAAU,EAAC,wBAAwB,CAAC,CACpC,CAAC,MAAM,EAAE,GAAA;YACV,IAAI,0NAAE,aAAA,AAAU,oNAAC,YAAA,AAAS,0NAAC,aAAA,AAAU,EAAC,wBAAwB,CAAC,CAAC,CAAC;YACjE,IAAI,0VAAE,2BAAA,AAAwB,0NAAC,aAAA,AAAU,EAAC,wBAAwB,CAAC,CAAC;QAAA,EAC5C,EACzB,YAAY,EACZ;YACC,gBAAgB,EAAE,OAAO,CAAC,gBAAgB;YAC1C,iBAAiB,EAAE,OAAO,CAAC,iBAAiB;SAC5C,CACD;KACD,CAAC;AACH,CAAC","ignoreList":[0]}},
    {"offset": {"line": 924, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 930, "column": 0}, "map": {"version":3,"file":"constants.js","sources":["file:///Users/jamesmorgan/Developer/web3/E-VOT/frontend/e-vote-app/node_modules/.pnpm/web3-eth%404.11.1_bufferutil%404.0.9_typescript%405.7.3_utf-8-validate%405.0.10_zod%403.24.1/node_modules/web3-eth/src/constants.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { AbiEventFragment, FMT_BYTES, FMT_NUMBER } from 'web3-types';\n\nexport const ALL_EVENTS = 'ALLEVENTS';\nexport const ALL_EVENTS_ABI = {\n\tname: ALL_EVENTS,\n\tsignature: '',\n\ttype: 'event',\n\tinputs: [],\n} as AbiEventFragment & { signature: string };\n\nexport const NUMBER_DATA_FORMAT = { bytes: FMT_BYTES.HEX, number: FMT_NUMBER.NUMBER } as const;\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;EAeE;;;;;;AACF,OAAO,EAAoB,SAAS,EAAE,UAAU,EAAE,MAAM,YAAY,CAAC;;AAE9D,MAAM,UAAU,GAAG,WAAW,CAAC;AAC/B,MAAM,cAAc,GAAG;IAC7B,IAAI,EAAE,UAAU;IAChB,SAAS,EAAE,EAAE;IACb,IAAI,EAAE,OAAO;IACb,MAAM,EAAE,EAAE;CACkC,CAAC;AAEvC,MAAM,kBAAkB,GAAG;IAAE,KAAK,8NAAE,YAAS,CAAC,GAAG;IAAE,MAAM,8NAAE,aAAU,CAAC,MAAM;AAAA,CAAW,CAAC","ignoreList":[0]}},
    {"offset": {"line": 964, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 970, "column": 0}, "map": {"version":3,"file":"get_transaction_gas_pricing.js","sources":["file:///Users/jamesmorgan/Developer/web3/E-VOT/frontend/e-vote-app/node_modules/.pnpm/web3-eth%404.11.1_bufferutil%404.0.9_typescript%405.7.3_utf-8-validate%405.0.10_zod%403.24.1/node_modules/web3-eth/src/utils/get_transaction_gas_pricing.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3Context } from 'web3-core';\nimport {\n\tEthExecutionAPI,\n\tNumbers,\n\tTransaction,\n\tDataFormat,\n\tFormatType,\n\tETH_DATA_FORMAT,\n} from 'web3-types';\nimport { isNullish } from 'web3-validator';\nimport { Eip1559NotSupportedError, UnsupportedTransactionTypeError } from 'web3-errors';\nimport { format } from 'web3-utils';\n// eslint-disable-next-line import/no-cycle\nimport { getBlock, getGasPrice } from '../rpc_method_wrappers.js';\nimport { InternalTransaction } from '../types.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionType } from './transaction_builder.js';\n\nasync function getEip1559GasPricing<ReturnFormat extends DataFormat>(\n\ttransaction: FormatType<Transaction, typeof ETH_DATA_FORMAT>,\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n): Promise<FormatType<{ maxPriorityFeePerGas?: Numbers; maxFeePerGas?: Numbers }, ReturnFormat>> {\n\tconst block = await getBlock(web3Context, web3Context.defaultBlock, false, ETH_DATA_FORMAT);\n\tif (isNullish(block.baseFeePerGas)) throw new Eip1559NotSupportedError();\n\n\tlet gasPrice: Numbers | undefined;\n\tif (isNullish(transaction.gasPrice) && BigInt(block.baseFeePerGas) === BigInt(0)) {\n\t\tgasPrice = await getGasPrice(web3Context, returnFormat);\n\t}\n\tif (!isNullish(transaction.gasPrice) || !isNullish(gasPrice)) {\n\t\tconst convertedTransactionGasPrice = format(\n\t\t\t{ format: 'uint' },\n\t\t\ttransaction.gasPrice ?? gasPrice,\n\t\t\treturnFormat,\n\t\t);\n\n\t\treturn {\n\t\t\tmaxPriorityFeePerGas: convertedTransactionGasPrice,\n\t\t\tmaxFeePerGas: convertedTransactionGasPrice,\n\t\t};\n\t}\n\treturn {\n\t\tmaxPriorityFeePerGas: format(\n\t\t\t{ format: 'uint' },\n\t\t\ttransaction.maxPriorityFeePerGas ?? web3Context.defaultMaxPriorityFeePerGas,\n\t\t\treturnFormat,\n\t\t),\n\t\tmaxFeePerGas: format(\n\t\t\t{ format: 'uint' },\n\t\t\t(transaction.maxFeePerGas ??\n\t\t\t\tBigInt(block.baseFeePerGas) * BigInt(2) +\n\t\t\t\t\tBigInt(\n\t\t\t\t\t\ttransaction.maxPriorityFeePerGas ?? web3Context.defaultMaxPriorityFeePerGas,\n\t\t\t\t\t)) as Numbers,\n\t\t\treturnFormat,\n\t\t),\n\t};\n}\n\nexport async function getTransactionGasPricing<ReturnFormat extends DataFormat>(\n\ttransaction: InternalTransaction,\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n): Promise<\n\t| FormatType<\n\t\t\t{ gasPrice?: Numbers; maxPriorityFeePerGas?: Numbers; maxFeePerGas?: Numbers },\n\t\t\tReturnFormat\n\t  >\n\t| undefined\n> {\n\tconst transactionType = getTransactionType(transaction, web3Context);\n\tif (!isNullish(transactionType)) {\n\t\tif (transactionType.startsWith('-'))\n\t\t\tthrow new UnsupportedTransactionTypeError(transactionType);\n\n\t\t// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-2718.md#transactions\n\t\tif (Number(transactionType) < 0 || Number(transactionType) > 127)\n\t\t\tthrow new UnsupportedTransactionTypeError(transactionType);\n\n\t\tif (\n\t\t\tisNullish(transaction.gasPrice) &&\n\t\t\t(transactionType === '0x0' || transactionType === '0x1')\n\t\t)\n\t\t\treturn {\n\t\t\t\tgasPrice: await getGasPrice(web3Context, returnFormat),\n\t\t\t\tmaxPriorityFeePerGas: undefined,\n\t\t\t\tmaxFeePerGas: undefined,\n\t\t\t};\n\n\t\tif (transactionType === '0x2') {\n\t\t\treturn {\n\t\t\t\tgasPrice: undefined,\n\t\t\t\t...(await getEip1559GasPricing(transaction, web3Context, returnFormat)),\n\t\t\t};\n\t\t}\n\t}\n\n\treturn undefined;\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1082, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1088, "column": 0}, "map": {"version":3,"file":"transaction_builder.js","sources":["file:///Users/jamesmorgan/Developer/web3/E-VOT/frontend/e-vote-app/node_modules/.pnpm/web3-eth%404.11.1_bufferutil%404.0.9_typescript%405.7.3_utf-8-validate%405.0.10_zod%403.24.1/node_modules/web3-eth/src/utils/transaction_builder.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\tEthExecutionAPI,\n\tAddress,\n\tHexString,\n\tValidChains,\n\tHardfork,\n\tTransaction,\n\tTransactionWithFromLocalWalletIndex,\n\tTransactionWithToLocalWalletIndex,\n\tTransactionWithFromAndToLocalWalletIndex,\n\tCommon,\n\tWeb3NetAPI,\n\tNumbers,\n\tDataFormat,\n\tFormatType,\n\tETH_DATA_FORMAT,\n} from 'web3-types';\nimport { Web3Context } from 'web3-core';\nimport { privateKeyToAddress } from 'web3-eth-accounts';\nimport { getId } from 'web3-net';\nimport { isNullish, isNumber, isHexStrict, isAddress } from 'web3-validator';\nimport {\n\tInvalidTransactionWithSender,\n\tInvalidTransactionWithReceiver,\n\tLocalWalletNotAvailableError,\n\tTransactionDataAndInputError,\n\tUnableToPopulateNonceError,\n} from 'web3-errors';\nimport { bytesToHex, format } from 'web3-utils';\nimport { NUMBER_DATA_FORMAT } from '../constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { getChainId, getTransactionCount, estimateGas } from '../rpc_method_wrappers.js';\nimport { detectTransactionType } from './detect_transaction_type.js';\nimport { transactionSchema } from '../schemas.js';\nimport { InternalTransaction } from '../types.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionGasPricing } from './get_transaction_gas_pricing.js';\n\nexport const getTransactionFromOrToAttr = (\n\tattr: 'from' | 'to',\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction?:\n\t\t| Transaction\n\t\t| TransactionWithFromLocalWalletIndex\n\t\t| TransactionWithToLocalWalletIndex\n\t\t| TransactionWithFromAndToLocalWalletIndex,\n\tprivateKey?: HexString | Uint8Array,\n): Address | undefined => {\n\tif (transaction !== undefined && attr in transaction && transaction[attr] !== undefined) {\n\t\tif (typeof transaction[attr] === 'string' && isAddress(transaction[attr])) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n\t\t\treturn transaction[attr] as Address;\n\t\t}\n\t\tif (!isHexStrict(transaction[attr] as string) && isNumber(transaction[attr] as Numbers)) {\n\t\t\tif (web3Context.wallet) {\n\t\t\t\tconst account = web3Context.wallet.get(\n\t\t\t\t\tformat({ format: 'uint' }, transaction[attr] as Numbers, NUMBER_DATA_FORMAT),\n\t\t\t\t);\n\n\t\t\t\tif (!isNullish(account)) {\n\t\t\t\t\treturn account.address;\n\t\t\t\t}\n\n\t\t\t\tthrow new LocalWalletNotAvailableError();\n\t\t\t}\n\t\t\tthrow new LocalWalletNotAvailableError();\n\t\t} else {\n\t\t\tthrow attr === 'from'\n\t\t\t\t? new InvalidTransactionWithSender(transaction.from)\n\t\t\t\t: // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n\t\t\t\t  new InvalidTransactionWithReceiver(transaction.to);\n\t\t}\n\t}\n\tif (attr === 'from') {\n\t\tif (!isNullish(privateKey)) return privateKeyToAddress(privateKey);\n\t\tif (!isNullish(web3Context.defaultAccount)) return web3Context.defaultAccount;\n\t}\n\n\treturn undefined;\n};\n\nexport const getTransactionNonce = async <ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress?: Address,\n\treturnFormat: ReturnFormat = web3Context.defaultReturnFormat as ReturnFormat,\n) => {\n\tif (isNullish(address)) {\n\t\t// TODO if (web3.eth.accounts.wallet) use address from local wallet\n\t\tthrow new UnableToPopulateNonceError();\n\t}\n\n\treturn getTransactionCount(web3Context, address, web3Context.defaultBlock, returnFormat);\n};\n\nexport const getTransactionType = (\n\ttransaction: FormatType<Transaction, typeof ETH_DATA_FORMAT>,\n\tweb3Context: Web3Context<EthExecutionAPI>,\n) => {\n\tconst inferredType = detectTransactionType(transaction, web3Context);\n\tif (!isNullish(inferredType)) return inferredType;\n\tif (!isNullish(web3Context.defaultTransactionType))\n\t\treturn format({ format: 'uint' }, web3Context.defaultTransactionType, ETH_DATA_FORMAT);\n\n\treturn undefined;\n};\n\n// Keep in mind that the order the properties of populateTransaction get populated matters\n// as some of the properties are dependent on others\nexport async function defaultTransactionBuilder<ReturnType = Transaction>(options: {\n\ttransaction: Transaction;\n\tweb3Context: Web3Context<EthExecutionAPI & Web3NetAPI>;\n\tprivateKey?: HexString | Uint8Array;\n\tfillGasPrice?: boolean;\n\tfillGasLimit?: boolean;\n}): Promise<ReturnType> {\n\tlet populatedTransaction = format(\n\t\ttransactionSchema,\n\t\toptions.transaction,\n\t\toptions.web3Context.defaultReturnFormat,\n\t) as InternalTransaction;\n\n\tif (isNullish(populatedTransaction.from)) {\n\t\tpopulatedTransaction.from = getTransactionFromOrToAttr(\n\t\t\t'from',\n\t\t\toptions.web3Context,\n\t\t\tundefined,\n\t\t\toptions.privateKey,\n\t\t);\n\t}\n\n\t// TODO: Debug why need to typecase getTransactionNonce\n\tif (isNullish(populatedTransaction.nonce)) {\n\t\tpopulatedTransaction.nonce = await getTransactionNonce(\n\t\t\toptions.web3Context,\n\t\t\tpopulatedTransaction.from,\n\t\t\tETH_DATA_FORMAT,\n\t\t);\n\t}\n\n\tif (isNullish(populatedTransaction.value)) {\n\t\tpopulatedTransaction.value = '0x0';\n\t}\n\n\tif (!isNullish(populatedTransaction.data)) {\n\t\tif (\n\t\t\t!isNullish(populatedTransaction.input) &&\n\t\t\tpopulatedTransaction.data !== populatedTransaction.input\n\t\t)\n\t\t\tthrow new TransactionDataAndInputError({\n\t\t\t\tdata: bytesToHex(populatedTransaction.data),\n\t\t\t\tinput: bytesToHex(populatedTransaction.input),\n\t\t\t});\n\n\t\tif (!populatedTransaction.data.startsWith('0x'))\n\t\t\tpopulatedTransaction.data = `0x${populatedTransaction.data}`;\n\t} else if (!isNullish(populatedTransaction.input)) {\n\t\tif (!populatedTransaction.input.startsWith('0x'))\n\t\t\tpopulatedTransaction.input = `0x${populatedTransaction.input}`;\n\t} else {\n\t\tpopulatedTransaction.input = '0x';\n\t}\n\n\tif (isNullish(populatedTransaction.common)) {\n\t\tif (options.web3Context.defaultCommon) {\n\t\t\tconst common = options.web3Context.defaultCommon as unknown as Common;\n\t\t\tconst chainId = common.customChain.chainId as string;\n\t\t\tconst networkId = common.customChain.networkId as string;\n\t\t\tconst name = common.customChain.name as string;\n\t\t\tpopulatedTransaction.common = {\n\t\t\t\t...common,\n\t\t\t\tcustomChain: { chainId, networkId, name },\n\t\t\t};\n\t\t}\n\n\t\tif (isNullish(populatedTransaction.chain)) {\n\t\t\tpopulatedTransaction.chain = options.web3Context.defaultChain as ValidChains;\n\t\t}\n\t\tif (isNullish(populatedTransaction.hardfork)) {\n\t\t\tpopulatedTransaction.hardfork = options.web3Context.defaultHardfork as Hardfork;\n\t\t}\n\t}\n\n\tif (\n\t\tisNullish(populatedTransaction.chainId) &&\n\t\tisNullish(populatedTransaction.common?.customChain.chainId)\n\t) {\n\t\tpopulatedTransaction.chainId = await getChainId(options.web3Context, ETH_DATA_FORMAT);\n\t}\n\n\tif (isNullish(populatedTransaction.networkId)) {\n\t\tpopulatedTransaction.networkId =\n\t\t\t(options.web3Context.defaultNetworkId as string) ??\n\t\t\t(await getId(options.web3Context, ETH_DATA_FORMAT));\n\t}\n\n\tif (isNullish(populatedTransaction.gasLimit) && !isNullish(populatedTransaction.gas)) {\n\t\tpopulatedTransaction.gasLimit = populatedTransaction.gas;\n\t}\n\n\tpopulatedTransaction.type = getTransactionType(populatedTransaction, options.web3Context);\n\tif (\n\t\tisNullish(populatedTransaction.accessList) &&\n\t\t(populatedTransaction.type === '0x1' || populatedTransaction.type === '0x2')\n\t) {\n\t\tpopulatedTransaction.accessList = [];\n\t}\n\tif (options.fillGasPrice)\n\t\tpopulatedTransaction = {\n\t\t\t...populatedTransaction,\n\t\t\t...(await getTransactionGasPricing(\n\t\t\t\tpopulatedTransaction,\n\t\t\t\toptions.web3Context,\n\t\t\t\tETH_DATA_FORMAT,\n\t\t\t)),\n\t\t};\n\tif (\n\t\tisNullish(populatedTransaction.gas) &&\n\t\tisNullish(populatedTransaction.gasLimit) &&\n\t\toptions.fillGasLimit\n\t) {\n\t\tconst fillGasLimit = await estimateGas(\n\t\t\toptions.web3Context,\n\t\t\tpopulatedTransaction,\n\t\t\t'latest',\n\t\t\tETH_DATA_FORMAT,\n\t\t);\n\t\tpopulatedTransaction = {\n\t\t\t...populatedTransaction,\n\t\t\tgas: format({ format: 'uint' }, fillGasLimit as Numbers, ETH_DATA_FORMAT),\n\t\t};\n\t}\n\treturn populatedTransaction as ReturnType;\n}\n\nexport const transactionBuilder = async <ReturnType = Transaction>(\n\toptions: {\n\t\ttransaction: Transaction;\n\t\tweb3Context: Web3Context<EthExecutionAPI>;\n\t\tprivateKey?: HexString | Uint8Array;\n\t\tfillGasPrice?: boolean;\n\t\tfillGasLimit?: boolean;\n\t},\n\t// eslint-disable-next-line @typescript-eslint/require-await\n) =>\n\t(options.web3Context.transactionBuilder ?? defaultTransactionBuilder)({\n\t\t...options,\n\t\ttransaction: options.transaction,\n\t}) as unknown as ReturnType;\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1294, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1300, "column": 0}, "map": {"version":3,"file":"reject_if_block_timeout.js","sources":["file:///Users/jamesmorgan/Developer/web3/E-VOT/frontend/e-vote-app/node_modules/.pnpm/web3-eth%404.11.1_bufferutil%404.0.9_typescript%405.7.3_utf-8-validate%405.0.10_zod%403.24.1/node_modules/web3-eth/src/utils/reject_if_block_timeout.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { EthExecutionAPI, Bytes, Web3BaseProvider, BlockHeaderOutput } from 'web3-types';\nimport { Web3Context } from 'web3-core';\nimport { rejectIfConditionAtInterval } from 'web3-utils';\n\nimport { TransactionBlockTimeoutError } from 'web3-errors';\nimport { NUMBER_DATA_FORMAT } from '../constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { getBlockNumber } from '../rpc_method_wrappers.js';\nimport { NewHeadsSubscription } from '../web3_subscriptions.js';\n\nexport interface ResourceCleaner {\n\tclean: () => void;\n}\n\nfunction resolveByPolling(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tstarterBlockNumber: number,\n\ttransactionHash?: Bytes,\n): [Promise<never>, ResourceCleaner] {\n\tconst pollingInterval = web3Context.transactionPollingInterval;\n\tconst [intervalId, promiseToError] = rejectIfConditionAtInterval(async () => {\n\t\tlet lastBlockNumber;\n\t\ttry {\n\t\t\tlastBlockNumber = await getBlockNumber(web3Context, NUMBER_DATA_FORMAT);\n\t\t} catch (error) {\n\t\t\tconsole.warn('An error happen while trying to get the block number', error);\n\t\t\treturn undefined;\n\t\t}\n\t\tconst numberOfBlocks = lastBlockNumber - starterBlockNumber;\n\t\tif (numberOfBlocks >= web3Context.transactionBlockTimeout) {\n\t\t\treturn new TransactionBlockTimeoutError({\n\t\t\t\tstarterBlockNumber,\n\t\t\t\tnumberOfBlocks,\n\t\t\t\ttransactionHash,\n\t\t\t});\n\t\t}\n\t\treturn undefined;\n\t}, pollingInterval);\n\n\tconst clean = () => {\n\t\tclearInterval(intervalId);\n\t};\n\n\treturn [promiseToError, { clean }];\n}\n\nasync function resolveBySubscription(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tstarterBlockNumber: number,\n\ttransactionHash?: Bytes,\n): Promise<[Promise<never>, ResourceCleaner]> {\n\t// The following variable will stay true except if the data arrived,\n\t//\tor if watching started after an error had occurred.\n\tlet needToWatchLater = true;\n\n\tlet subscription: NewHeadsSubscription;\n\tlet resourceCleaner: ResourceCleaner;\n\t// internal helper function\n\tfunction revertToPolling(\n\t\treject: (value: Error | PromiseLike<Error>) => void,\n\t\tpreviousError?: Error,\n\t) {\n\t\tif (previousError) {\n\t\t\tconsole.warn('error happened at subscription. So revert to polling...', previousError);\n\t\t}\n\t\tresourceCleaner.clean();\n\n\t\tneedToWatchLater = false;\n\t\tconst [promiseToError, newResourceCleaner] = resolveByPolling(\n\t\t\tweb3Context,\n\t\t\tstarterBlockNumber,\n\t\t\ttransactionHash,\n\t\t);\n\t\tresourceCleaner.clean = newResourceCleaner.clean;\n\t\tpromiseToError.catch(error => reject(error as Error));\n\t}\n\ttry {\n\t\tsubscription = (await web3Context.subscriptionManager?.subscribe(\n\t\t\t'newHeads',\n\t\t)) as unknown as NewHeadsSubscription;\n\t\tresourceCleaner = {\n\t\t\tclean: () => {\n\t\t\t\t// Remove the subscription, if it was not removed somewhere\n\t\t\t\t// \telse by calling, for example, subscriptionManager.clear()\n\t\t\t\tif (subscription.id) {\n\t\t\t\t\tweb3Context.subscriptionManager\n\t\t\t\t\t\t?.removeSubscription(subscription)\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\t// Subscription ended successfully\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(() => {\n\t\t\t\t\t\t\t// An error happened while ending subscription. But no need to take any action.\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t} catch (error) {\n\t\treturn resolveByPolling(web3Context, starterBlockNumber, transactionHash);\n\t}\n\tconst promiseToError: Promise<never> = new Promise((_, reject) => {\n\t\ttry {\n\t\t\tsubscription.on('data', (lastBlockHeader: BlockHeaderOutput) => {\n\t\t\t\tneedToWatchLater = false;\n\t\t\t\tif (!lastBlockHeader?.number) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst numberOfBlocks = Number(\n\t\t\t\t\tBigInt(lastBlockHeader.number) - BigInt(starterBlockNumber),\n\t\t\t\t);\n\n\t\t\t\tif (numberOfBlocks >= web3Context.transactionBlockTimeout) {\n\t\t\t\t\t// Transaction Block Timeout is known to be reached by subscribing to new heads\n\t\t\t\t\treject(\n\t\t\t\t\t\tnew TransactionBlockTimeoutError({\n\t\t\t\t\t\t\tstarterBlockNumber,\n\t\t\t\t\t\t\tnumberOfBlocks,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t\tsubscription.on('error', error => {\n\t\t\t\trevertToPolling(reject, error);\n\t\t\t});\n\t\t} catch (error) {\n\t\t\trevertToPolling(reject, error as Error);\n\t\t}\n\n\t\t// Fallback to polling if tx receipt didn't arrived in \"blockHeaderTimeout\" [10 seconds]\n\t\tsetTimeout(() => {\n\t\t\tif (needToWatchLater) {\n\t\t\t\trevertToPolling(reject);\n\t\t\t}\n\t\t}, web3Context.blockHeaderTimeout * 1000);\n\t});\n\n\treturn [promiseToError, resourceCleaner];\n}\n\n/* TODO: After merge, there will be constant block mining time (exactly 12 second each block, except slot missed that currently happens in <1% of slots. ) so we can optimize following function\nfor POS NWs, we can skip checking getBlockNumber(); after interval and calculate only based on time  that certain num of blocked are mined after that for internal double check, can do one getBlockNumber() call and timeout. \n*/\nexport async function rejectIfBlockTimeout(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionHash?: Bytes,\n): Promise<[Promise<never>, ResourceCleaner]> {\n\tconst { provider } = web3Context.requestManager;\n\tlet callingRes: [Promise<never>, ResourceCleaner];\n\tconst starterBlockNumber = await getBlockNumber(web3Context, NUMBER_DATA_FORMAT);\n\t// TODO: once https://github.com/web3/web3.js/issues/5521 is implemented, remove checking for `enableExperimentalFeatures.useSubscriptionWhenCheckingBlockTimeout`\n\tif (\n\t\t(provider as Web3BaseProvider).supportsSubscriptions?.() &&\n\t\tweb3Context.enableExperimentalFeatures.useSubscriptionWhenCheckingBlockTimeout\n\t) {\n\t\t// eslint-disable-next-line @typescript-eslint/no-floating-promises\n\t\tcallingRes = await resolveBySubscription(web3Context, starterBlockNumber, transactionHash);\n\t} else {\n\t\t// eslint-disable-next-line @typescript-eslint/no-floating-promises\n\t\tcallingRes = resolveByPolling(web3Context, starterBlockNumber, transactionHash);\n\t}\n\treturn callingRes;\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 1462, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1468, "column": 0}, "map": {"version":3,"file":"try_send_transaction.js","sources":["file:///Users/jamesmorgan/Developer/web3/E-VOT/frontend/e-vote-app/node_modules/.pnpm/web3-eth%404.11.1_bufferutil%404.0.9_typescript%405.7.3_utf-8-validate%405.0.10_zod%403.24.1/node_modules/web3-eth/src/utils/try_send_transaction.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Web3Context } from 'web3-core';\nimport { EthExecutionAPI, Bytes } from 'web3-types';\nimport { AsyncFunction, rejectIfTimeout } from 'web3-utils';\nimport { TransactionSendTimeoutError } from 'web3-errors';\n\n// eslint-disable-next-line import/no-cycle\nimport { rejectIfBlockTimeout } from './reject_if_block_timeout.js';\n\n/**\n * An internal function to send a transaction or throws if sending did not finish during the timeout during the blocks-timeout.\n * @param web3Context - the context to read the configurations from\n * @param sendTransactionFunc - the function that will send the transaction (could be sendTransaction or sendRawTransaction)\n * @param transactionHash - to be used inside the exception message if there will be any exceptions.\n * @returns the Promise<string> returned by the `sendTransactionFunc`.\n */\nexport async function trySendTransaction(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tsendTransactionFunc: AsyncFunction<string>,\n\ttransactionHash?: Bytes,\n): Promise<string> {\n\tconst [timeoutId, rejectOnTimeout] = rejectIfTimeout(\n\t\tweb3Context.transactionSendTimeout,\n\t\tnew TransactionSendTimeoutError({\n\t\t\tnumberOfSeconds: web3Context.transactionSendTimeout / 1000,\n\t\t\ttransactionHash,\n\t\t}),\n\t);\n\n\tconst [rejectOnBlockTimeout, blockTimeoutResourceCleaner] = await rejectIfBlockTimeout(\n\t\tweb3Context,\n\t\ttransactionHash,\n\t);\n\n\ttry {\n\t\t// If an error happened here, do not catch it, just clear the resources before raising it to the caller function.\n\t\treturn await Promise.race([\n\t\t\tsendTransactionFunc(), // this is the function that will send the transaction\n\t\t\trejectOnTimeout, // this will throw an error on Transaction Send Timeout\n\t\t\trejectOnBlockTimeout, // this will throw an error on Transaction Block Timeout\n\t\t]);\n\t} finally {\n\t\tclearTimeout(timeoutId);\n\t\tblockTimeoutResourceCleaner.clean();\n\t}\n}\n"],"names":[],"mappings":";;;;AAmBA,OAAO,EAAE,2BAA2B,EAAE,MAAM,aAAa,CAAC;AAE1D,2CAA2C;AAC3C,OAAO,EAAE,oBAAoB,EAAE,MAAM,8BAA8B,CAAC;AAJpE,OAAO,EAAiB,eAAe,EAAE,MAAM,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAatD,SAAgB,kBAAkB,CACvC,WAAyC,EACzC,mBAA0C,EAC1C,eAAuB;;QAEvB,MAAM,CAAC,SAAS,EAAE,eAAe,CAAC,gOAAG,kBAAA,AAAe,EACnD,WAAW,CAAC,sBAAsB,EAClC,4OAAI,8BAA2B,CAAC;YAC/B,eAAe,EAAE,WAAW,CAAC,sBAAsB,GAAG,IAAI;YAC1D,eAAe;SACf,CAAC,CACF,CAAC;QAEF,MAAM,CAAC,oBAAoB,EAAE,2BAA2B,CAAC,GAAG,8VAAM,uBAAA,AAAoB,EACrF,WAAW,EACX,eAAe,CACf,CAAC;QAEF,IAAI,CAAC;YACJ,iHAAiH;YACjH,OAAO,MAAM,OAAO,CAAC,IAAI,CAAC;gBACzB,mBAAmB,EAAE,EAAE,sDAAsD;gBAC7E,eAAe,EAAE,uDAAuD;gBACxE,oBAAoB,EAAE,wDAAwD;aAC9E,CAAC,CAAC;QACJ,CAAC,QAAS,CAAC;YACV,YAAY,CAAC,SAAS,CAAC,CAAC;YACxB,2BAA2B,CAAC,KAAK,EAAE,CAAC;QACrC,CAAC;IACF,CAAC;CAAA","ignoreList":[0]}},
    {"offset": {"line": 1527, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1533, "column": 0}, "map": {"version":3,"file":"wait_for_transaction_receipt.js","sources":["file:///Users/jamesmorgan/Developer/web3/E-VOT/frontend/e-vote-app/node_modules/.pnpm/web3-eth%404.11.1_bufferutil%404.0.9_typescript%405.7.3_utf-8-validate%405.0.10_zod%403.24.1/node_modules/web3-eth/src/utils/wait_for_transaction_receipt.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3Context } from 'web3-core';\nimport { TransactionPollingTimeoutError } from 'web3-errors';\nimport { EthExecutionAPI, Bytes, TransactionReceipt, DataFormat } from 'web3-types';\n\n// eslint-disable-next-line import/no-cycle\nimport { pollTillDefinedAndReturnIntervalId, rejectIfTimeout } from 'web3-utils';\n// eslint-disable-next-line import/no-cycle\nimport { rejectIfBlockTimeout } from './reject_if_block_timeout.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionReceipt } from '../rpc_method_wrappers.js';\n\nexport async function waitForTransactionReceipt<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat,\n\tcustomGetTransactionReceipt?: (\n\t\tweb3Context: Web3Context<EthExecutionAPI>,\n\t\ttransactionHash: Bytes,\n\t\treturnFormat: ReturnFormat,\n\t) => Promise<TransactionReceipt>,\n): Promise<TransactionReceipt> {\n\tconst pollingInterval =\n\t\tweb3Context.transactionReceiptPollingInterval ?? web3Context.transactionPollingInterval;\n\n\tconst [awaitableTransactionReceipt, IntervalId] = pollTillDefinedAndReturnIntervalId(\n\t\tasync () => {\n\t\t\ttry {\n\t\t\t\treturn (customGetTransactionReceipt ?? getTransactionReceipt)(\n\t\t\t\t\tweb3Context,\n\t\t\t\t\ttransactionHash,\n\t\t\t\t\treturnFormat,\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\tconsole.warn('An error happen while trying to get the transaction receipt', error);\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t},\n\t\tpollingInterval,\n\t);\n\n\tconst [timeoutId, rejectOnTimeout] = rejectIfTimeout(\n\t\tweb3Context.transactionPollingTimeout,\n\t\tnew TransactionPollingTimeoutError({\n\t\t\tnumberOfSeconds: web3Context.transactionPollingTimeout / 1000,\n\t\t\ttransactionHash,\n\t\t}),\n\t);\n\n\tconst [rejectOnBlockTimeout, blockTimeoutResourceCleaner] = await rejectIfBlockTimeout(\n\t\tweb3Context,\n\t\ttransactionHash,\n\t);\n\n\ttry {\n\t\t// If an error happened here, do not catch it, just clear the resources before raising it to the caller function.\n\t\treturn await Promise.race([\n\t\t\tawaitableTransactionReceipt,\n\t\t\trejectOnTimeout, // this will throw an error on Transaction Polling Timeout\n\t\t\trejectOnBlockTimeout, // this will throw an error on Transaction Block Timeout\n\t\t]);\n\t} finally {\n\t\tif (timeoutId) clearTimeout(timeoutId);\n\t\tif (IntervalId) clearInterval(IntervalId);\n\t\tblockTimeoutResourceCleaner.clean();\n\t}\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;EAeE;;;;AAMF,2CAA2C;AAC3C,OAAO,EAAE,kCAAkC,EAAE,eAAe,EAAE,MAAM,YAAY,CAAC;AACjF,2CAA2C;AAC3C,OAAO,EAAE,oBAAoB,EAAE,MAAM,8BAA8B,CAAC;AACpE,2CAA2C;AAC3C,OAAO,EAAE,qBAAqB,EAAE,MAAM,2BAA2B,CAAC;;AARlE,OAAO,EAAE,8BAA8B,EAAE,MAAM,aAAa,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUvD,SAAgB,yBAAyB,CAC9C,WAAyC,EACzC,eAAsB,EACtB,YAA0B,EAC1B,2BAIgC;;;QAEhC,MAAM,eAAe,GACpB,CAAA,KAAA,WAAW,CAAC,iCAAiC,MAAA,QAAA,OAAA,KAAA,IAAA,KAAI,WAAW,CAAC,0BAA0B,CAAC;QAEzF,MAAM,CAAC,2BAA2B,EAAE,UAAU,CAAC,gOAAG,qCAAA,AAAkC,EACnF,GAAS,CAAE,CAAA,SAAA,IAAA,EAAA,KAAA,GAAA,KAAA,GAAA;gBACV,IAAI,CAAC;oBACJ,OAAO,CAAC,2BAA2B,KAAA,QAA3B,2BAA2B,KAAA,KAAA,IAA3B,2BAA2B,yUAAI,yBAAqB,CAAC,CAC5D,WAAW,EACX,eAAe,EACf,YAAY,CACZ,CAAC;gBACH,CAAC,CAAC,OAAO,KAAK,EAAE,CAAC;oBAChB,OAAO,CAAC,IAAI,CAAC,6DAA6D,EAAE,KAAK,CAAC,CAAC;oBACnF,OAAO,SAAS,CAAC;gBAClB,CAAC;YACF,CAAC,CAAA,EACD,eAAe,CACf,CAAC;QAEF,MAAM,CAAC,SAAS,EAAE,eAAe,CAAC,gOAAG,kBAAA,AAAe,EACnD,WAAW,CAAC,yBAAyB,EACrC,4OAAI,iCAA8B,CAAC;YAClC,eAAe,EAAE,WAAW,CAAC,yBAAyB,GAAG,IAAI;YAC7D,eAAe;SACf,CAAC,CACF,CAAC;QAEF,MAAM,CAAC,oBAAoB,EAAE,2BAA2B,CAAC,GAAG,8VAAM,uBAAA,AAAoB,EACrF,WAAW,EACX,eAAe,CACf,CAAC;QAEF,IAAI,CAAC;YACJ,iHAAiH;YACjH,OAAO,MAAM,OAAO,CAAC,IAAI,CAAC;gBACzB,2BAA2B;gBAC3B,eAAe,EAAE,0DAA0D;gBAC3E,oBAAoB,EAAE,wDAAwD;aAC9E,CAAC,CAAC;QACJ,CAAC,QAAS,CAAC;YACV,IAAI,SAAS,EAAE,YAAY,CAAC,SAAS,CAAC,CAAC;YACvC,IAAI,UAAU,EAAE,aAAa,CAAC,UAAU,CAAC,CAAC;YAC1C,2BAA2B,CAAC,KAAK,EAAE,CAAC;QACrC,CAAC;IACF,CAAC;CAAA","ignoreList":[0]}},
    {"offset": {"line": 1622, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1628, "column": 0}, "map": {"version":3,"file":"watch_transaction_by_polling.js","sources":["file:///Users/jamesmorgan/Developer/web3/E-VOT/frontend/e-vote-app/node_modules/.pnpm/web3-eth%404.11.1_bufferutil%404.0.9_typescript%405.7.3_utf-8-validate%405.0.10_zod%403.24.1/node_modules/web3-eth/src/utils/watch_transaction_by_polling.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Bytes, EthExecutionAPI, TransactionReceipt } from 'web3-types';\nimport { Web3Context, Web3PromiEvent } from 'web3-core';\nimport { format, numberToHex } from 'web3-utils';\nimport { ethRpcMethods } from 'web3-rpc-methods';\n\nimport { DataFormat } from 'web3-types';\nimport { JsonSchema } from 'web3-validator';\nimport { SendSignedTransactionEvents, SendTransactionEvents } from '../types.js';\nimport { transactionReceiptSchema } from '../schemas.js';\n\nexport type Web3PromiEventEventTypeBase<ReturnFormat extends DataFormat> =\n\t| SendTransactionEvents<ReturnFormat>\n\t| SendSignedTransactionEvents<ReturnFormat>;\n\nexport type WaitProps<ReturnFormat extends DataFormat, ResolveType = TransactionReceipt> = {\n\tweb3Context: Web3Context<EthExecutionAPI>;\n\ttransactionReceipt: TransactionReceipt;\n\tcustomTransactionReceiptSchema?: JsonSchema;\n\ttransactionPromiEvent: Web3PromiEvent<ResolveType, Web3PromiEventEventTypeBase<ReturnFormat>>;\n\treturnFormat: ReturnFormat;\n};\n\n/**\n * This function watches a Transaction by subscribing to new heads.\n * It is used by `watchTransactionForConfirmations`, in case the provider does not support subscription.\n * And it is also used by `watchTransactionBySubscription`, as a fallback, if the subscription failed for any reason.\n */\nexport const watchTransactionByPolling = <\n\tReturnFormat extends DataFormat,\n\tResolveType = TransactionReceipt,\n>({\n\tweb3Context,\n\ttransactionReceipt,\n\ttransactionPromiEvent,\n\tcustomTransactionReceiptSchema,\n\treturnFormat,\n}: WaitProps<ReturnFormat, ResolveType>) => {\n\t// Having a transactionReceipt means that the transaction has already been included\n\t// in at least one block, so we start with 1\n\tlet confirmations = 1;\n\tconst intervalId = setInterval(() => {\n\t\t(async () => {\n\t\t\tif (confirmations >= web3Context.transactionConfirmationBlocks) {\n\t\t\t\tclearInterval(intervalId);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst nextBlock = await ethRpcMethods.getBlockByNumber(\n\t\t\t\tweb3Context.requestManager,\n\t\t\t\tnumberToHex(BigInt(transactionReceipt.blockNumber) + BigInt(confirmations)),\n\t\t\t\tfalse,\n\t\t\t);\n\n\t\t\tif (nextBlock?.hash) {\n\t\t\t\tconfirmations += 1;\n\n\t\t\t\ttransactionPromiEvent.emit('confirmation', {\n\t\t\t\t\tconfirmations: format({ format: 'uint' }, confirmations, returnFormat),\n\t\t\t\t\treceipt: format(\n\t\t\t\t\t\tcustomTransactionReceiptSchema ?? transactionReceiptSchema,\n\t\t\t\t\t\ttransactionReceipt,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t),\n\t\t\t\t\tlatestBlockHash: format(\n\t\t\t\t\t\t{ format: 'bytes32' },\n\t\t\t\t\t\tnextBlock.hash as Bytes,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t),\n\t\t\t\t});\n\t\t\t}\n\t\t})() as unknown;\n\t}, web3Context.transactionReceiptPollingInterval ?? web3Context.transactionPollingInterval);\n};\n"],"names":[],"mappings":";;;AAkBA,OAAO,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,YAAY,CAAC;;AAMjD,OAAO,EAAE,wBAAwB,EAAE,MAAM,eAAe,CAAC;AALzD,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwB1C,MAAM,yBAAyB,GAAG,CAGvC,EACD,WAAW,EACX,kBAAkB,EAClB,qBAAqB,EACrB,8BAA8B,EAC9B,YAAY,EAC0B,EAAE,EAAE;;IAC1C,mFAAmF;IACnF,4CAA4C;IAC5C,IAAI,aAAa,GAAG,CAAC,CAAC;IACtB,MAAM,UAAU,GAAG,WAAW,CAAC,GAAG,EAAE;QACnC,CAAC,GAAS,CAAE,CAAA,SAAA,KAAA,GAAA,KAAA,GAAA,KAAA,GAAA;gBACX,IAAI,aAAa,IAAI,WAAW,CAAC,6BAA6B,EAAE,CAAC;oBAChE,aAAa,CAAC,UAAU,CAAC,CAAC;oBAC1B,OAAO;gBACR,CAAC;gBAED,MAAM,SAAS,GAAG,yVAAM,gBAAa,CAAC,gBAAgB,CACrD,WAAW,CAAC,cAAc,0NAC1B,cAAA,AAAW,EAAC,MAAM,CAAC,kBAAkB,CAAC,WAAW,CAAC,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC,EAC3E,KAAK,CACL,CAAC;gBAEF,IAAI,SAAS,KAAA,QAAT,SAAS,KAAA,KAAA,IAAA,KAAA,IAAT,SAAS,CAAE,IAAI,EAAE,CAAC;oBACrB,aAAa,IAAI,CAAC,CAAC;oBAEnB,qBAAqB,CAAC,IAAI,CAAC,cAAc,EAAE;wBAC1C,aAAa,yNAAE,SAAA,AAAM,EAAC;4BAAE,MAAM,EAAE,MAAM;wBAAA,CAAE,EAAE,aAAa,EAAE,YAAY,CAAC;wBACtE,OAAO,yNAAE,SAAA,AAAM,EACd,8BAA8B,KAAA,QAA9B,8BAA8B,KAAA,KAAA,IAA9B,8BAA8B,8TAAI,2BAAwB,EAC1D,kBAAkB,EAClB,YAAY,CACZ;wBACD,eAAe,yNAAE,SAAA,AAAM,EACtB;4BAAE,MAAM,EAAE,SAAS;wBAAA,CAAE,EACrB,SAAS,CAAC,IAAa,EACvB,YAAY,CACZ;qBACD,CAAC,CAAC;gBACJ,CAAC;YACF,CAAC,CAAA,CAAC,EAAa,CAAC;IACjB,CAAC,EAAE,CAAA,KAAA,WAAW,CAAC,iCAAiC,MAAA,QAAA,OAAA,KAAA,IAAA,KAAI,WAAW,CAAC,0BAA0B,CAAC,CAAC;AAC7F,CAAC,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1694, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1700, "column": 0}, "map": {"version":3,"file":"watch_transaction_by_subscription.js","sources":["file:///Users/jamesmorgan/Developer/web3/E-VOT/frontend/e-vote-app/node_modules/.pnpm/web3-eth%404.11.1_bufferutil%404.0.9_typescript%405.7.3_utf-8-validate%405.0.10_zod%403.24.1/node_modules/web3-eth/src/utils/watch_transaction_by_subscription.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Bytes, Numbers, BlockHeaderOutput, TransactionReceipt } from 'web3-types';\nimport { format } from 'web3-utils';\n\nimport { DataFormat } from 'web3-types';\nimport { NewHeadsSubscription } from '../web3_subscriptions.js';\nimport { transactionReceiptSchema } from '../schemas.js';\nimport { WaitProps, watchTransactionByPolling } from './watch_transaction_by_polling.js';\n/**\n * This function watches a Transaction by subscribing to new heads.\n * It is used by `watchTransactionForConfirmations`, in case the provider supports subscription.\n */\nexport const watchTransactionBySubscription = <\n\tReturnFormat extends DataFormat,\n\tResolveType = TransactionReceipt,\n>({\n\tweb3Context,\n\ttransactionReceipt,\n\ttransactionPromiEvent,\n\tcustomTransactionReceiptSchema,\n\treturnFormat,\n}: WaitProps<ReturnFormat, ResolveType>) => {\n\t// The following variable will stay true except if the data arrived,\n\t//\tor if watching started after an error had occurred.\n\tlet needToWatchLater = true;\n\tlet lastCaughtBlockHash: string;\n\tsetImmediate(() => {\n\t\tweb3Context.subscriptionManager\n\t\t\t?.subscribe('newHeads')\n\t\t\t.then((subscription: NewHeadsSubscription) => {\n\t\t\t\tsubscription.on('data', async (newBlockHeader: BlockHeaderOutput) => {\n\t\t\t\t\tneedToWatchLater = false;\n\t\t\t\t\tif (\n\t\t\t\t\t\t!newBlockHeader?.number ||\n\t\t\t\t\t\t// For some cases, the on-data event is fired couple times for the same block!\n\t\t\t\t\t\t// This needs investigation but seems to be because of multiple `subscription.on('data'...)` even this should not cause that.\n\t\t\t\t\t\tlastCaughtBlockHash === newBlockHeader?.parentHash\n\t\t\t\t\t) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tlastCaughtBlockHash = newBlockHeader?.parentHash as string;\n\n\t\t\t\t\tconst confirmations =\n\t\t\t\t\t\tBigInt(newBlockHeader.number) -\n\t\t\t\t\t\tBigInt(transactionReceipt.blockNumber) +\n\t\t\t\t\t\tBigInt(1);\n\n\t\t\t\t\ttransactionPromiEvent.emit('confirmation', {\n\t\t\t\t\t\tconfirmations: format(\n\t\t\t\t\t\t\t{ format: 'uint' },\n\t\t\t\t\t\t\tconfirmations as Numbers,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t),\n\t\t\t\t\t\treceipt: format(\n\t\t\t\t\t\t\tcustomTransactionReceiptSchema ?? transactionReceiptSchema,\n\t\t\t\t\t\t\ttransactionReceipt,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t),\n\t\t\t\t\t\tlatestBlockHash: format(\n\t\t\t\t\t\t\t{ format: 'bytes32' },\n\t\t\t\t\t\t\tnewBlockHeader.parentHash as Bytes,\n\t\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t\t),\n\t\t\t\t\t});\n\t\t\t\t\tif (confirmations >= web3Context.transactionConfirmationBlocks) {\n\t\t\t\t\t\tawait web3Context.subscriptionManager?.removeSubscription(subscription);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tsubscription.on('error', async () => {\n\t\t\t\t\tawait web3Context.subscriptionManager?.removeSubscription(subscription);\n\n\t\t\t\t\tneedToWatchLater = false;\n\t\t\t\t\twatchTransactionByPolling({\n\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\ttransactionReceipt,\n\t\t\t\t\t\ttransactionPromiEvent,\n\t\t\t\t\t\tcustomTransactionReceiptSchema,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(() => {\n\t\t\t\tneedToWatchLater = false;\n\t\t\t\twatchTransactionByPolling({\n\t\t\t\t\tweb3Context,\n\t\t\t\t\ttransactionReceipt,\n\t\t\t\t\tcustomTransactionReceiptSchema,\n\t\t\t\t\ttransactionPromiEvent,\n\t\t\t\t\treturnFormat,\n\t\t\t\t});\n\t\t\t});\n\t});\n\n\t// Fallback to polling if tx receipt didn't arrived in \"blockHeaderTimeout\" [10 seconds]\n\tsetTimeout(() => {\n\t\tif (needToWatchLater) {\n\t\t\twatchTransactionByPolling({\n\t\t\t\tweb3Context,\n\t\t\t\ttransactionReceipt,\n\t\t\t\ttransactionPromiEvent,\n\t\t\t\treturnFormat,\n\t\t\t});\n\t\t}\n\t}, web3Context.blockHeaderTimeout * 1000);\n};\n"],"names":[],"mappings":";;;AAiBA,OAAO,EAAE,MAAM,EAAE,MAAM,YAAY,CAAC;AAIpC,OAAO,EAAE,wBAAwB,EAAE,MAAM,eAAe,CAAC;AACzD,OAAO,EAAa,yBAAyB,EAAE,MAAM,mCAAmC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKlF,MAAM,8BAA8B,GAAG,CAG5C,EACD,WAAW,EACX,kBAAkB,EAClB,qBAAqB,EACrB,8BAA8B,EAC9B,YAAY,EAC0B,EAAE,EAAE;IAC1C,oEAAoE;IACpE,sDAAsD;IACtD,IAAI,gBAAgB,GAAG,IAAI,CAAC;IAC5B,IAAI,mBAA2B,CAAC;IAChC,YAAY,CAAC,GAAG,EAAE;;QACjB,CAAA,KAAA,WAAW,CAAC,mBAAmB,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAC5B,SAAS,CAAC,UAAU,EACrB,IAAI,CAAC,CAAC,YAAkC,EAAE,EAAE;YAC5C,YAAY,CAAC,EAAE,CAAC,MAAM,EAAE,CAAO,cAAiC,EAAE,CAAE,CAAA,SAAA,KAAA,GAAA,KAAA,GAAA,KAAA,GAAA;;oBACnE,gBAAgB,GAAG,KAAK,CAAC;oBACzB,IACC,CAAC,CAAA,cAAc,KAAA,QAAd,cAAc,KAAA,KAAA,IAAA,KAAA,IAAd,cAAc,CAAE,MAAM,CAAA,IACvB,8EAA8E;oBAC9E,6HAA6H;oBAC7H,mBAAmB,KAAA,CAAK,cAAc,KAAA,QAAd,cAAc,KAAA,KAAA,IAAA,KAAA,IAAd,cAAc,CAAE,UAAU,CAAA,EACjD,CAAC;wBACF,OAAO;oBACR,CAAC;oBACD,mBAAmB,GAAG,cAAc,KAAA,QAAd,cAAc,KAAA,KAAA,IAAA,KAAA,IAAd,cAAc,CAAE,UAAoB,CAAC;oBAE3D,MAAM,aAAa,GAClB,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,GAC7B,MAAM,CAAC,kBAAkB,CAAC,WAAW,CAAC,GACtC,MAAM,CAAC,CAAC,CAAC,CAAC;oBAEX,qBAAqB,CAAC,IAAI,CAAC,cAAc,EAAE;wBAC1C,aAAa,yNAAE,SAAA,AAAM,EACpB;4BAAE,MAAM,EAAE,MAAM;wBAAA,CAAE,EAClB,aAAwB,EACxB,YAAY,CACZ;wBACD,OAAO,yNAAE,SAAA,AAAM,EACd,8BAA8B,KAAA,QAA9B,8BAA8B,KAAA,KAAA,IAA9B,8BAA8B,8TAAI,2BAAwB,EAC1D,kBAAkB,EAClB,YAAY,CACZ;wBACD,eAAe,GAAE,+NAAA,AAAM,EACtB;4BAAE,MAAM,EAAE,SAAS;wBAAA,CAAE,EACrB,cAAc,CAAC,UAAmB,EAClC,YAAY,CACZ;qBACD,CAAC,CAAC;oBACH,IAAI,aAAa,IAAI,WAAW,CAAC,6BAA6B,EAAE,CAAC;wBAChE,MAAM,CAAA,KAAA,WAAW,CAAC,mBAAmB,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,kBAAkB,CAAC,YAAY,CAAC,CAAA,CAAC;oBACzE,CAAC;gBACF,CAAC,CAAA,CAAC,CAAC;YACH,YAAY,CAAC,EAAE,CAAC,OAAO,EAAE,GAAS,CAAE,CAAA,SAAA,KAAA,GAAA,KAAA,GAAA,KAAA,GAAA;;oBACnC,MAAM,CAAA,KAAA,WAAW,CAAC,mBAAmB,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,kBAAkB,CAAC,YAAY,CAAC,CAAA,CAAC;oBAExE,gBAAgB,GAAG,KAAK,CAAC;qBACzB,wXAAA,AAAyB,EAAC;wBACzB,WAAW;wBACX,kBAAkB;wBAClB,qBAAqB;wBACrB,8BAA8B;wBAC9B,YAAY;qBACZ,CAAC,CAAC;gBACJ,CAAC,CAAA,CAAC,CAAC;QACJ,CAAC,EACA,KAAK,CAAC,GAAG,EAAE;YACX,gBAAgB,GAAG,KAAK,CAAC;yWACzB,4BAAA,AAAyB,EAAC;gBACzB,WAAW;gBACX,kBAAkB;gBAClB,8BAA8B;gBAC9B,qBAAqB;gBACrB,YAAY;aACZ,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,wFAAwF;IACxF,UAAU,CAAC,GAAG,EAAE;QACf,IAAI,gBAAgB,EAAE,CAAC;yWACtB,4BAAA,AAAyB,EAAC;gBACzB,WAAW;gBACX,kBAAkB;gBAClB,qBAAqB;gBACrB,YAAY;aACZ,CAAC,CAAC;QACJ,CAAC;IACF,CAAC,EAAE,WAAW,CAAC,kBAAkB,GAAG,IAAI,CAAC,CAAC;AAC3C,CAAC,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1803, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1809, "column": 0}, "map": {"version":3,"file":"watch_transaction_for_confirmations.js","sources":["file:///Users/jamesmorgan/Developer/web3/E-VOT/frontend/e-vote-app/node_modules/.pnpm/web3-eth%404.11.1_bufferutil%404.0.9_typescript%405.7.3_utf-8-validate%405.0.10_zod%403.24.1/node_modules/web3-eth/src/utils/watch_transaction_for_confirmations.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Bytes, EthExecutionAPI, Web3BaseProvider, TransactionReceipt } from 'web3-types';\nimport { Web3Context, Web3PromiEvent } from 'web3-core';\nimport { format } from 'web3-utils';\nimport { isNullish, JsonSchema } from 'web3-validator';\n\nimport {\n\tTransactionMissingReceiptOrBlockHashError,\n\tTransactionReceiptMissingBlockNumberError,\n} from 'web3-errors';\nimport { DataFormat } from 'web3-types';\nimport { transactionReceiptSchema } from '../schemas.js';\nimport {\n\twatchTransactionByPolling,\n\tWeb3PromiEventEventTypeBase,\n} from './watch_transaction_by_polling.js';\nimport { watchTransactionBySubscription } from './watch_transaction_by_subscription.js';\n\nexport function watchTransactionForConfirmations<\n\tReturnFormat extends DataFormat,\n\tWeb3PromiEventEventType extends Web3PromiEventEventTypeBase<ReturnFormat>,\n\tResolveType = TransactionReceipt,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionPromiEvent: Web3PromiEvent<ResolveType, Web3PromiEventEventType>,\n\ttransactionReceipt: TransactionReceipt,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat,\n\tcustomTransactionReceiptSchema?: JsonSchema,\n) {\n\tif (isNullish(transactionReceipt) || isNullish(transactionReceipt.blockHash))\n\t\tthrow new TransactionMissingReceiptOrBlockHashError({\n\t\t\treceipt: transactionReceipt,\n\t\t\tblockHash: format({ format: 'bytes32' }, transactionReceipt?.blockHash, returnFormat),\n\t\t\ttransactionHash: format({ format: 'bytes32' }, transactionHash, returnFormat),\n\t\t});\n\n\tif (!transactionReceipt.blockNumber)\n\t\tthrow new TransactionReceiptMissingBlockNumberError({ receipt: transactionReceipt });\n\n\t// As we have the receipt, it's the first confirmation that tx is accepted.\n\ttransactionPromiEvent.emit('confirmation', {\n\t\tconfirmations: format({ format: 'uint' }, 1, returnFormat),\n\t\treceipt: format(\n\t\t\tcustomTransactionReceiptSchema ?? transactionReceiptSchema,\n\t\t\ttransactionReceipt,\n\t\t\treturnFormat,\n\t\t),\n\t\tlatestBlockHash: format({ format: 'bytes32' }, transactionReceipt.blockHash, returnFormat),\n\t} as Web3PromiEventEventType['confirmation']);\n\n\t// so a subscription for newBlockHeaders can be made instead of polling\n\tconst provider: Web3BaseProvider = web3Context.requestManager.provider as Web3BaseProvider;\n\tif (provider && 'supportsSubscriptions' in provider && provider.supportsSubscriptions()) {\n\t\twatchTransactionBySubscription({\n\t\t\tweb3Context,\n\t\t\ttransactionReceipt,\n\t\t\ttransactionPromiEvent,\n\t\t\tcustomTransactionReceiptSchema,\n\t\t\treturnFormat,\n\t\t});\n\t} else {\n\t\twatchTransactionByPolling({\n\t\t\tweb3Context,\n\t\t\ttransactionReceipt,\n\t\t\ttransactionPromiEvent,\n\t\t\tcustomTransactionReceiptSchema,\n\t\t\treturnFormat,\n\t\t});\n\t}\n}\n"],"names":[],"mappings":";;;AAkBA,OAAO,EAAE,MAAM,EAAE,MAAM,YAAY,CAAC;AACpC,OAAO,EAAE,SAAS,EAAc,MAAM,gBAAgB,CAAC;AAEvD,OAAO,EACN,yCAAyC,EACzC,yCAAyC,GACzC,MAAM,aAAa,CAAC;AAErB,OAAO,EAAE,wBAAwB,EAAE,MAAM,eAAe,CAAC;AACzD,OAAO,EACN,yBAAyB,GAEzB,MAAM,mCAAmC,CAAC;AAC3C,OAAO,EAAE,8BAA8B,EAAE,MAAM,wCAAwC,CAAC;;;;;;;;;;AAElF,SAAU,gCAAgC,CAK/C,WAAyC,EACzC,qBAA2E,EAC3E,kBAAsC,EACtC,eAAsB,EACtB,YAA0B,EAC1B,8BAA2C;IAE3C,8OAAI,YAAA,AAAS,EAAC,kBAAkB,CAAC,8OAAI,YAAA,AAAS,EAAC,kBAAkB,CAAC,SAAS,CAAC,EAC3E,MAAM,4OAAI,4CAAyC,CAAC;QACnD,OAAO,EAAE,kBAAkB;QAC3B,SAAS,yNAAE,SAAA,AAAM,EAAC;YAAE,MAAM,EAAE,SAAS;QAAA,CAAE,EAAE,kBAAkB,KAAA,QAAlB,kBAAkB,KAAA,KAAA,IAAA,KAAA,IAAlB,kBAAkB,CAAE,SAAS,EAAE,YAAY,CAAC;QACrF,eAAe,yNAAE,SAAA,AAAM,EAAC;YAAE,MAAM,EAAE,SAAS;QAAA,CAAE,EAAE,eAAe,EAAE,YAAY,CAAC;KAC7E,CAAC,CAAC;IAEJ,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAClC,MAAM,4OAAI,4CAAyC,CAAC;QAAE,OAAO,EAAE,kBAAkB;IAAA,CAAE,CAAC,CAAC;IAEtF,2EAA2E;IAC3E,qBAAqB,CAAC,IAAI,CAAC,cAAc,EAAE;QAC1C,aAAa,GAAE,+NAAA,AAAM,EAAC;YAAE,MAAM,EAAE,MAAM;QAAA,CAAE,EAAE,CAAC,EAAE,YAAY,CAAC;QAC1D,OAAO,yNAAE,SAAA,AAAM,EACd,8BAA8B,KAAA,QAA9B,8BAA8B,KAAA,KAAA,IAA9B,8BAA8B,GAAI,sVAAwB,EAC1D,kBAAkB,EAClB,YAAY,CACZ;QACD,eAAe,yNAAE,SAAA,AAAM,EAAC;YAAE,MAAM,EAAE,SAAS;QAAA,CAAE,EAAE,kBAAkB,CAAC,SAAS,EAAE,YAAY,CAAC;KAC/C,CAAC,CAAC;IAE9C,uEAAuE;IACvE,MAAM,QAAQ,GAAqB,WAAW,CAAC,cAAc,CAAC,QAA4B,CAAC;IAC3F,IAAI,QAAQ,IAAI,uBAAuB,IAAI,QAAQ,IAAI,QAAQ,CAAC,qBAAqB,EAAE,EAAE,CAAC;0WACzF,iCAAA,AAA8B,EAAC;YAC9B,WAAW;YACX,kBAAkB;YAClB,qBAAqB;YACrB,8BAA8B;YAC9B,YAAY;SACZ,CAAC,CAAC;IACJ,CAAC,MAAM,CAAC;qWACP,4BAAA,AAAyB,EAAC;YACzB,WAAW;YACX,kBAAkB;YAClB,qBAAqB;YACrB,8BAA8B;YAC9B,YAAY;SACZ,CAAC,CAAC;IACJ,CAAC;AACF,CAAC","ignoreList":[0]}},
    {"offset": {"line": 1870, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1876, "column": 0}, "map": {"version":3,"file":"get_revert_reason.js","sources":["file:///Users/jamesmorgan/Developer/web3/E-VOT/frontend/e-vote-app/node_modules/.pnpm/web3-eth%404.11.1_bufferutil%404.0.9_typescript%405.7.3_utf-8-validate%405.0.10_zod%403.24.1/node_modules/web3-eth/src/utils/get_revert_reason.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3Context } from 'web3-core';\nimport {\n\tContractExecutionError,\n\tEip838ExecutionError,\n\tInvalidResponseError,\n\tMultipleErrors,\n} from 'web3-errors';\nimport { decodeContractErrorData, isAbiErrorFragment } from 'web3-eth-abi';\nimport {\n\tAbiErrorFragment,\n\tContractAbi,\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tEthExecutionAPI,\n\tTransactionCall,\n} from 'web3-types';\n\n// eslint-disable-next-line import/no-cycle\nimport { call } from '../rpc_method_wrappers.js';\nimport { RevertReason, RevertReasonWithCustomError } from '../types.js';\n\nexport const parseTransactionError = (error: unknown, contractAbi?: ContractAbi) => {\n\tif (error instanceof ContractExecutionError && error.cause instanceof Eip838ExecutionError) {\n\t\tif (contractAbi !== undefined) {\n\t\t\tconst errorsAbi = contractAbi.filter(abi =>\n\t\t\t\tisAbiErrorFragment(abi),\n\t\t\t) as unknown as AbiErrorFragment[];\n\t\t\tdecodeContractErrorData(errorsAbi, error.cause);\n\n\t\t\treturn {\n\t\t\t\treason: error.cause.message,\n\t\t\t\tsignature: error.cause.data?.slice(0, 10),\n\t\t\t\tdata: error.cause.data?.substring(10),\n\t\t\t\tcustomErrorName: error.cause.errorName,\n\t\t\t\tcustomErrorDecodedSignature: error.cause.errorSignature,\n\t\t\t\tcustomErrorArguments: error.cause.errorArgs,\n\t\t\t} as RevertReasonWithCustomError;\n\t\t}\n\n\t\treturn {\n\t\t\treason: error.cause.message,\n\t\t\tsignature: error.cause.data?.slice(0, 10),\n\t\t\tdata: error.cause.data?.substring(10),\n\t\t} as RevertReason;\n\t}\n\n\tif (\n\t\terror instanceof InvalidResponseError &&\n\t\t!Array.isArray((error.cause as MultipleErrors)?.errors) &&\n\t\terror.cause !== undefined\n\t) {\n\t\treturn error.cause.message;\n\t}\n\n\tthrow error;\n};\n\n/**\n *\tReturns the revert reason generated by the EVM if the transaction were to be executed.\n *\n * @param web3Context - ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n * @param transaction - A transaction object where all properties are optional except `to`, however it's recommended to include the `from` property or it may default to `0x0000000000000000000000000000000000000000` depending on your node or provider.\n * @returns `undefined` if no revert reason was given, a revert reason object, a revert reason string, or an `unknown` error\n */\nexport async function getRevertReason<\n\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: TransactionCall,\n\tcontractAbi?: ContractAbi,\n\treturnFormat: ReturnFormat = web3Context.defaultReturnFormat as ReturnFormat,\n): Promise<undefined | RevertReason | RevertReasonWithCustomError | string> {\n\ttry {\n\t\tawait call(web3Context, transaction, web3Context.defaultBlock, returnFormat);\n\t\treturn undefined;\n\t} catch (error) {\n\t\treturn parseTransactionError(error, contractAbi);\n\t}\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;EAeE;;;;AAGF,OAAO,EACN,sBAAsB,EACtB,oBAAoB,EACpB,oBAAoB,GAEpB,MAAM,aAAa,CAAC;;AAWrB,2CAA2C;AAC3C,OAAO,EAAE,IAAI,EAAE,MAAM,2BAA2B,CAAC;;;;AAXjD,OAAO,EAAE,uBAAuB,EAAE,kBAAkB,EAAE,MAAM,cAAc,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcpE,MAAM,qBAAqB,GAAG,CAAC,KAAc,EAAE,WAAyB,EAAE,EAAE;;IAClF,IAAI,KAAK,iPAAY,yBAAsB,IAAI,KAAK,CAAC,KAAK,iPAAY,uBAAoB,EAAE,CAAC;QAC5F,IAAI,WAAW,KAAK,SAAS,EAAE,CAAC;YAC/B,MAAM,SAAS,GAAG,WAAW,CAAC,MAAM,EAAC,GAAG,CAAC,EAAE,CAC1C,+RAAA,AAAkB,EAAC,GAAG,CAAC,CACU,CAAC;4SACnC,0BAAuB,AAAvB,EAAwB,SAAS,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;YAEhD,OAAO;gBACN,MAAM,EAAE,KAAK,CAAC,KAAK,CAAC,OAAO;gBAC3B,SAAS,EAAE,CAAA,KAAA,KAAK,CAAC,KAAK,CAAC,IAAI,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;gBACzC,IAAI,EAAE,CAAA,KAAA,KAAK,CAAC,KAAK,CAAC,IAAI,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,SAAS,CAAC,EAAE,CAAC;gBACrC,eAAe,EAAE,KAAK,CAAC,KAAK,CAAC,SAAS;gBACtC,2BAA2B,EAAE,KAAK,CAAC,KAAK,CAAC,cAAc;gBACvD,oBAAoB,EAAE,KAAK,CAAC,KAAK,CAAC,SAAS;aACZ,CAAC;QAClC,CAAC;QAED,OAAO;YACN,MAAM,EAAE,KAAK,CAAC,KAAK,CAAC,OAAO;YAC3B,SAAS,EAAE,CAAA,KAAA,KAAK,CAAC,KAAK,CAAC,IAAI,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;YACzC,IAAI,EAAE,CAAA,KAAA,KAAK,CAAC,KAAK,CAAC,IAAI,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,SAAS,CAAC,EAAE,CAAC;SACrB,CAAC;IACnB,CAAC;IAED,IACC,KAAK,iPAAY,uBAAoB,IACrC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAA,KAAC,KAAK,CAAC,KAAwB,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,MAAM,CAAC,IACvD,KAAK,CAAC,KAAK,KAAK,SAAS,EACxB,CAAC;QACF,OAAO,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC;IAC5B,CAAC;IAED,MAAM,KAAK,CAAC;AACb,CAAC,CAAC;AASI,SAAgB,eAAe,CAAA,aAAA,EAAA,aAAA,EAAA,aAAA;wDAGpC,WAAyC,EACzC,WAA4B,EAC5B,WAAyB,EACzB,eAA6B,WAAW,CAAC,mBAAmC;QAE5E,IAAI,CAAC;YACJ,iVAAM,OAAA,AAAI,EAAC,WAAW,EAAE,WAAW,EAAE,WAAW,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;YAC7E,OAAO,SAAS,CAAC;QAClB,CAAC,CAAC,OAAO,KAAK,EAAE,CAAC;YAChB,OAAO,qBAAqB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;QAClD,CAAC;IACF,CAAC;CAAA","ignoreList":[0]}},
    {"offset": {"line": 1969, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1975, "column": 0}, "map": {"version":3,"file":"get_transaction_error.js","sources":["file:///Users/jamesmorgan/Developer/web3/E-VOT/frontend/e-vote-app/node_modules/.pnpm/web3-eth%404.11.1_bufferutil%404.0.9_typescript%405.7.3_utf-8-validate%405.0.10_zod%403.24.1/node_modules/web3-eth/src/utils/get_transaction_error.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3Context } from 'web3-core';\nimport {\n\tTransactionRevertedWithoutReasonError,\n\tTransactionRevertInstructionError,\n\tTransactionRevertWithCustomError,\n} from 'web3-errors';\nimport {\n\tDataFormat,\n\tFormatType,\n\tContractAbi,\n\tTransactionCall,\n\tTransactionReceipt,\n} from 'web3-types';\nimport { RevertReason, RevertReasonWithCustomError } from '../types.js';\n// eslint-disable-next-line import/no-cycle\nimport { getRevertReason, parseTransactionError } from './get_revert_reason.js';\n\nexport async function getTransactionError<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context,\n\ttransactionFormatted?: TransactionCall,\n\ttransactionReceiptFormatted?: FormatType<TransactionReceipt, ReturnFormat>,\n\treceivedError?: unknown,\n\tcontractAbi?: ContractAbi,\n\tknownReason?: string | RevertReason | RevertReasonWithCustomError,\n) {\n\tlet _reason: string | RevertReason | RevertReasonWithCustomError | undefined = knownReason;\n\n\tif (_reason === undefined) {\n\t\tif (receivedError !== undefined) {\n\t\t\t_reason = parseTransactionError(receivedError);\n\t\t} else if (web3Context.handleRevert && transactionFormatted !== undefined) {\n\t\t\t_reason = await getRevertReason(web3Context, transactionFormatted, contractAbi);\n\t\t}\n\t}\n\n\tlet error:\n\t\t| TransactionRevertedWithoutReasonError<FormatType<TransactionReceipt, ReturnFormat>>\n\t\t| TransactionRevertInstructionError<FormatType<TransactionReceipt, ReturnFormat>>\n\t\t| TransactionRevertWithCustomError<FormatType<TransactionReceipt, ReturnFormat>>;\n\tif (_reason === undefined) {\n\t\terror = new TransactionRevertedWithoutReasonError<\n\t\t\tFormatType<TransactionReceipt, ReturnFormat>\n\t\t>(transactionReceiptFormatted);\n\t} else if (typeof _reason === 'string') {\n\t\terror = new TransactionRevertInstructionError<FormatType<TransactionReceipt, ReturnFormat>>(\n\t\t\t_reason,\n\t\t\tundefined,\n\t\t\ttransactionReceiptFormatted,\n\t\t);\n\t} else if (\n\t\t(_reason as RevertReasonWithCustomError).customErrorName !== undefined &&\n\t\t(_reason as RevertReasonWithCustomError).customErrorDecodedSignature !== undefined &&\n\t\t(_reason as RevertReasonWithCustomError).customErrorArguments !== undefined\n\t) {\n\t\tconst reasonWithCustomError: RevertReasonWithCustomError =\n\t\t\t_reason as RevertReasonWithCustomError;\n\t\terror = new TransactionRevertWithCustomError<FormatType<TransactionReceipt, ReturnFormat>>(\n\t\t\treasonWithCustomError.reason,\n\t\t\treasonWithCustomError.customErrorName,\n\t\t\treasonWithCustomError.customErrorDecodedSignature,\n\t\t\treasonWithCustomError.customErrorArguments,\n\t\t\treasonWithCustomError.signature,\n\t\t\ttransactionReceiptFormatted,\n\t\t\treasonWithCustomError.data,\n\t\t);\n\t} else {\n\t\terror = new TransactionRevertInstructionError<FormatType<TransactionReceipt, ReturnFormat>>(\n\t\t\t_reason.reason,\n\t\t\t_reason.signature,\n\t\t\ttransactionReceiptFormatted,\n\t\t\t_reason.data,\n\t\t);\n\t}\n\n\treturn error;\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;EAeE;;;;AAgBF,2CAA2C;AAC3C,OAAO,EAAE,eAAe,EAAE,qBAAqB,EAAE,MAAM,wBAAwB,CAAC;AAdhF,OAAO,EACN,qCAAqC,EACrC,iCAAiC,EACjC,gCAAgC,GAChC,MAAM,aAAa,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYf,SAAgB,mBAAmB,CACxC,WAAwB,EACxB,oBAAsC,EACtC,2BAA0E,EAC1E,aAAuB,EACvB,WAAyB,EACzB,WAAiE;;QAEjE,IAAI,OAAO,GAAoE,WAAW,CAAC;QAE3F,IAAI,OAAO,KAAK,SAAS,EAAE,CAAC;YAC3B,IAAI,aAAa,KAAK,SAAS,EAAE,CAAC;gBACjC,OAAO,qVAAG,wBAAA,AAAqB,EAAC,aAAa,CAAC,CAAC;YAChD,CAAC,MAAM,IAAI,WAAW,CAAC,YAAY,IAAI,oBAAoB,KAAK,SAAS,EAAE,CAAC;gBAC3E,OAAO,GAAG,UAAM,gWAAA,AAAe,EAAC,WAAW,EAAE,oBAAoB,EAAE,WAAW,CAAC,CAAC;YACjF,CAAC;QACF,CAAC;QAED,IAAI,KAG6E,CAAC;QAClF,IAAI,OAAO,KAAK,SAAS,EAAE,CAAC;YAC3B,KAAK,GAAG,IAAI,gRAAqC,CAE/C,2BAA2B,CAAC,CAAC;QAChC,CAAC,MAAM,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE,CAAC;YACxC,KAAK,GAAG,4OAAI,oCAAiC,CAC5C,OAAO,EACP,SAAS,EACT,2BAA2B,CAC3B,CAAC;QACH,CAAC,MAAM,IACL,OAAuC,CAAC,eAAe,KAAK,SAAS,IACrE,OAAuC,CAAC,2BAA2B,KAAK,SAAS,IACjF,OAAuC,CAAC,oBAAoB,KAAK,SAAS,EAC1E,CAAC;YACF,MAAM,qBAAqB,GAC1B,OAAsC,CAAC;YACxC,KAAK,GAAG,4OAAI,mCAAgC,CAC3C,qBAAqB,CAAC,MAAM,EAC5B,qBAAqB,CAAC,eAAe,EACrC,qBAAqB,CAAC,2BAA2B,EACjD,qBAAqB,CAAC,oBAAoB,EAC1C,qBAAqB,CAAC,SAAS,EAC/B,2BAA2B,EAC3B,qBAAqB,CAAC,IAAI,CAC1B,CAAC;QACH,CAAC,MAAM,CAAC;YACP,KAAK,GAAG,4OAAI,oCAAiC,CAC5C,OAAO,CAAC,MAAM,EACd,OAAO,CAAC,SAAS,EACjB,2BAA2B,EAC3B,OAAO,CAAC,IAAI,CACZ,CAAC;QACH,CAAC;QAED,OAAO,KAAK,CAAC;IACd,CAAC;CAAA","ignoreList":[0]}},
    {"offset": {"line": 2050, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2056, "column": 0}, "map": {"version":3,"file":"decoding.js","sources":["file:///Users/jamesmorgan/Developer/web3/E-VOT/frontend/e-vote-app/node_modules/.pnpm/web3-eth%404.11.1_bufferutil%404.0.9_typescript%405.7.3_utf-8-validate%405.0.10_zod%403.24.1/node_modules/web3-eth/src/utils/decoding.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { format } from 'web3-utils';\n\nimport {\n\tAbiEventFragment,\n\tLogsInput,\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tEventLog,\n\tContractAbiWithSignature,\n} from 'web3-types';\n\nimport { decodeLog } from 'web3-eth-abi';\n\nimport { logSchema } from '../schemas.js';\nimport { ALL_EVENTS } from '../constants.js';\n\nexport const decodeEventABI = (\n\tevent: AbiEventFragment & { signature: string },\n\tdata: LogsInput,\n\tjsonInterface: ContractAbiWithSignature,\n\treturnFormat: DataFormat = DEFAULT_RETURN_FORMAT,\n): EventLog => {\n\tlet modifiedEvent = { ...event };\n\n\tconst result = format(logSchema, data, returnFormat);\n\n\t// if allEvents get the right event\n\tif ([ALL_EVENTS, 'allEvents'].includes(modifiedEvent.name)) {\n\t\tconst matchedEvent = jsonInterface.find(j => j.signature === data.topics[0]);\n\t\tif (matchedEvent) {\n\t\t\tmodifiedEvent = matchedEvent as AbiEventFragment & { signature: string };\n\t\t} else {\n\t\t\tmodifiedEvent = { anonymous: true } as unknown as AbiEventFragment & {\n\t\t\t\tsignature: string;\n\t\t\t};\n\t\t}\n\t}\n\n\t// create empty inputs if none are present (e.g. anonymous events on allEvents)\n\tmodifiedEvent.inputs = modifiedEvent.inputs ?? event.inputs ?? [];\n\n\t// Handle case where an event signature shadows the current ABI with non-identical\n\t// arg indexing. If # of topics doesn't match, event is anon.\n\tif (!modifiedEvent.anonymous) {\n\t\tlet indexedInputs = 0;\n\t\t(modifiedEvent.inputs ?? []).forEach(input => {\n\t\t\tif (input.indexed) {\n\t\t\t\tindexedInputs += 1;\n\t\t\t}\n\t\t});\n\n\t\tif (indexedInputs > 0 && data?.topics && data?.topics.length !== indexedInputs + 1) {\n\t\t\t// checks if event is anonymous\n\t\t\tmodifiedEvent = {\n\t\t\t\t...modifiedEvent,\n\t\t\t\tanonymous: true,\n\t\t\t\tinputs: [],\n\t\t\t};\n\t\t}\n\t}\n\n\tconst argTopics = modifiedEvent.anonymous ? data.topics : (data.topics ?? []).slice(1);\n\n\treturn {\n\t\t...result,\n\t\treturnValues: decodeLog([...(modifiedEvent.inputs ?? [])], data.data, argTopics),\n\t\tevent: modifiedEvent.name,\n\t\tsignature:\n\t\t\t!modifiedEvent.anonymous && data.topics?.length > 0 && data.topics[0]\n\t\t\t\t? data.topics[0]\n\t\t\t\t: undefined,\n\n\t\traw: {\n\t\t\tdata: data.data,\n\t\t\ttopics: data.topics,\n\t\t},\n\t};\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2137, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2143, "column": 0}, "map": {"version":3,"file":"send_tx_helper.js","sources":["file:///Users/jamesmorgan/Developer/web3/E-VOT/frontend/e-vote-app/node_modules/.pnpm/web3-eth%404.11.1_bufferutil%404.0.9_typescript%405.7.3_utf-8-validate%405.0.10_zod%403.24.1/node_modules/web3-eth/src/utils/send_tx_helper.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport {\n\tETH_DATA_FORMAT,\n\tFormatType,\n\tDataFormat,\n\tEthExecutionAPI,\n\tTransactionWithSenderAPI,\n\tWeb3BaseWalletAccount,\n\tHexString,\n\tTransactionReceipt,\n\tTransaction,\n\tTransactionCall,\n\tTransactionWithFromLocalWalletIndex,\n\tTransactionWithToLocalWalletIndex,\n\tTransactionWithFromAndToLocalWalletIndex,\n\tLogsInput,\n\tTransactionHash,\n\tContractAbiWithSignature,\n} from 'web3-types';\nimport { Web3Context, Web3EventEmitter, Web3PromiEvent } from 'web3-core';\nimport { isNullish, JsonSchema } from 'web3-validator';\nimport {\n\tContractExecutionError,\n\tInvalidResponseError,\n\tTransactionPollingTimeoutError,\n\tTransactionRevertedWithoutReasonError,\n\tTransactionRevertInstructionError,\n\tTransactionRevertWithCustomError,\n} from 'web3-errors';\nimport { ethRpcMethods } from 'web3-rpc-methods';\n\nimport {\n\tInternalTransaction,\n\tSendSignedTransactionEvents,\n\tSendTransactionEvents,\n\tSendTransactionOptions,\n} from '../types.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionGasPricing } from './get_transaction_gas_pricing.js';\n// eslint-disable-next-line import/no-cycle\nimport { trySendTransaction } from './try_send_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { watchTransactionForConfirmations } from './watch_transaction_for_confirmations.js';\nimport { ALL_EVENTS_ABI } from '../constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionError } from './get_transaction_error.js';\n// eslint-disable-next-line import/no-cycle\nimport { getRevertReason } from './get_revert_reason.js';\nimport { decodeEventABI } from './decoding.js';\n\nexport class SendTxHelper<\n\tReturnFormat extends DataFormat,\n\tResolveType = FormatType<TransactionReceipt, ReturnFormat>,\n\tTxType =\n\t\t| Transaction\n\t\t| TransactionWithFromLocalWalletIndex\n\t\t| TransactionWithToLocalWalletIndex\n\t\t| TransactionWithFromAndToLocalWalletIndex,\n> {\n\tprivate readonly web3Context: Web3Context<EthExecutionAPI>;\n\tprivate readonly promiEvent: Web3PromiEvent<\n\t\tResolveType,\n\t\tSendSignedTransactionEvents<ReturnFormat> | SendTransactionEvents<ReturnFormat>\n\t>;\n\tprivate readonly options: SendTransactionOptions<ResolveType> = {\n\t\tcheckRevertBeforeSending: true,\n\t};\n\tprivate readonly returnFormat: ReturnFormat;\n\tpublic constructor({\n\t\toptions,\n\t\tweb3Context,\n\t\tpromiEvent,\n\t\treturnFormat,\n\t}: {\n\t\tweb3Context: Web3Context<EthExecutionAPI>;\n\t\toptions: SendTransactionOptions<ResolveType>;\n\t\tpromiEvent: Web3PromiEvent<\n\t\t\tResolveType,\n\t\t\tSendSignedTransactionEvents<ReturnFormat> | SendTransactionEvents<ReturnFormat>\n\t\t>;\n\t\treturnFormat: ReturnFormat;\n\t}) {\n\t\tthis.options = options;\n\t\tthis.web3Context = web3Context;\n\t\tthis.promiEvent = promiEvent;\n\t\tthis.returnFormat = returnFormat;\n\t}\n\n\tpublic getReceiptWithEvents(data: TransactionReceipt): ResolveType {\n\t\tconst result = { ...(data ?? {}) };\n\t\tif (this.options?.contractAbi && result.logs && result.logs.length > 0) {\n\t\t\tresult.events = {};\n\t\t\tfor (const log of result.logs) {\n\t\t\t\tconst event = decodeEventABI(\n\t\t\t\t\tALL_EVENTS_ABI,\n\t\t\t\t\tlog as LogsInput,\n\t\t\t\t\tthis.options?.contractAbi as ContractAbiWithSignature,\n\t\t\t\t\tthis.returnFormat,\n\t\t\t\t);\n\t\t\t\tif (event.event) {\n\t\t\t\t\tresult.events[event.event] = event;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result as unknown as ResolveType;\n\t}\n\n\tpublic async checkRevertBeforeSending(tx: TransactionCall) {\n\t\tif (this.options.checkRevertBeforeSending !== false) {\n\t\t\tlet formatTx = tx;\n\t\t\tif (isNullish(tx.data) && isNullish(tx.input) && isNullish(tx.gas)) {\n\t\t\t\t// eth.call runs into error if data isnt filled and gas is not defined, its a simple transaction so we fill it with 21000\n\t\t\t\tformatTx = {\n\t\t\t\t\t...tx,\n\t\t\t\t\tgas: 21000,\n\t\t\t\t};\n\t\t\t}\n\t\t\tconst reason = await getRevertReason(\n\t\t\t\tthis.web3Context,\n\t\t\t\tformatTx,\n\t\t\t\tthis.options.contractAbi,\n\t\t\t);\n\t\t\tif (reason !== undefined) {\n\t\t\t\tthrow await getTransactionError<ReturnFormat>(\n\t\t\t\t\tthis.web3Context,\n\t\t\t\t\ttx,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\tthis.options.contractAbi,\n\t\t\t\t\treason,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic emitSending(tx: TxType | HexString) {\n\t\tif (this.promiEvent.listenerCount('sending') > 0) {\n\t\t\tthis.promiEvent.emit(\n\t\t\t\t'sending',\n\t\t\t\ttx as\n\t\t\t\t\t| SendSignedTransactionEvents<ReturnFormat>['sending']\n\t\t\t\t\t| SendTransactionEvents<ReturnFormat>['sending'],\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic async populateGasPrice({\n\t\ttransactionFormatted,\n\t\ttransaction,\n\t}: {\n\t\ttransactionFormatted: TxType;\n\t\ttransaction: TxType;\n\t}): Promise<TxType> {\n\t\tlet result = transactionFormatted;\n\t\tif (\n\t\t\t!this.web3Context.config.ignoreGasPricing &&\n\t\t\t!this.options?.ignoreGasPricing &&\n\t\t\tisNullish((transactionFormatted as Transaction).gasPrice) &&\n\t\t\t(isNullish((transaction as Transaction).maxPriorityFeePerGas) ||\n\t\t\t\tisNullish((transaction as Transaction).maxFeePerGas))\n\t\t) {\n\t\t\tresult = {\n\t\t\t\t...transactionFormatted,\n\t\t\t\t// @TODO gasPrice, maxPriorityFeePerGas, maxFeePerGas\n\t\t\t\t// should not be included if undefined, but currently are\n\t\t\t\t...(await getTransactionGasPricing(\n\t\t\t\t\ttransactionFormatted as InternalTransaction,\n\t\t\t\t\tthis.web3Context,\n\t\t\t\t\tETH_DATA_FORMAT,\n\t\t\t\t)),\n\t\t\t};\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic async signAndSend({\n\t\twallet,\n\t\ttx,\n\t}: {\n\t\twallet: Web3BaseWalletAccount | undefined;\n\t\ttx: TxType;\n\t}) {\n\t\tif (wallet) {\n\t\t\tconst signedTransaction = await wallet.signTransaction(tx as Transaction);\n\n\t\t\treturn trySendTransaction(\n\t\t\t\tthis.web3Context,\n\t\t\t\tasync (): Promise<string> =>\n\t\t\t\t\tethRpcMethods.sendRawTransaction(\n\t\t\t\t\t\tthis.web3Context.requestManager,\n\t\t\t\t\t\tsignedTransaction.rawTransaction,\n\t\t\t\t\t),\n\t\t\t\tsignedTransaction.transactionHash,\n\t\t\t);\n\t\t}\n\t\treturn trySendTransaction(\n\t\t\tthis.web3Context,\n\t\t\tasync (): Promise<string> =>\n\t\t\t\tethRpcMethods.sendTransaction(\n\t\t\t\t\tthis.web3Context.requestManager,\n\t\t\t\t\ttx as Partial<TransactionWithSenderAPI>,\n\t\t\t\t),\n\t\t);\n\t}\n\n\tpublic emitSent(tx: TxType | HexString) {\n\t\tif (this.promiEvent.listenerCount('sent') > 0) {\n\t\t\tthis.promiEvent.emit(\n\t\t\t\t'sent',\n\t\t\t\ttx as\n\t\t\t\t\t| SendSignedTransactionEvents<ReturnFormat>['sent']\n\t\t\t\t\t| SendTransactionEvents<ReturnFormat>['sent'],\n\t\t\t);\n\t\t}\n\t}\n\tpublic emitTransactionHash(hash: string & Uint8Array) {\n\t\tif (this.promiEvent.listenerCount('transactionHash') > 0) {\n\t\t\tthis.promiEvent.emit('transactionHash', hash);\n\t\t}\n\t}\n\n\tpublic emitReceipt(receipt: ResolveType) {\n\t\tif (this.promiEvent.listenerCount('receipt') > 0) {\n\t\t\t(\n\t\t\t\tthis.promiEvent as Web3EventEmitter<\n\t\t\t\t\tSendTransactionEvents<ReturnFormat> | SendSignedTransactionEvents<ReturnFormat>\n\t\t\t\t>\n\t\t\t).emit(\n\t\t\t\t'receipt',\n\t\t\t\t// @ts-expect-error unknown type fix\n\t\t\t\treceipt,\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic async handleError({ error, tx }: { error: unknown; tx: TransactionCall }) {\n\t\tlet _error = error;\n\n\t\tif (_error instanceof ContractExecutionError && this.web3Context.handleRevert) {\n\t\t\t_error = await getTransactionError(\n\t\t\t\tthis.web3Context,\n\t\t\t\ttx,\n\t\t\t\tundefined,\n\t\t\t\tundefined,\n\t\t\t\tthis.options?.contractAbi,\n\t\t\t);\n\t\t}\n\n\t\tif (\n\t\t\t(_error instanceof InvalidResponseError ||\n\t\t\t\t_error instanceof ContractExecutionError ||\n\t\t\t\t_error instanceof TransactionRevertWithCustomError ||\n\t\t\t\t_error instanceof TransactionRevertedWithoutReasonError ||\n\t\t\t\t_error instanceof TransactionRevertInstructionError ||\n\t\t\t\t_error instanceof TransactionPollingTimeoutError) &&\n\t\t\tthis.promiEvent.listenerCount('error') > 0\n\t\t) {\n\t\t\tthis.promiEvent.emit('error', _error);\n\t\t}\n\n\t\treturn _error;\n\t}\n\n\tpublic emitConfirmation({\n\t\treceipt,\n\t\ttransactionHash,\n\t\tcustomTransactionReceiptSchema,\n\t}: {\n\t\treceipt: ResolveType;\n\t\ttransactionHash: TransactionHash;\n\t\tcustomTransactionReceiptSchema?: JsonSchema;\n\t}) {\n\t\tif (this.promiEvent.listenerCount('confirmation') > 0) {\n\t\t\twatchTransactionForConfirmations<\n\t\t\t\tReturnFormat,\n\t\t\t\tSendSignedTransactionEvents<ReturnFormat> | SendTransactionEvents<ReturnFormat>,\n\t\t\t\tResolveType\n\t\t\t>(\n\t\t\t\tthis.web3Context,\n\t\t\t\tthis.promiEvent,\n\t\t\t\treceipt as unknown as TransactionReceipt,\n\t\t\t\ttransactionHash,\n\t\t\t\tthis.returnFormat,\n\t\t\t\tcustomTransactionReceiptSchema,\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic async handleResolve({ receipt, tx }: { receipt: ResolveType; tx: TransactionCall }) {\n\t\tif (this.options?.transactionResolver) {\n\t\t\treturn this.options?.transactionResolver(receipt as unknown as TransactionReceipt);\n\t\t}\n\t\tif ((receipt as unknown as TransactionReceipt).status === BigInt(0)) {\n\t\t\tconst error = await getTransactionError<ReturnFormat>(\n\t\t\t\tthis.web3Context,\n\t\t\t\ttx,\n\t\t\t\t// @ts-expect-error unknown type fix\n\t\t\t\treceipt,\n\t\t\t\tundefined,\n\t\t\t\tthis.options?.contractAbi,\n\t\t\t);\n\t\t\tif (this.promiEvent.listenerCount('error') > 0) {\n\t\t\t\tthis.promiEvent.emit('error', error);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t} else {\n\t\t\treturn receipt;\n\t\t}\n\t}\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 2343, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 2349, "column": 0}, "map": {"version":3,"file":"rpc_method_wrappers.js","sources":["file:///Users/jamesmorgan/Developer/web3/E-VOT/frontend/e-vote-app/node_modules/.pnpm/web3-eth%404.11.1_bufferutil%404.0.9_typescript%405.7.3_utf-8-validate%405.0.10_zod%403.24.1/node_modules/web3-eth/src/rpc_method_wrappers.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// Disabling because returnTypes must be last param to match 1.x params\n/* eslint-disable default-param-last */\nimport {\n\tETH_DATA_FORMAT,\n\tFormatType,\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tEthExecutionAPI,\n\tSignedTransactionInfoAPI,\n\tWeb3BaseWalletAccount,\n\tAddress,\n\tBlockTag,\n\tBlockNumberOrTag,\n\tBytes,\n\tFilter,\n\tHexString,\n\tNumbers,\n\tHexStringBytes,\n\tAccountObject,\n\tBlock,\n\tFeeHistory,\n\tLog,\n\tTransactionReceipt,\n\tTransaction,\n\tTransactionCall,\n\tWeb3EthExecutionAPI,\n\tTransactionWithFromLocalWalletIndex,\n\tTransactionWithToLocalWalletIndex,\n\tTransactionWithFromAndToLocalWalletIndex,\n\tTransactionForAccessList,\n\tAccessListResult,\n\tEip712TypedData,\n} from 'web3-types';\nimport { Web3Context, Web3PromiEvent } from 'web3-core';\nimport { format, hexToBytes, bytesToUint8Array, numberToHex } from 'web3-utils';\nimport { TransactionFactory } from 'web3-eth-accounts';\nimport { isBlockTag, isBytes, isNullish, isString } from 'web3-validator';\nimport { SignatureError } from 'web3-errors';\nimport { ethRpcMethods } from 'web3-rpc-methods';\n\nimport { decodeSignedTransaction } from './utils/decode_signed_transaction.js';\nimport {\n\taccountSchema,\n\tblockSchema,\n\tfeeHistorySchema,\n\tlogSchema,\n\ttransactionReceiptSchema,\n\taccessListResultSchema,\n\tSignatureObjectSchema,\n} from './schemas.js';\nimport {\n\tSendSignedTransactionEvents,\n\tSendSignedTransactionOptions,\n\tSendTransactionEvents,\n\tSendTransactionOptions,\n\tTransactionMiddleware,\n} from './types.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionFromOrToAttr } from './utils/transaction_builder.js';\nimport { formatTransaction } from './utils/format_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { trySendTransaction } from './utils/try_send_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { waitForTransactionReceipt } from './utils/wait_for_transaction_receipt.js';\nimport { NUMBER_DATA_FORMAT } from './constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { SendTxHelper } from './utils/send_tx_helper.js';\n\n/**\n * View additional documentations here: {@link Web3Eth.getProtocolVersion}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getProtocolVersion = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getProtocolVersion(web3Context.requestManager);\n\n// TODO Add returnFormat parameter\n/**\n * View additional documentations here: {@link Web3Eth.isSyncing}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isSyncing = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getSyncing(web3Context.requestManager);\n\n// TODO consider adding returnFormat parameter (to format address as bytes)\n/**\n * View additional documentations here: {@link Web3Eth.getCoinbase}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getCoinbase = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getCoinbase(web3Context.requestManager);\n\n/**\n * View additional documentations here: {@link Web3Eth.isMining}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isMining = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getMining(web3Context.requestManager);\n\n/**\n * View additional documentations here: {@link Web3Eth.getHashRate}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getHashRate<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getHashRate(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getGasPrice}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getGasPrice<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getGasPrice(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getMaxPriorityFeePerGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getMaxPriorityFeePerGas<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getMaxPriorityFeePerGas(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockNumber}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockNumber<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getBlockNumber(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBalance}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBalance<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getBalance(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getStorageAt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getStorageAt<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tstorageSlot: Numbers,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst storageSlotFormatted = format({ format: 'uint' }, storageSlot, ETH_DATA_FORMAT);\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getStorageAt(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tstorageSlotFormatted,\n\t\tblockNumberFormatted,\n\t);\n\treturn format(\n\t\t{ format: 'bytes' },\n\t\tresponse as Bytes,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getCode}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getCode<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getCode(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\treturn format(\n\t\t{ format: 'bytes' },\n\t\tresponse as Bytes,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlock<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\thydrated = false,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockByHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\thydrated,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockByNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\thydrated,\n\t\t);\n\t}\n\tconst res = format(\n\t\tblockSchema,\n\t\tresponse as unknown as Block,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n\n\tif (!isNullish(res)) {\n\t\tconst result = {\n\t\t\t...res,\n\t\t\ttransactions: res.transactions ?? [],\n\t\t};\n\t\treturn result;\n\t}\n\n\treturn res;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlockTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockTransactionCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockTransactionCountByHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockTransactionCountByNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t);\n\t}\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlockUncleCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockUncleCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleCountByBlockHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleCountByBlockNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t);\n\t}\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getUncle}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getUncle<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\tuncleIndex: Numbers,\n\treturnFormat: ReturnFormat,\n) {\n\tconst uncleIndexFormatted = format({ format: 'uint' }, uncleIndex, ETH_DATA_FORMAT);\n\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleByBlockHashAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\tuncleIndexFormatted,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleByBlockNumberAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\tuncleIndexFormatted,\n\t\t);\n\t}\n\n\treturn format(\n\t\tblockSchema,\n\t\tresponse as unknown as Block,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransaction<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat = web3Context.defaultReturnFormat as ReturnFormat,\n) {\n\tconst transactionHashFormatted = format(\n\t\t{ format: 'bytes32' },\n\t\ttransactionHash,\n\t\tDEFAULT_RETURN_FORMAT,\n\t);\n\tconst response = await ethRpcMethods.getTransactionByHash(\n\t\tweb3Context.requestManager,\n\t\ttransactionHashFormatted,\n\t);\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: formatTransaction(response, returnFormat, {\n\t\t\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t\t\t\tfillInputAndData: true,\n\t\t  });\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getPendingTransactions}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getPendingTransactions<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getPendingTransactions(web3Context.requestManager);\n\n\treturn response.map(transaction =>\n\t\tformatTransaction(\n\t\t\ttransaction as unknown as Transaction,\n\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t{\n\t\t\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t\t\t\tfillInputAndData: true,\n\t\t\t},\n\t\t),\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionFromBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionFromBlock<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\ttransactionIndex: Numbers,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionIndexFormatted = format({ format: 'uint' }, transactionIndex, ETH_DATA_FORMAT);\n\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getTransactionByBlockHashAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\ttransactionIndexFormatted,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getTransactionByBlockNumberAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\ttransactionIndexFormatted,\n\t\t);\n\t}\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: formatTransaction(response, returnFormat ?? web3Context.defaultReturnFormat, {\n\t\t\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t\t\t\tfillInputAndData: true,\n\t\t  });\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionReceipt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionReceipt<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionHashFormatted = format(\n\t\t{ format: 'bytes32' },\n\t\ttransactionHash,\n\t\tDEFAULT_RETURN_FORMAT,\n\t);\n\tlet response;\n\ttry {\n\t\tresponse = await ethRpcMethods.getTransactionReceipt(\n\t\t\tweb3Context.requestManager,\n\t\t\ttransactionHashFormatted,\n\t\t);\n\t} catch (error) {\n\t\t// geth indexing error, we poll until transactions stopped indexing\n\t\tif (\n\t\t\ttypeof error === 'object' &&\n\t\t\t!isNullish(error) &&\n\t\t\t'message' in error &&\n\t\t\t(error as { message: string }).message === 'transaction indexing is in progress'\n\t\t) {\n\t\t\tconsole.warn('Transaction indexing is in progress.');\n\t\t} else {\n\t\t\tthrow error;\n\t\t}\n\t}\n\treturn isNullish(response)\n\t\t? response\n\t\t: format(\n\t\t\t\ttransactionReceiptSchema,\n\t\t\t\tresponse as unknown as TransactionReceipt,\n\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t  );\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getTransactionCount(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sendTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendTransaction<\n\tReturnFormat extends DataFormat,\n\tResolveType = FormatType<TransactionReceipt, ReturnFormat>,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionObj:\n\t\t| Transaction\n\t\t| TransactionWithFromLocalWalletIndex\n\t\t| TransactionWithToLocalWalletIndex\n\t\t| TransactionWithFromAndToLocalWalletIndex,\n\treturnFormat: ReturnFormat,\n\toptions: SendTransactionOptions<ResolveType> = { checkRevertBeforeSending: true },\n\ttransactionMiddleware?: TransactionMiddleware,\n): Web3PromiEvent<ResolveType, SendTransactionEvents<ReturnFormat>> {\n\tconst promiEvent = new Web3PromiEvent<ResolveType, SendTransactionEvents<ReturnFormat>>(\n\t\t(resolve, reject) => {\n\t\t\tsetImmediate(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst sendTxHelper = new SendTxHelper<ReturnFormat, ResolveType>({\n\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\tpromiEvent,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t});\n\n\t\t\t\t\tlet transaction = { ...transactionObj };\n\n\t\t\t\t\tif (!isNullish(transactionMiddleware)) {\n\t\t\t\t\t\ttransaction = await transactionMiddleware.processTransaction(transaction);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet transactionFormatted: FormatType<\n\t\t\t\t\t\t| Transaction\n\t\t\t\t\t\t| TransactionWithFromLocalWalletIndex\n\t\t\t\t\t\t| TransactionWithToLocalWalletIndex\n\t\t\t\t\t\t| TransactionWithFromAndToLocalWalletIndex,\n\t\t\t\t\t\tReturnFormat\n\t\t\t\t\t> = formatTransaction(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...transaction,\n\t\t\t\t\t\t\tfrom: getTransactionFromOrToAttr('from', web3Context, transaction),\n\t\t\t\t\t\t\tto: getTransactionFromOrToAttr('to', web3Context, transaction),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tETH_DATA_FORMAT,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t\t\t\t\t\t},\n\t\t\t\t\t) as FormatType<Transaction, ReturnFormat>;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttransactionFormatted = (await sendTxHelper.populateGasPrice({\n\t\t\t\t\t\t\ttransaction,\n\t\t\t\t\t\t\ttransactionFormatted,\n\t\t\t\t\t\t})) as FormatType<Transaction, ReturnFormat>;\n\n\t\t\t\t\t\tawait sendTxHelper.checkRevertBeforeSending(\n\t\t\t\t\t\t\ttransactionFormatted as TransactionCall,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitSending(transactionFormatted);\n\n\t\t\t\t\t\tlet wallet: Web3BaseWalletAccount | undefined;\n\n\t\t\t\t\t\tif (web3Context.wallet && !isNullish(transactionFormatted.from)) {\n\t\t\t\t\t\t\twallet = web3Context.wallet.get(\n\t\t\t\t\t\t\t\t(transactionFormatted as Transaction).from as string,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst transactionHash: HexString = await sendTxHelper.signAndSend({\n\t\t\t\t\t\t\twallet,\n\t\t\t\t\t\t\ttx: transactionFormatted,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst transactionHashFormatted = format(\n\t\t\t\t\t\t\t{ format: 'bytes32' },\n\t\t\t\t\t\t\ttransactionHash as Bytes,\n\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tsendTxHelper.emitSent(transactionFormatted);\n\t\t\t\t\t\tsendTxHelper.emitTransactionHash(\n\t\t\t\t\t\t\ttransactionHashFormatted as string & Uint8Array,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceipt = await waitForTransactionReceipt(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(\n\t\t\t\t\t\t\tformat(\n\t\t\t\t\t\t\t\ttransactionReceiptSchema,\n\t\t\t\t\t\t\t\ttransactionReceipt,\n\t\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitReceipt(transactionReceiptFormatted);\n\n\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\tawait sendTxHelper.handleResolve({\n\t\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\t\ttx: transactionFormatted as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitConfirmation({\n\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treject(\n\t\t\t\t\t\t\tawait sendTxHelper.handleError({\n\t\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\t\ttx: transactionFormatted as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t})() as unknown;\n\t\t\t});\n\t\t},\n\t);\n\n\treturn promiEvent;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sendSignedTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendSignedTransaction<\n\tReturnFormat extends DataFormat,\n\tResolveType = FormatType<TransactionReceipt, ReturnFormat>,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tsignedTransaction: Bytes,\n\treturnFormat: ReturnFormat,\n\toptions: SendSignedTransactionOptions<ResolveType> = { checkRevertBeforeSending: true },\n): Web3PromiEvent<ResolveType, SendSignedTransactionEvents<ReturnFormat>> {\n\t// TODO - Promise returned in function argument where a void return was expected\n\t// eslint-disable-next-line @typescript-eslint/no-misused-promises\n\tconst promiEvent = new Web3PromiEvent<ResolveType, SendSignedTransactionEvents<ReturnFormat>>(\n\t\t(resolve, reject) => {\n\t\t\tsetImmediate(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst sendTxHelper = new SendTxHelper<ReturnFormat, ResolveType>({\n\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\tpromiEvent,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t});\n\t\t\t\t\t// Formatting signedTransaction to be send to RPC endpoint\n\t\t\t\t\tconst signedTransactionFormattedHex = format(\n\t\t\t\t\t\t{ format: 'bytes' },\n\t\t\t\t\t\tsignedTransaction,\n\t\t\t\t\t\tETH_DATA_FORMAT,\n\t\t\t\t\t);\n\t\t\t\t\tconst unSerializedTransaction = TransactionFactory.fromSerializedData(\n\t\t\t\t\t\tbytesToUint8Array(hexToBytes(signedTransactionFormattedHex)),\n\t\t\t\t\t);\n\t\t\t\t\tconst unSerializedTransactionWithFrom = {\n\t\t\t\t\t\t...unSerializedTransaction.toJSON(),\n\t\t\t\t\t\t// Some providers will default `from` to address(0) causing the error\n\t\t\t\t\t\t// reported from `eth_call` to not be the reason the user's tx failed\n\t\t\t\t\t\t// e.g. `eth_call` will return an Out of Gas error for a failed\n\t\t\t\t\t\t// smart contract execution contract, because the sender, address(0),\n\t\t\t\t\t\t// has no balance to pay for the gas of the transaction execution\n\t\t\t\t\t\tfrom: unSerializedTransaction.getSenderAddress().toString(),\n\t\t\t\t\t};\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst { v, r, s, ...txWithoutSigParams } = unSerializedTransactionWithFrom;\n\n\t\t\t\t\t\tawait sendTxHelper.checkRevertBeforeSending(\n\t\t\t\t\t\t\ttxWithoutSigParams as TransactionCall,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitSending(signedTransactionFormattedHex);\n\n\t\t\t\t\t\tconst transactionHash = await trySendTransaction(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\tasync (): Promise<string> =>\n\t\t\t\t\t\t\t\tethRpcMethods.sendRawTransaction(\n\t\t\t\t\t\t\t\t\tweb3Context.requestManager,\n\t\t\t\t\t\t\t\t\tsignedTransactionFormattedHex,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitSent(signedTransactionFormattedHex);\n\n\t\t\t\t\t\tconst transactionHashFormatted = format(\n\t\t\t\t\t\t\t{ format: 'bytes32' },\n\t\t\t\t\t\t\ttransactionHash as Bytes,\n\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitTransactionHash(\n\t\t\t\t\t\t\ttransactionHashFormatted as string & Uint8Array,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceipt = await waitForTransactionReceipt(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(\n\t\t\t\t\t\t\tformat(\n\t\t\t\t\t\t\t\ttransactionReceiptSchema,\n\t\t\t\t\t\t\t\ttransactionReceipt,\n\t\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitReceipt(transactionReceiptFormatted);\n\n\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\tawait sendTxHelper.handleResolve({\n\t\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\t\ttx: unSerializedTransactionWithFrom as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitConfirmation({\n\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treject(\n\t\t\t\t\t\t\tawait sendTxHelper.handleError({\n\t\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\t\ttx: unSerializedTransactionWithFrom as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t})() as unknown;\n\t\t\t});\n\t\t},\n\t);\n\n\treturn promiEvent;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sign}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function sign<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tmessage: Bytes,\n\taddressOrIndex: Address | number,\n\treturnFormat: ReturnFormat = web3Context.defaultReturnFormat as ReturnFormat,\n) {\n\tconst messageFormatted = format({ format: 'bytes' }, message, DEFAULT_RETURN_FORMAT);\n\tif (web3Context.wallet?.get(addressOrIndex)) {\n\t\tconst wallet = web3Context.wallet.get(addressOrIndex) as Web3BaseWalletAccount;\n\t\tconst signed = wallet.sign(messageFormatted);\n\t\treturn format(SignatureObjectSchema, signed, returnFormat);\n\t}\n\n\tif (typeof addressOrIndex === 'number') {\n\t\tthrow new SignatureError(\n\t\t\tmessage,\n\t\t\t'RPC method \"eth_sign\" does not support index signatures',\n\t\t);\n\t}\n\n\tconst response = await ethRpcMethods.sign(\n\t\tweb3Context.requestManager,\n\t\taddressOrIndex,\n\t\tmessageFormatted,\n\t);\n\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.signTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function signTransaction<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: Transaction,\n\treturnFormat: ReturnFormat = web3Context.defaultReturnFormat as ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.signTransaction(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT, {\n\t\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t\t}),\n\t);\n\t// Some clients only return the encoded signed transaction (e.g. Ganache)\n\t// while clients such as Geth return the desired SignedTransactionInfoAPI object\n\treturn isString(response as HexStringBytes)\n\t\t? decodeSignedTransaction(response as HexStringBytes, returnFormat, {\n\t\t\t\tfillInputAndData: true,\n\t\t  })\n\t\t: {\n\t\t\t\traw: format(\n\t\t\t\t\t{ format: 'bytes' },\n\t\t\t\t\t(response as SignedTransactionInfoAPI).raw,\n\t\t\t\t\treturnFormat,\n\t\t\t\t),\n\t\t\t\ttx: formatTransaction((response as SignedTransactionInfoAPI).tx, returnFormat, {\n\t\t\t\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t\t\t\t\tfillInputAndData: true,\n\t\t\t\t}),\n\t\t  };\n}\n\n// TODO Decide what to do with transaction.to\n// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n/**\n * View additional documentations here: {@link Web3Eth.call}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function call<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: TransactionCall,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat = web3Context.defaultReturnFormat as ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.call(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT, {\n\t\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t\t}),\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n// TODO - Investigate whether response is padded as 1.x docs suggest\n/**\n * View additional documentations here: {@link Web3Eth.estimateGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function estimateGas<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: Transaction,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionFormatted = formatTransaction(transaction, ETH_DATA_FORMAT, {\n\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t});\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.estimateGas(\n\t\tweb3Context.requestManager,\n\t\ttransactionFormatted,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n// TODO - Add input formatting to filter\n/**\n * View additional documentations here: {@link Web3Eth.getPastLogs}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getLogs<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<Web3EthExecutionAPI>,\n\tfilter: Filter,\n\treturnFormat: ReturnFormat,\n) {\n\t// format type bigint or number toBlock and fromBlock to hexstring.\n\tlet { toBlock, fromBlock } = filter;\n\tif (!isNullish(toBlock)) {\n\t\tif (typeof toBlock === 'number' || typeof toBlock === 'bigint') {\n\t\t\ttoBlock = numberToHex(toBlock);\n\t\t}\n\t}\n\tif (!isNullish(fromBlock)) {\n\t\tif (typeof fromBlock === 'number' || typeof fromBlock === 'bigint') {\n\t\t\tfromBlock = numberToHex(fromBlock);\n\t\t}\n\t}\n\n\tconst formattedFilter = { ...filter, fromBlock, toBlock };\n\n\tconst response = await ethRpcMethods.getLogs(web3Context.requestManager, formattedFilter);\n\n\tconst result = response.map(res => {\n\t\tif (typeof res === 'string') {\n\t\t\treturn res;\n\t\t}\n\n\t\treturn format(\n\t\t\tlogSchema,\n\t\t\tres as unknown as Log,\n\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t);\n\t});\n\n\treturn result;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getChainId}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getChainId<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getChainId(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\t// Response is number in hex formatted string\n\t\tresponse as unknown as number,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getProof}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getProof<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<Web3EthExecutionAPI>,\n\taddress: Address,\n\tstorageKeys: Bytes[],\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst storageKeysFormatted = storageKeys.map(storageKey =>\n\t\tformat({ format: 'bytes' }, storageKey, ETH_DATA_FORMAT),\n\t);\n\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.getProof(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tstorageKeysFormatted,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format(\n\t\taccountSchema,\n\t\tresponse as unknown as AccountObject,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n// TODO Throwing an error with Geth, but not Infura\n// TODO gasUsedRatio and reward not formatting\n/**\n * View additional documentations here: {@link Web3Eth.getFeeHistory}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getFeeHistory<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblockCount: Numbers,\n\tnewestBlock: BlockNumberOrTag = web3Context.defaultBlock,\n\trewardPercentiles: Numbers[],\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockCountFormatted = format({ format: 'uint' }, blockCount, ETH_DATA_FORMAT);\n\n\tconst newestBlockFormatted = isBlockTag(newestBlock as string)\n\t\t? (newestBlock as BlockTag)\n\t\t: format({ format: 'uint' }, newestBlock as Numbers, ETH_DATA_FORMAT);\n\n\tconst rewardPercentilesFormatted = format(\n\t\t{\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\tformat: 'uint',\n\t\t\t},\n\t\t},\n\t\trewardPercentiles,\n\t\tNUMBER_DATA_FORMAT,\n\t);\n\n\tconst response = await ethRpcMethods.getFeeHistory(\n\t\tweb3Context.requestManager,\n\t\tblockCountFormatted,\n\t\tnewestBlockFormatted,\n\t\trewardPercentilesFormatted,\n\t);\n\n\treturn format(\n\t\tfeeHistorySchema,\n\t\tresponse as unknown as FeeHistory,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.createAccessList}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function createAccessList<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: TransactionForAccessList,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = (await ethRpcMethods.createAccessList(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT, {\n\t\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t\t}),\n\t\tblockNumberFormatted,\n\t)) as unknown as AccessListResult;\n\n\treturn format(\n\t\taccessListResultSchema,\n\t\tresponse,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.signTypedData}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function signTypedData<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\ttypedData: Eip712TypedData,\n\tuseLegacy: boolean,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.signTypedData(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\ttypedData,\n\t\tuseLegacy,\n\t);\n\n\treturn format({ format: 'bytes' }, response, returnFormat ?? web3Context.defaultReturnFormat);\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;EAeE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEF,uEAAuE;AACvE,qCAAA,EAAuC;;;AAkCvC,OAAO,EAAE,kBAAkB,EAAE,MAAM,mBAAmB,CAAC;;AAEvD,OAAO,EAAE,cAAc,EAAE,MAAM,aAAa,CAAC;AAC7C,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAEjD,OAAO,EAAE,uBAAuB,EAAE,MAAM,sCAAsC,CAAC;AAC/E,OAAO,EACN,aAAa,EACb,WAAW,EACX,gBAAgB,EAChB,SAAS,EACT,wBAAwB,EACxB,sBAAsB,EACtB,qBAAqB,GACrB,MAAM,cAAc,CAAC;AAQtB,2CAA2C;AAC3C,OAAO,EAAE,0BAA0B,EAAE,MAAM,gCAAgC,CAAC;AAC5E,OAAO,EAAE,iBAAiB,EAAE,MAAM,+BAA+B,CAAC;AAClE,2CAA2C;AAC3C,OAAO,EAAE,kBAAkB,EAAE,MAAM,iCAAiC,CAAC;AACrE,2CAA2C;AAC3C,OAAO,EAAE,yBAAyB,EAAE,MAAM,yCAAyC,CAAC;AACpF,OAAO,EAAE,kBAAkB,EAAE,MAAM,gBAAgB,CAAC;AACpD,2CAA2C;AAC3C,OAAO,EAAE,YAAY,EAAE,MAAM,2BAA2B,CAAC;;;;AAhEzD,OAAO,EACN,eAAe,EAGf,qBAAqB,GA0BrB,MAAM,YAAY,CAAC;AAIpB,OAAO,EAAE,UAAU,EAAE,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,gBAAgB,CAAC;;AAH1E,OAAO,EAAe,cAAc,EAAE,MAAM,WAAW,CAAC;;AACxD,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,iBAAiB,EAAE,WAAW,EAAE,MAAM,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCzE,MAAM,kBAAkB,GAAG,CAAO,WAAyC,EAAE,CAAE,CAAA,SAAA,KAAA,GAAA,KAAA,GAAA,KAAA,GAAA;QACrF,0VAAA,gBAAa,CAAC,kBAAkB,CAAC,WAAW,CAAC,cAAc,CAAC,CAAA;IAAA,EAAA,CAAC;AAOvD,MAAM,SAAS,GAAG,CAAO,WAAyC,EAAE,CAAE,CAAA,SAAA,KAAA,GAAA,KAAA,GAAA,KAAA,GAAA;QAC5E,0VAAA,gBAAa,CAAC,UAAU,CAAC,WAAW,CAAC,cAAc,CAAC,CAAA;IAAA,EAAA,CAAC;AAO/C,MAAM,WAAW,GAAG,CAAO,WAAyC,EAAE,CAAE,CAAA,SAAA,KAAA,GAAA,KAAA,GAAA,KAAA,GAAA;QAC9E,yVAAA,iBAAa,CAAC,WAAW,CAAC,WAAW,CAAC,cAAc,CAAC,CAAA;IAAA,EAAA,CAAC;AAMhD,MAAM,QAAQ,GAAG,CAAO,WAAyC,EAAE,CAAE,CAAA,SAAA,KAAA,GAAA,KAAA,GAAA,KAAA,GAAA;QAC3E,0VAAA,gBAAa,CAAC,SAAS,CAAC,WAAW,CAAC,cAAc,CAAC,CAAA;IAAA,EAAA,CAAC;AAM/C,SAAgB,WAAW,CAChC,WAAyC,EACzC,YAA0B;;QAE1B,MAAM,QAAQ,GAAG,yVAAM,gBAAa,CAAC,WAAW,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;QAE7E,OAAO,gOAAA,AAAM,EACZ;YAAE,MAAM,EAAE,MAAM;QAAA,CAAE,EAClB,QAAmB,EACnB,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAZ,YAAY,GAAI,WAAW,CAAC,mBAAmB,CAC/C,CAAC;IACH,CAAC;CAAA;AAMK,SAAgB,WAAW,CAChC,WAAyC,EACzC,YAA0B;;QAE1B,MAAM,QAAQ,GAAG,yVAAM,gBAAa,CAAC,WAAW,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;QAE7E,QAAO,+NAAA,AAAM,EACZ;YAAE,MAAM,EAAE,MAAM;QAAA,CAAE,EAClB,QAAmB,EACnB,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAZ,YAAY,GAAI,WAAW,CAAC,mBAAmB,CAC/C,CAAC;IACH,CAAC;CAAA;AAMK,SAAgB,uBAAuB,CAC5C,WAAyC,EACzC,YAA0B;;QAE1B,MAAM,QAAQ,GAAG,yVAAM,gBAAa,CAAC,uBAAuB,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;QAEzF,8NAAO,SAAA,AAAM,EACZ;YAAE,MAAM,EAAE,MAAM;QAAA,CAAE,EAClB,QAAmB,EACnB,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAZ,YAAY,GAAI,WAAW,CAAC,mBAAmB,CAC/C,CAAC;IACH,CAAC;CAAA;AAKK,SAAgB,cAAc,CACnC,WAAyC,EACzC,YAA0B;;QAE1B,MAAM,QAAQ,GAAG,yVAAM,gBAAa,CAAC,cAAc,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;QAEhF,6NAAO,UAAM,AAAN,EACN;YAAE,MAAM,EAAE,MAAM;QAAA,CAAE,EAClB,QAAmB,EACnB,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAZ,YAAY,GAAI,WAAW,CAAC,mBAAmB,CAC/C,CAAC;IACH,CAAC;CAAA;AAMK,SAAgB,UAAU,CAAA,aAAA,EAAA,SAAA;wDAC/B,WAAyC,EACzC,OAAgB,EAChB,cAAgC,WAAW,CAAC,YAAY,EACxD,YAA0B;QAE1B,MAAM,oBAAoB,GAAG,sPAAA,AAAU,EAAC,WAAqB,CAAC,GAC1D,WAAwB,0NACzB,SAAA,AAAM,EAAC;YAAE,MAAM,EAAE,MAAM;QAAA,CAAE,EAAE,WAAsB,8NAAE,kBAAe,CAAC,CAAC;QACvE,MAAM,QAAQ,GAAG,yVAAM,gBAAa,CAAC,UAAU,CAC9C,WAAW,CAAC,cAAc,EAC1B,OAAO,EACP,oBAAoB,CACpB,CAAC;QACF,8NAAO,SAAA,AAAM,EACZ;YAAE,MAAM,EAAE,MAAM;QAAA,CAAE,EAClB,QAAmB,EACnB,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAZ,YAAY,GAAI,WAAW,CAAC,mBAAmB,CAC/C,CAAC;IACH,CAAC;CAAA;AAMK,SAAgB,YAAY,CAAA,aAAA,EAAA,SAAA,EAAA,aAAA;wDACjC,WAAyC,EACzC,OAAgB,EAChB,WAAoB,EACpB,cAAgC,WAAW,CAAC,YAAY,EACxD,YAA0B;QAE1B,MAAM,oBAAoB,GAAG,gOAAA,AAAM,EAAC;YAAE,MAAM,EAAE,MAAM;QAAA,CAAE,EAAE,WAAW,8NAAE,kBAAe,CAAC,CAAC;QACtF,MAAM,oBAAoB,4OAAG,aAAA,AAAU,EAAC,WAAqB,CAAC,GAC1D,WAAwB,OACzB,4NAAA,AAAM,EAAC;YAAE,MAAM,EAAE,MAAM;QAAA,CAAE,EAAE,WAAsB,8NAAE,kBAAe,CAAC,CAAC;QACvE,MAAM,QAAQ,GAAG,yVAAM,gBAAa,CAAC,YAAY,CAChD,WAAW,CAAC,cAAc,EAC1B,OAAO,EACP,oBAAoB,EACpB,oBAAoB,CACpB,CAAC;QACF,8NAAO,SAAA,AAAM,EACZ;YAAE,MAAM,EAAE,OAAO;QAAA,CAAE,EACnB,QAAiB,EACjB,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAZ,YAAY,GAAI,WAAW,CAAC,mBAAmB,CAC/C,CAAC;IACH,CAAC;CAAA;AAMK,SAAgB,OAAO,CAAA,aAAA,EAAA,SAAA;wDAC5B,WAAyC,EACzC,OAAgB,EAChB,cAAgC,WAAW,CAAC,YAAY,EACxD,YAA0B;QAE1B,MAAM,oBAAoB,4OAAG,aAAA,AAAU,EAAC,WAAqB,CAAC,GAC1D,WAAwB,IACzB,+NAAA,AAAM,EAAC;YAAE,MAAM,EAAE,MAAM;QAAA,CAAE,EAAE,WAAsB,8NAAE,kBAAe,CAAC,CAAC;QACvE,MAAM,QAAQ,GAAG,yVAAM,gBAAa,CAAC,OAAO,CAC3C,WAAW,CAAC,cAAc,EAC1B,OAAO,EACP,oBAAoB,CACpB,CAAC;QACF,8NAAO,SAAA,AAAM,EACZ;YAAE,MAAM,EAAE,OAAO;QAAA,CAAE,EACnB,QAAiB,EACjB,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAZ,YAAY,GAAI,WAAW,CAAC,mBAAmB,CAC/C,CAAC;IACH,CAAC;CAAA;AAMK,SAAgB,QAAQ,CAAA,aAAA;wDAC7B,WAAyC,EACzC,QAAkC,WAAW,CAAC,YAAY,EAC1D,QAAQ,GAAG,KAAK,EAChB,YAA0B;;QAE1B,IAAI,QAAQ,CAAC;QACb,4OAAI,WAAA,AAAO,EAAC,KAAK,CAAC,EAAE,CAAC;YACpB,MAAM,kBAAkB,0NAAG,SAAA,AAAM,EAAC;gBAAE,MAAM,EAAE,SAAS;YAAA,CAAE,EAAE,KAAK,8NAAE,kBAAe,CAAC,CAAC;YACjF,QAAQ,GAAG,MAAM,mWAAa,CAAC,cAAc,CAC5C,WAAW,CAAC,cAAc,EAC1B,kBAA+B,EAC/B,QAAQ,CACR,CAAC;QACH,CAAC,MAAM,CAAC;YACP,MAAM,oBAAoB,4OAAG,aAAA,AAAU,EAAC,KAAe,CAAC,GACpD,KAAkB,0NACnB,SAAM,AAAN,EAAO;gBAAE,MAAM,EAAE,MAAM;YAAA,CAAE,EAAE,KAAgB,8NAAE,kBAAe,CAAC,CAAC;YACjE,QAAQ,GAAG,yVAAM,gBAAa,CAAC,gBAAgB,CAC9C,WAAW,CAAC,cAAc,EAC1B,oBAAoB,EACpB,QAAQ,CACR,CAAC;QACH,CAAC;QACD,MAAM,GAAG,IAAG,+NAAM,AAAN,6TACX,cAAW,EACX,QAA4B,EAC5B,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAZ,YAAY,GAAI,WAAW,CAAC,mBAAmB,CAC/C,CAAC;QAEF,IAAI,2OAAC,YAAA,AAAS,EAAC,GAAG,CAAC,EAAE,CAAC;YACrB,MAAM,MAAM,GAAA,OAAA,MAAA,CAAA,OAAA,MAAA,CAAA,CAAA,GACR,GAAG,GAAA;gBACN,YAAY,EAAE,CAAA,KAAA,GAAG,CAAC,YAAY,MAAA,QAAA,OAAA,KAAA,IAAA,KAAI,EAAE;YAAA,EACpC,CAAC;YACF,OAAO,MAAM,CAAC;QACf,CAAC;QAED,OAAO,GAAG,CAAC;IACZ,CAAC;CAAA;AAMK,SAAgB,wBAAwB,CAAA,aAAA;wDAC7C,WAAyC,EACzC,QAAkC,WAAW,CAAC,YAAY,EAC1D,YAA0B;QAE1B,IAAI,QAAQ,CAAC;QACb,6OAAI,UAAA,AAAO,EAAC,KAAK,CAAC,EAAE,CAAC;YACpB,MAAM,kBAAkB,GAAG,gOAAA,AAAM,EAAC;gBAAE,MAAM,EAAE,SAAS;YAAA,CAAE,EAAE,KAAK,8NAAE,kBAAe,CAAC,CAAC;YACjF,QAAQ,GAAG,yVAAM,gBAAa,CAAC,8BAA8B,CAC5D,WAAW,CAAC,cAAc,EAC1B,kBAA+B,CAC/B,CAAC;QACH,CAAC,MAAM,CAAC;YACP,MAAM,oBAAoB,4OAAG,aAAU,AAAV,EAAW,KAAe,CAAC,GACpD,KAAkB,0NACnB,SAAA,AAAM,EAAC;gBAAE,MAAM,EAAE,MAAM;YAAA,CAAE,EAAE,KAAgB,8NAAE,kBAAe,CAAC,CAAC;YACjE,QAAQ,GAAG,yVAAM,gBAAa,CAAC,gCAAgC,CAC9D,WAAW,CAAC,cAAc,EAC1B,oBAAoB,CACpB,CAAC;QACH,CAAC;QAED,8NAAO,SAAA,AAAM,EACZ;YAAE,MAAM,EAAE,MAAM;QAAA,CAAE,EAClB,QAAmB,EACnB,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAZ,YAAY,GAAI,WAAW,CAAC,mBAAmB,CAC/C,CAAC;IACH,CAAC;CAAA;AAMK,SAAgB,kBAAkB,CAAA,aAAA;wDACvC,WAAyC,EACzC,QAAkC,WAAW,CAAC,YAAY,EAC1D,YAA0B;QAE1B,IAAI,QAAQ,CAAC;QACb,6OAAI,UAAA,AAAO,EAAC,KAAK,CAAC,EAAE,CAAC;YACpB,MAAM,kBAAkB,GAAG,gOAAM,AAAN,EAAO;gBAAE,MAAM,EAAE,SAAS;YAAA,CAAE,EAAE,KAAK,8NAAE,kBAAe,CAAC,CAAC;YACjF,QAAQ,GAAG,yVAAM,gBAAa,CAAC,wBAAwB,CACtD,WAAW,CAAC,cAAc,EAC1B,kBAA+B,CAC/B,CAAC;QACH,CAAC,MAAM,CAAC;YACP,MAAM,oBAAoB,OAAG,kPAAA,AAAU,EAAC,KAAe,CAAC,GACpD,KAAkB,0NACnB,SAAA,AAAM,EAAC;gBAAE,MAAM,EAAE,MAAM;YAAA,CAAE,EAAE,KAAgB,8NAAE,kBAAe,CAAC,CAAC;YACjE,QAAQ,GAAG,yVAAM,gBAAa,CAAC,0BAA0B,CACxD,WAAW,CAAC,cAAc,EAC1B,oBAAoB,CACpB,CAAC;QACH,CAAC;QAED,8NAAO,SAAA,AAAM,EACZ;YAAE,MAAM,EAAE,MAAM;QAAA,CAAE,EAClB,QAAmB,EACnB,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAZ,YAAY,GAAI,WAAW,CAAC,mBAAmB,CAC/C,CAAC;IACH,CAAC;CAAA;AAMK,SAAgB,QAAQ,CAAA,aAAA;wDAC7B,WAAyC,EACzC,QAAkC,WAAW,CAAC,YAAY,EAC1D,UAAmB,EACnB,YAA0B;QAE1B,MAAM,mBAAmB,0NAAG,SAAA,AAAM,EAAC;YAAE,MAAM,EAAE,MAAM;QAAA,CAAE,EAAE,UAAU,8NAAE,kBAAe,CAAC,CAAC;QAEpF,IAAI,QAAQ,CAAC;QACb,6OAAI,UAAA,AAAO,EAAC,KAAK,CAAC,EAAE,CAAC;YACpB,MAAM,kBAAkB,0NAAG,SAAA,AAAM,EAAC;gBAAE,MAAM,EAAE,SAAS;YAAA,CAAE,EAAE,KAAK,8NAAE,kBAAe,CAAC,CAAC;YACjF,QAAQ,GAAG,MAAM,mWAAa,CAAC,2BAA2B,CACzD,WAAW,CAAC,cAAc,EAC1B,kBAA+B,EAC/B,mBAAmB,CACnB,CAAC;QACH,CAAC,MAAM,CAAC;YACP,MAAM,oBAAoB,4OAAG,aAAU,AAAV,EAAW,KAAe,CAAC,GACpD,KAAkB,OACnB,4NAAA,AAAM,EAAC;gBAAE,MAAM,EAAE,MAAM;YAAA,CAAE,EAAE,KAAgB,8NAAE,kBAAe,CAAC,CAAC;YACjE,QAAQ,GAAG,wVAAM,iBAAa,CAAC,6BAA6B,CAC3D,WAAW,CAAC,cAAc,EAC1B,oBAAoB,EACpB,mBAAmB,CACnB,CAAC;QACH,CAAC;QAED,8NAAO,SAAA,AAAM,6TACZ,cAAW,EACX,QAA4B,EAC5B,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAZ,YAAY,GAAI,WAAW,CAAC,mBAAmB,CAC/C,CAAC;IACH,CAAC;CAAA;AAMK,SAAgB,cAAc,CAAA,aAAA,EAAA,iBAAA;wDACnC,WAAyC,EACzC,eAAsB,EACtB,eAA6B,WAAW,CAAC,mBAAmC;QAE5E,MAAM,wBAAwB,0NAAG,SAAA,AAAM,EACtC;YAAE,MAAM,EAAE,SAAS;QAAA,CAAE,EACrB,eAAe,8NACf,wBAAqB,CACrB,CAAC;QACF,MAAM,QAAQ,GAAG,yVAAM,gBAAa,CAAC,oBAAoB,CACxD,WAAW,CAAC,cAAc,EAC1B,wBAAwB,CACxB,CAAC;QAEF,iPAAO,YAAA,AAAS,EAAC,QAAQ,CAAC,GACvB,QAAQ,sVACR,oBAAA,AAAiB,EAAC,QAAQ,EAAE,YAAY,EAAE;YAC1C,iBAAiB,EAAE,WAAW,CAAC,MAAM,CAAC,uBAAuB;YAC7D,gBAAgB,EAAE,IAAI;SACrB,CAAC,CAAC;IACP,CAAC;CAAA;AAMK,SAAgB,sBAAsB,CAC3C,WAAyC,EACzC,YAA0B;;QAE1B,MAAM,QAAQ,GAAG,yVAAM,gBAAa,CAAC,sBAAsB,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;QAExF,OAAO,QAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,EACjC,sWAAA,AAAiB,EAChB,WAAqC,EACrC,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAZ,YAAY,GAAI,WAAW,CAAC,mBAAmB,EAC/C;gBACC,iBAAiB,EAAE,WAAW,CAAC,MAAM,CAAC,uBAAuB;gBAC7D,gBAAgB,EAAE,IAAI;aACtB,CACD,CACD,CAAC;IACH,CAAC;CAAA;AAMK,SAAgB,uBAAuB,CAAA,aAAA;wDAC5C,WAAyC,EACzC,QAAkC,WAAW,CAAC,YAAY,EAC1D,gBAAyB,EACzB,YAA0B;QAE1B,MAAM,yBAAyB,OAAG,4NAAA,AAAM,EAAC;YAAE,MAAM,EAAE,MAAM;QAAA,CAAE,EAAE,gBAAgB,8NAAE,kBAAe,CAAC,CAAC;QAEhG,IAAI,QAAQ,CAAC;QACb,6OAAI,UAAA,AAAO,EAAC,KAAK,CAAC,EAAE,CAAC;YACpB,MAAM,kBAAkB,IAAG,+NAAA,AAAM,EAAC;gBAAE,MAAM,EAAE,SAAS;YAAA,CAAE,EAAE,KAAK,8NAAE,kBAAe,CAAC,CAAC;YACjF,QAAQ,GAAG,yVAAM,gBAAa,CAAC,iCAAiC,CAC/D,WAAW,CAAC,cAAc,EAC1B,kBAA+B,EAC/B,yBAAyB,CACzB,CAAC;QACH,CAAC,MAAM,CAAC;YACP,MAAM,oBAAoB,4OAAG,aAAA,AAAU,EAAC,KAAe,CAAC,GACpD,KAAkB,0NACnB,SAAA,AAAM,EAAC;gBAAE,MAAM,EAAE,MAAM;YAAA,CAAE,EAAE,KAAgB,8NAAE,kBAAe,CAAC,CAAC;YACjE,QAAQ,GAAG,yVAAM,gBAAa,CAAC,mCAAmC,CACjE,WAAW,CAAC,cAAc,EAC1B,oBAAoB,EACpB,yBAAyB,CACzB,CAAC;QACH,CAAC;QAED,iPAAO,YAAS,AAAT,EAAU,QAAQ,CAAC,GACvB,QAAQ,sVACR,oBAAA,AAAiB,EAAC,QAAQ,EAAE,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAZ,YAAY,GAAI,WAAW,CAAC,mBAAmB,EAAE;YAC7E,iBAAiB,EAAE,WAAW,CAAC,MAAM,CAAC,uBAAuB;YAC7D,gBAAgB,EAAE,IAAI;SACrB,CAAC,CAAC;IACP,CAAC;CAAA;AAMK,SAAgB,qBAAqB,CAC1C,WAAyC,EACzC,eAAsB,EACtB,YAA0B;;QAE1B,MAAM,wBAAwB,0NAAG,SAAA,AAAM,EACtC;YAAE,MAAM,EAAE,SAAS;QAAA,CAAE,EACrB,eAAe,8NACf,wBAAqB,CACrB,CAAC;QACF,IAAI,QAAQ,CAAC;QACb,IAAI,CAAC;YACJ,QAAQ,GAAG,yVAAM,gBAAa,CAAC,qBAAqB,CACnD,WAAW,CAAC,cAAc,EAC1B,wBAAwB,CACxB,CAAC;QACH,CAAC,CAAC,OAAO,KAAK,EAAE,CAAC;YAChB,mEAAmE;YACnE,IACC,OAAO,KAAK,KAAK,QAAQ,IACzB,2OAAC,YAAA,AAAS,EAAC,KAAK,CAAC,IACjB,SAAS,IAAI,KAAK,IACjB,KAA6B,CAAC,OAAO,KAAK,qCAAqC,EAC/E,CAAC;gBACF,OAAO,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;YACtD,CAAC,MAAM,CAAC;gBACP,MAAM,KAAK,CAAC;YACb,CAAC;QACF,CAAC;QACD,iPAAO,YAAA,AAAS,EAAC,QAAQ,CAAC,GACvB,QAAQ,0NACR,SAAA,AAAM,6TACN,2BAAwB,EACxB,QAAyC,EACzC,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAZ,YAAY,GAAI,WAAW,CAAC,mBAAmB,CAC9C,CAAC;IACN,CAAC;CAAA;AAMK,SAAgB,mBAAmB,CAAA,aAAA,EAAA,SAAA;wDACxC,WAAyC,EACzC,OAAgB,EAChB,cAAgC,WAAW,CAAC,YAAY,EACxD,YAA0B;QAE1B,MAAM,oBAAoB,4OAAG,aAAA,AAAU,EAAC,WAAqB,CAAC,GAC1D,WAAwB,GACzB,gOAAA,AAAM,EAAC;YAAE,MAAM,EAAE,MAAM;QAAA,CAAE,EAAE,WAAsB,8NAAE,kBAAe,CAAC,CAAC;QACvE,MAAM,QAAQ,GAAG,yVAAM,gBAAa,CAAC,mBAAmB,CACvD,WAAW,CAAC,cAAc,EAC1B,OAAO,EACP,oBAAoB,CACpB,CAAC;QAEF,8NAAO,SAAA,AAAM,EACZ;YAAE,MAAM,EAAE,MAAM;QAAA,CAAE,EAClB,QAAmB,EACnB,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAZ,YAAY,GAAI,WAAW,CAAC,mBAAmB,CAC/C,CAAC;IACH,CAAC;CAAA;AAMK,SAAU,eAAe,CAI9B,WAAyC,EACzC,cAI2C,EAC3C,YAA0B,EAC1B,UAA+C;IAAE,wBAAwB,EAAE,IAAI;AAAA,CAAE,EACjF,qBAA6C;IAE7C,MAAM,UAAU,GAAG,2RAAI,iBAAc,CACpC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACnB,YAAY,CAAC,GAAG,EAAE;YACjB,CAAC,GAAS,CAAE,CAAA,SAAA,IAAA,EAAA,KAAA,GAAA,KAAA,GAAA;oBACX,MAAM,YAAY,GAAG,+UAAI,eAAY,CAA4B;wBAChE,WAAW;wBACX,UAAU;wBACV,OAAO;wBACP,YAAY;qBACZ,CAAC,CAAC;oBAEH,IAAI,WAAW,GAAA,OAAA,MAAA,CAAA,CAAA,GAAQ,cAAc,CAAE,CAAC;oBAExC,IAAI,EAAC,qPAAA,AAAS,EAAC,qBAAqB,CAAC,EAAE,CAAC;wBACvC,WAAW,GAAG,MAAM,qBAAqB,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;oBAC3E,CAAC;oBAED,IAAI,oBAAoB,sVAMpB,oBAAA,AAAiB,EAAA,OAAA,MAAA,CAAA,OAAA,MAAA,CAAA,CAAA,GAEhB,WAAW,GAAA;wBACd,IAAI,sVAAE,6BAAA,AAA0B,EAAC,MAAM,EAAE,WAAW,EAAE,WAAW,CAAC;wBAClE,EAAE,sVAAE,6BAAA,AAA0B,EAAC,IAAI,EAAE,WAAW,EAAE,WAAW,CAAC;oBAAA,IAE/D,8OAAe,EACf;wBACC,iBAAiB,EAAE,WAAW,CAAC,MAAM,CAAC,uBAAuB;qBAC7D,CACwC,CAAC;oBAE3C,IAAI,CAAC;wBACJ,oBAAoB,GAAG,AAAC,MAAM,YAAY,CAAC,gBAAgB,CAAC;4BAC3D,WAAW;4BACX,oBAAoB;yBACpB,CAAC,CAA0C,CAAC;wBAE7C,MAAM,YAAY,CAAC,wBAAwB,CAC1C,oBAAuC,CACvC,CAAC;wBAEF,YAAY,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC;wBAE/C,IAAI,MAAyC,CAAC;wBAE9C,IAAI,WAAW,CAAC,MAAM,IAAI,2OAAC,YAAA,AAAS,EAAC,oBAAoB,CAAC,IAAI,CAAC,EAAE,CAAC;4BACjE,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC,GAAG,CAC7B,oBAAoC,CAAC,IAAc,CACpD,CAAC;wBACH,CAAC;wBAED,MAAM,eAAe,GAAc,MAAM,YAAY,CAAC,WAAW,CAAC;4BACjE,MAAM;4BACN,EAAE,EAAE,oBAAoB;yBACxB,CAAC,CAAC;wBAEH,MAAM,wBAAwB,yNAAG,UAAA,AAAM,EACtC;4BAAE,MAAM,EAAE,SAAS;wBAAA,CAAE,EACrB,eAAwB,EACxB,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAZ,YAAY,GAAI,WAAW,CAAC,mBAAmB,CAC/C,CAAC;wBACF,YAAY,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC;wBAC5C,YAAY,CAAC,mBAAmB,CAC/B,wBAA+C,CAC/C,CAAC;wBAEF,MAAM,kBAAkB,GAAG,MAAM,yXAAA,AAAyB,EACzD,WAAW,EACX,eAAe,EACf,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAZ,YAAY,GAAI,WAAW,CAAC,mBAAmB,CAC/C,CAAC;wBAEF,MAAM,2BAA2B,GAAG,YAAY,CAAC,oBAAoB,wNACpE,SAAA,AAAM,6TACL,2BAAwB,EACxB,kBAAkB,EAClB,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAZ,YAAY,GAAI,WAAW,CAAC,mBAAmB,CAC/C,CACD,CAAC;wBAEF,YAAY,CAAC,WAAW,CAAC,2BAA2B,CAAC,CAAC;wBAEtD,OAAO,CACN,OAAM,YAAY,CAAC,aAAa,CAAC;4BAChC,OAAO,EAAE,2BAA2B;4BACpC,EAAE,EAAE,oBAAuC;0BAC3C,CAAC,CACF,CAAC;wBAEF,YAAY,CAAC,gBAAgB,CAAC;4BAC7B,OAAO,EAAE,2BAA2B;4BACpC,eAAe;yBACf,CAAC,CAAC;oBACJ,CAAC,CAAC,OAAO,KAAK,EAAE,CAAC;wBAChB,MAAM,EACL,MAAM,YAAY,CAAC,WAAW,CAAC;4BAC9B,KAAK;4BACL,EAAE,EAAE,oBAAuC;0BAC3C,CAAC,CACF,CAAC;oBACH,CAAC;gBACF,CAAC,CAAA,CAAC,EAAa,CAAC;QACjB,CAAC,CAAC,CAAC;IACJ,CAAC,CACD,CAAC;IAEF,OAAO,UAAU,CAAC;AACnB,CAAC;AAMK,SAAU,qBAAqB,CAIpC,WAAyC,EACzC,iBAAwB,EACxB,YAA0B,EAC1B,UAAqD;IAAE,wBAAwB,EAAE,IAAI;AAAA,CAAE;IAEvF,gFAAgF;IAChF,kEAAkE;IAClE,MAAM,UAAU,GAAG,2RAAI,iBAAc,CACpC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACnB,YAAY,CAAC,GAAG,EAAE;YACjB,CAAC,GAAS,CAAE,CAAA,SAAA,IAAA,EAAA,KAAA,GAAA,KAAA,GAAA;oBACX,MAAM,YAAY,GAAG,+UAAI,eAAY,CAA4B;wBAChE,WAAW;wBACX,UAAU;wBACV,OAAO;wBACP,YAAY;qBACZ,CAAC,CAAC;oBACH,0DAA0D;oBAC1D,MAAM,6BAA6B,0NAAG,SAAM,AAAN,EACrC;wBAAE,MAAM,EAAE,OAAO;oBAAA,CAAE,EACnB,iBAAiB,8NACjB,kBAAe,CACf,CAAC;oBACF,MAAM,uBAAuB,yPAAG,qBAAkB,CAAC,kBAAkB,yNACpE,oBAAA,AAAiB,yNAAC,cAAA,AAAU,EAAC,6BAA6B,CAAC,CAAC,CAC5D,CAAC;oBACF,MAAM,+BAA+B,GAAA,OAAA,MAAA,CAAA,OAAA,MAAA,CAAA,CAAA,GACjC,uBAAuB,CAAC,MAAM,EAAE,GAAA;wBACnC,qEAAqE;wBACrE,qEAAqE;wBACrE,+DAA+D;wBAC/D,qEAAqE;wBACrE,iEAAiE;wBACjE,IAAI,EAAE,uBAAuB,CAAC,gBAAgB,EAAE,CAAC,QAAQ,EAAE;oBAAA,EAC3D,CAAC;oBAEF,IAAI,CAAC;wBACJ,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAA,GAA4B,+BAA+B,EAAtD,kBAAkB,GAAA,OAAK,+BAA+B,EAApE;4BAAA;4BAAA;4BAAA;yBAAkC,CAAkC,CAAC;wBAE3E,MAAM,YAAY,CAAC,wBAAwB,CAC1C,kBAAqC,CACrC,CAAC;wBAEF,YAAY,CAAC,WAAW,CAAC,6BAA6B,CAAC,CAAC;wBAExD,MAAM,eAAe,GAAG,2VAAM,qBAAA,AAAkB,EAC/C,WAAW,EACX,GAA0B,CAAE,CAAA,SAAA,IAAA,EAAA,KAAA,GAAA,KAAA,GAAA;gCAC3B,0VAAA,gBAAa,CAAC,kBAAkB,CAC/B,WAAW,CAAC,cAAc,EAC1B,6BAA6B,CAC7B,CAAA;8BAAA,CACF,CAAC;wBAEF,YAAY,CAAC,QAAQ,CAAC,6BAA6B,CAAC,CAAC;wBAErD,MAAM,wBAAwB,0NAAG,SAAA,AAAM,EACtC;4BAAE,MAAM,EAAE,SAAS;wBAAA,CAAE,EACrB,eAAwB,EACxB,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAZ,YAAY,GAAI,WAAW,CAAC,mBAAmB,CAC/C,CAAC;wBAEF,YAAY,CAAC,mBAAmB,CAC/B,wBAA+C,CAC/C,CAAC;wBAEF,MAAM,kBAAkB,GAAG,mWAAM,4BAAA,AAAyB,EACzD,WAAW,EACX,eAAe,EACf,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAZ,YAAY,GAAI,WAAW,CAAC,mBAAmB,CAC/C,CAAC;wBAEF,MAAM,2BAA2B,GAAG,YAAY,CAAC,oBAAoB,CACpE,gOAAA,AAAM,6TACL,2BAAwB,EACxB,kBAAkB,EAClB,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAZ,YAAY,GAAI,WAAW,CAAC,mBAAmB,CAC/C,CACD,CAAC;wBAEF,YAAY,CAAC,WAAW,CAAC,2BAA2B,CAAC,CAAC;wBAEtD,OAAO,EACN,MAAM,YAAY,CAAC,aAAa,CAAC;4BAChC,OAAO,EAAE,2BAA2B;4BACpC,EAAE,EAAE,+BAAkD;0BACtD,CAAC,CACF,CAAC;wBAEF,YAAY,CAAC,gBAAgB,CAAC;4BAC7B,OAAO,EAAE,2BAA2B;4BACpC,eAAe;yBACf,CAAC,CAAC;oBACJ,CAAC,CAAC,OAAO,KAAK,EAAE,CAAC;wBAChB,MAAM,EACL,MAAM,YAAY,CAAC,WAAW,CAAC;4BAC9B,KAAK;4BACL,EAAE,EAAE,+BAAkD;0BACtD,CAAC,CACF,CAAC;oBACH,CAAC;gBACF,CAAC,CAAA,CAAC,EAAa,CAAC;QACjB,CAAC,CAAC,CAAC;IACJ,CAAC,CACD,CAAC;IAEF,OAAO,UAAU,CAAC;AACnB,CAAC;AAMK,SAAgB,IAAI,CAAA,aAAA,EAAA,SAAA,EAAA,gBAAA;wDACzB,WAAyC,EACzC,OAAc,EACd,cAAgC,EAChC,eAA6B,WAAW,CAAC,mBAAmC;;QAE5E,MAAM,gBAAgB,0NAAG,SAAA,AAAM,EAAC;YAAE,MAAM,EAAE,OAAO;QAAA,CAAE,EAAE,OAAO,8NAAE,wBAAqB,CAAC,CAAC;QACrF,IAAI,CAAA,KAAA,WAAW,CAAC,MAAM,MAAA,QAAA,OAAA,KAAA,IAAA,KAAA,IAAA,GAAE,GAAG,CAAC,cAAc,CAAC,EAAE,CAAC;YAC7C,MAAM,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,cAAc,CAA0B,CAAC;YAC/E,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YAC7C,8NAAO,SAAA,AAAM,6TAAC,wBAAqB,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;QAC5D,CAAC;QAED,IAAI,OAAO,cAAc,KAAK,QAAQ,EAAE,CAAC;YACxC,MAAM,0OAAI,iBAAc,CACvB,OAAO,EACP,yDAAyD,CACzD,CAAC;QACH,CAAC;QAED,MAAM,QAAQ,GAAG,yVAAM,gBAAa,CAAC,IAAI,CACxC,WAAW,CAAC,cAAc,EAC1B,cAAc,EACd,gBAAgB,CAChB,CAAC;QAEF,OAAO,gOAAA,AAAM,EAAC;YAAE,MAAM,EAAE,OAAO;QAAA,CAAE,EAAE,QAAiB,EAAE,YAAY,CAAC,CAAC;IACrE,CAAC;CAAA;AAMK,SAAgB,eAAe,CAAA,aAAA,EAAA,aAAA;wDACpC,WAAyC,EACzC,WAAwB,EACxB,eAA6B,WAAW,CAAC,mBAAmC;QAE5E,MAAM,QAAQ,GAAG,yVAAM,gBAAa,CAAC,eAAe,CACnD,WAAW,CAAC,cAAc,EAC1B,uWAAA,AAAiB,EAAC,WAAW,8NAAE,kBAAe,EAAE;YAC/C,iBAAiB,EAAE,WAAW,CAAC,MAAM,CAAC,uBAAuB;SAC7D,CAAC,CACF,CAAC;QACF,yEAAyE;QACzE,gFAAgF;QAChF,WAAO,iPAAA,AAAQ,EAAC,QAA0B,CAAC,6VACxC,0BAAA,AAAuB,EAAC,QAA0B,EAAE,YAAY,EAAE;YAClE,gBAAgB,EAAE,IAAI;SACrB,CAAC,GACF;YACA,GAAG,MAAE,4NAAA,AAAM,EACV;gBAAE,MAAM,EAAE,OAAO;YAAA,CAAE,EAClB,QAAqC,CAAC,GAAG,EAC1C,YAAY,CACZ;YACD,EAAE,qVAAE,oBAAA,AAAiB,EAAE,QAAqC,CAAC,EAAE,EAAE,YAAY,EAAE;gBAC9E,iBAAiB,EAAE,WAAW,CAAC,MAAM,CAAC,uBAAuB;gBAC7D,gBAAgB,EAAE,IAAI;aACtB,CAAC;SACD,CAAC;IACN,CAAC;CAAA;AAQK,SAAgB,IAAI,CAAA,aAAA,EAAA,aAAA;wDACzB,WAAyC,EACzC,WAA4B,EAC5B,cAAgC,WAAW,CAAC,YAAY,EACxD,eAA6B,WAAW,CAAC,mBAAmC;QAE5E,MAAM,oBAAoB,OAAG,kPAAA,AAAU,EAAC,WAAqB,CAAC,GAC1D,WAAwB,0NACzB,SAAA,AAAM,EAAC;YAAE,MAAM,EAAE,MAAM;QAAA,CAAE,EAAE,WAAsB,EAAE,8OAAe,CAAC,CAAC;QAEvE,MAAM,QAAQ,GAAG,yVAAM,gBAAa,CAAC,IAAI,CACxC,WAAW,CAAC,cAAc,qVAC1B,oBAAA,AAAiB,EAAC,WAAW,6NAAE,mBAAe,EAAE;YAC/C,iBAAiB,EAAE,WAAW,CAAC,MAAM,CAAC,uBAAuB;SAC7D,CAAC,EACF,oBAAoB,CACpB,CAAC;QAEF,8NAAO,SAAA,AAAM,EAAC;YAAE,MAAM,EAAE,OAAO;QAAA,CAAE,EAAE,QAAiB,EAAE,YAAY,CAAC,CAAC;IACrE,CAAC;CAAA;AAOK,SAAgB,WAAW,CAAA,aAAA,EAAA,aAAA;wDAChC,WAAyC,EACzC,WAAwB,EACxB,cAAgC,WAAW,CAAC,YAAY,EACxD,YAA0B;QAE1B,MAAM,oBAAoB,sVAAG,oBAAA,AAAiB,EAAC,WAAW,EAAE,8OAAe,EAAE;YAC5E,iBAAiB,EAAE,WAAW,CAAC,MAAM,CAAC,uBAAuB;SAC7D,CAAC,CAAC;QACH,MAAM,oBAAoB,4OAAG,aAAA,AAAU,EAAC,WAAqB,CAAC,GAC1D,WAAwB,GACzB,gOAAA,AAAM,EAAC;YAAE,MAAM,EAAE,MAAM;QAAA,CAAE,EAAE,WAAsB,8NAAE,kBAAe,CAAC,CAAC;QAEvE,MAAM,QAAQ,GAAG,yVAAM,gBAAa,CAAC,WAAW,CAC/C,WAAW,CAAC,cAAc,EAC1B,oBAAoB,EACpB,oBAAoB,CACpB,CAAC;QAEF,8NAAO,SAAA,AAAM,EACZ;YAAE,MAAM,EAAE,MAAM;QAAA,CAAE,EAClB,QAAmB,EACnB,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAZ,YAAY,GAAI,WAAW,CAAC,mBAAmB,CAC/C,CAAC;IACH,CAAC;CAAA;AAOK,SAAgB,OAAO,CAC5B,WAA6C,EAC7C,MAAc,EACd,YAA0B;;QAE1B,mEAAmE;QACnE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,MAAM,CAAC;QACpC,IAAI,2OAAC,YAAS,AAAT,EAAU,OAAO,CAAC,EAAE,CAAC;YACzB,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,OAAO,KAAK,QAAQ,EAAE,CAAC;gBAChE,OAAO,2NAAG,cAAA,AAAW,EAAC,OAAO,CAAC,CAAC;YAChC,CAAC;QACF,CAAC;QACD,IAAI,2OAAC,YAAA,AAAS,EAAC,SAAS,CAAC,EAAE,CAAC;YAC3B,IAAI,OAAO,SAAS,KAAK,QAAQ,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE,CAAC;gBACpE,SAAS,2NAAG,cAAW,AAAX,EAAY,SAAS,CAAC,CAAC;YACpC,CAAC;QACF,CAAC;QAED,MAAM,eAAe,GAAA,OAAA,MAAA,CAAA,OAAA,MAAA,CAAA,CAAA,GAAQ,MAAM,GAAA;YAAE,SAAS;YAAE,OAAO;QAAA,EAAE,CAAC;QAE1D,MAAM,QAAQ,GAAG,yVAAM,gBAAa,CAAC,OAAO,CAAC,WAAW,CAAC,cAAc,EAAE,eAAe,CAAC,CAAC;QAE1F,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YACjC,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,CAAC;gBAC7B,OAAO,GAAG,CAAC;YACZ,CAAC;YAED,8NAAO,SAAA,AAAM,EACZ,uUAAS,EACT,GAAqB,EACrB,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAZ,YAAY,GAAI,WAAW,CAAC,mBAAmB,CAC/C,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;IACf,CAAC;CAAA;AAMK,SAAgB,UAAU,CAC/B,WAAyC,EACzC,YAA0B;;QAE1B,MAAM,QAAQ,GAAG,yVAAM,gBAAa,CAAC,UAAU,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC;QAE5E,6NAAO,UAAA,AAAM,EACZ;YAAE,MAAM,EAAE,MAAM;QAAA,CAAE,EAClB,6CAA6C;QAC7C,QAA6B,EAC7B,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAZ,YAAY,GAAI,WAAW,CAAC,mBAAmB,CAC/C,CAAC;IACH,CAAC;CAAA;AAMK,SAAgB,QAAQ,CAAA,aAAA,EAAA,SAAA,EAAA,aAAA;wDAC7B,WAA6C,EAC7C,OAAgB,EAChB,WAAoB,EACpB,cAAgC,WAAW,CAAC,YAAY,EACxD,YAA0B;QAE1B,MAAM,oBAAoB,GAAG,WAAW,CAAC,GAAG,EAAC,UAAU,CAAC,EAAE,uNACzD,SAAA,AAAM,EAAC;gBAAE,MAAM,EAAE,OAAO;YAAA,CAAE,EAAE,UAAU,8NAAE,kBAAe,CAAC,CACxD,CAAC;QAEF,MAAM,oBAAoB,4OAAG,aAAA,AAAU,EAAC,WAAqB,CAAC,GAC1D,WAAwB,OACzB,4NAAA,AAAM,EAAC;YAAE,MAAM,EAAE,MAAM;QAAA,CAAE,EAAE,WAAsB,8NAAE,kBAAe,CAAC,CAAC;QAEvE,MAAM,QAAQ,GAAG,MAAM,mWAAa,CAAC,QAAQ,CAC5C,WAAW,CAAC,cAAc,EAC1B,OAAO,EACP,oBAAoB,EACpB,oBAAoB,CACpB,CAAC;QAEF,8NAAO,SAAA,AAAM,EACZ,2UAAa,EACb,QAAoC,EACpC,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAZ,YAAY,GAAI,WAAW,CAAC,mBAAmB,CAC/C,CAAC;IACH,CAAC;CAAA;AAQK,SAAgB,aAAa,CAAA,aAAA,EAAA,YAAA;wDAClC,WAAyC,EACzC,UAAmB,EACnB,cAAgC,WAAW,CAAC,YAAY,EACxD,iBAA4B,EAC5B,YAA0B;QAE1B,MAAM,mBAAmB,yNAAG,UAAA,AAAM,EAAC;YAAE,MAAM,EAAE,MAAM;QAAA,CAAE,EAAE,UAAU,8NAAE,kBAAe,CAAC,CAAC;QAEpF,MAAM,oBAAoB,4OAAG,aAAA,AAAU,EAAC,WAAqB,CAAC,GAC1D,WAAwB,0NACzB,SAAA,AAAM,EAAC;YAAE,MAAM,EAAE,MAAM;QAAA,CAAE,EAAE,WAAsB,8NAAE,kBAAe,CAAC,CAAC;QAEvE,MAAM,0BAA0B,0NAAG,SAAA,AAAM,EACxC;YACC,IAAI,EAAE,OAAO;YACb,KAAK,EAAE;gBACN,MAAM,EAAE,MAAM;aACd;SACD,EACD,iBAAiB,EACjB,kVAAkB,CAClB,CAAC;QAEF,MAAM,QAAQ,GAAG,yVAAM,gBAAa,CAAC,aAAa,CACjD,WAAW,CAAC,cAAc,EAC1B,mBAAmB,EACnB,oBAAoB,EACpB,0BAA0B,CAC1B,CAAC;QAEF,WAAO,4NAAA,AAAM,6TACZ,mBAAgB,EAChB,QAAiC,EACjC,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAZ,YAAY,GAAI,WAAW,CAAC,mBAAmB,CAC/C,CAAC;IACH,CAAC;CAAA;AAMK,SAAgB,gBAAgB,CAAA,aAAA,EAAA,aAAA;wDACrC,WAAyC,EACzC,WAAqC,EACrC,cAAgC,WAAW,CAAC,YAAY,EACxD,YAA0B;QAE1B,MAAM,oBAAoB,4OAAG,aAAA,AAAU,EAAC,WAAqB,CAAC,GAC1D,WAAwB,GACzB,gOAAM,AAAN,EAAO;YAAE,MAAM,EAAE,MAAM;QAAA,CAAE,EAAE,WAAsB,8NAAE,kBAAe,CAAC,CAAC;QAEvE,MAAM,QAAQ,GAAG,AAAC,MAAM,mWAAa,CAAC,gBAAgB,CACrD,WAAW,CAAC,cAAc,qVAC1B,oBAAA,AAAiB,EAAC,WAAW,8NAAE,kBAAe,EAAE;YAC/C,iBAAiB,EAAE,WAAW,CAAC,MAAM,CAAC,uBAAuB;SAC7D,CAAC,EACF,oBAAoB,CACpB,CAAgC,CAAC;QAElC,8NAAO,SAAA,AAAM,EACZ,oVAAsB,EACtB,QAAQ,EACR,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAZ,YAAY,GAAI,WAAW,CAAC,mBAAmB,CAC/C,CAAC;IACH,CAAC;CAAA;AAMK,SAAgB,aAAa,CAClC,WAAyC,EACzC,OAAgB,EAChB,SAA0B,EAC1B,SAAkB,EAClB,YAA0B;;QAE1B,MAAM,QAAQ,GAAG,yVAAM,gBAAa,CAAC,aAAa,CACjD,WAAW,CAAC,cAAc,EAC1B,OAAO,EACP,SAAS,EACT,SAAS,CACT,CAAC;QAEF,8NAAO,SAAA,AAAM,EAAC;YAAE,MAAM,EAAE,OAAO;QAAA,CAAE,EAAE,QAAQ,EAAE,YAAY,KAAA,QAAZ,YAAY,KAAA,KAAA,IAAZ,YAAY,GAAI,WAAW,CAAC,mBAAmB,CAAC,CAAC;IAC/F,CAAC;CAAA","ignoreList":[0]}},
    {"offset": {"line": 2998, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3004, "column": 0}, "map": {"version":3,"file":"filtering_rpc_method_wrappers.js","sources":["file:///Users/jamesmorgan/Developer/web3/E-VOT/frontend/e-vote-app/node_modules/.pnpm/web3-eth%404.11.1_bufferutil%404.0.9_typescript%405.7.3_utf-8-validate%405.0.10_zod%403.24.1/node_modules/web3-eth/src/filtering_rpc_method_wrappers.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3Context } from 'web3-core';\nimport { ethRpcMethods } from 'web3-rpc-methods';\nimport { DataFormat, EthExecutionAPI, Numbers, Log, FilterParams } from 'web3-types';\nimport { format, numberToHex } from 'web3-utils';\nimport { isNullish } from 'web3-validator';\nimport { logSchema } from './schemas.js';\n\n/**\n * View additional documentations here: {@link Web3Eth.createNewPendingTransactionFilter}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n * @param returnFormat ({@link DataFormat}) Return format\n */\nexport async function createNewPendingTransactionFilter<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.newPendingTransactionFilter(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.createNewFilter}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n * @param filter ({@link FilterParam}) Filter param optional having from-block to-block address or params\n * @param returnFormat ({@link DataFormat}) Return format\n */\nexport async function createNewFilter<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tfilter: FilterParams,\n\treturnFormat: ReturnFormat,\n) {\n\t// format type bigint or number toBlock and fromBlock to hexstring.\n\tlet { toBlock, fromBlock } = filter;\n\tif (!isNullish(toBlock)) {\n\t\tif (typeof toBlock === 'number' || typeof toBlock === 'bigint') {\n\t\t\ttoBlock = numberToHex(toBlock);\n\t\t}\n\t}\n\tif (!isNullish(fromBlock)) {\n\t\tif (typeof fromBlock === 'number' || typeof fromBlock === 'bigint') {\n\t\t\tfromBlock = numberToHex(fromBlock);\n\t\t}\n\t}\n\n\tconst formattedFilter = { ...filter, fromBlock, toBlock };\n\n\tconst response = await ethRpcMethods.newFilter(web3Context.requestManager, formattedFilter);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.createNewBlockFilter}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n * @param returnFormat ({@link DataFormat}) Return format\n */\nexport async function createNewBlockFilter<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.newBlockFilter(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.uninstallFilter}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n * @param filterIdentifier ({@link Numbers}) filter id\n */\nexport async function uninstallFilter(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tfilterIdentifier: Numbers,\n) {\n\tconst response = await ethRpcMethods.uninstallFilter(\n\t\tweb3Context.requestManager,\n\t\tnumberToHex(filterIdentifier),\n\t);\n\n\treturn response;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getFilterChanges}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n * @param filterIdentifier ({@link Numbers}) filter id\n */\nexport async function getFilterChanges<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tfilterIdentifier: Numbers,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getFilterChanges(\n\t\tweb3Context.requestManager,\n\t\tnumberToHex(filterIdentifier),\n\t);\n\n\tconst result = response.map(res => {\n\t\tif (typeof res === 'string') {\n\t\t\treturn res;\n\t\t}\n\n\t\treturn format(\n\t\t\tlogSchema,\n\t\t\tres as unknown as Log,\n\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t);\n\t});\n\n\treturn result;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getFilterLogs}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n * @param filterIdentifier ({@link Numbers}) filter id\n */\nexport async function getFilterLogs<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tfilterIdentifier: Numbers,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getFilterLogs(\n\t\tweb3Context.requestManager,\n\t\tnumberToHex(filterIdentifier),\n\t);\n\n\tconst result = response.map(res => {\n\t\tif (typeof res === 'string') {\n\t\t\treturn res;\n\t\t}\n\n\t\treturn format(\n\t\t\tlogSchema,\n\t\t\tres as unknown as Log,\n\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t);\n\t});\n\n\treturn result;\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 3136, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3142, "column": 0}, "map": {"version":3,"file":"web3_subscriptions.js","sources":["file:///Users/jamesmorgan/Developer/web3/E-VOT/frontend/e-vote-app/node_modules/.pnpm/web3-eth%404.11.1_bufferutil%404.0.9_typescript%405.7.3_utf-8-validate%405.0.10_zod%403.24.1/node_modules/web3-eth/src/web3_subscriptions.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/* eslint-disable-next-line max-classes-per-file */\nimport { format } from 'web3-utils';\n\nimport {\n\tSyncOutput,\n\tAddress,\n\tBlockNumberOrTag,\n\tHexString,\n\tTopic,\n\tBlockHeaderOutput,\n\tLogsOutput,\n} from 'web3-types';\nimport { Web3Subscription } from 'web3-core';\nimport { blockHeaderSchema, logSchema, syncSchema } from './schemas.js';\n\n/**\n * ## subscribe('logs')\n * Subscribes to incoming logs, filtered by the given options. If a valid numerical fromBlock options property is set, web3.js will retrieve logs beginning from this point, backfilling the response as necessary.\n *\n * You can subscribe to logs matching a given filter object, which can take the following parameters:\n * - `fromBlock`: (optional, default: 'latest') Integer block number, or `'latest'` for the last mined block or `'pending'`, `'earliest'` for not yet mined transactions.\n * - `address`: (optional) Contract address or a list of addresses from which logs should originate.\n * - `topics`: (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with `or` options.\n *\n */\nexport class LogsSubscription extends Web3Subscription<\n\t{\n\t\tdata: LogsOutput;\n\t},\n\t{\n\t\treadonly fromBlock?: BlockNumberOrTag;\n\t\treadonly address?: Address | Address[];\n\t\treadonly topics?: Topic[];\n\t}\n> {\n\tprotected _buildSubscriptionParams() {\n\t\treturn ['logs', this.args];\n\t}\n\n\tprotected formatSubscriptionResult(data: LogsOutput) {\n\t\treturn format(logSchema, data, super.returnFormat);\n\t}\n}\n\n/**\n * ## subscribe('pendingTransactions')\n * Subscribes to incoming pending transactions.\n *\n * You can subscribe to pending transactions by calling web3.eth.subscribe('pendingTransactions').\n * @example\n * ```ts\n * (await web3.eth.subscribe('pendingTransactions')).on('data', console.log);\n * ```\n */\nexport class NewPendingTransactionsSubscription extends Web3Subscription<{\n\tdata: HexString;\n}> {\n\t// eslint-disable-next-line\n\tprotected _buildSubscriptionParams() {\n\t\treturn ['newPendingTransactions'];\n\t}\n\n\tprotected formatSubscriptionResult(data: string) {\n\t\treturn format({ format: 'string' }, data, super.returnFormat);\n\t}\n}\n\n/**\n * ## subscribe('newHeads') ( same as subscribe('newBlockHeaders'))\n *\n * Subscribes to incoming block headers. This can be used as timer to check for changes on the blockchain.\n *\n * The structure of a returned block header is {@link BlockHeaderOutput}:\n * @example\n * ```ts\n * (await web3.eth.subscribe('newHeads')).on( // 'newBlockHeaders' would work as well\n *  'data',\n * console.log\n * );\n * >{\n * parentHash: '0x9e746a1d906b299def98c75b06f714d62dacadd567c7515d76eeaa8c8074c738',\n * sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n * miner: '0x0000000000000000000000000000000000000000',\n * stateRoot: '0xe0f04b04861ecfa95e82a9310d6a7ef7aef8d7417f5209c182582bfb98a8e307',\n * transactionsRoot: '0x31ab4ea571a9e10d3a19aaed07d190595b1dfa34e03960c04293fec565dea536',\n * logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n * difficulty: 2n,\n * number: 21n,\n * gasLimit: 11738125n,\n * gasUsed: 830006n,\n * timestamp: 1678797237n,\n * extraData: '0xd883010b02846765746888676f312e32302e31856c696e757800000000000000e0a6e93cf40e2e71a72e493272210c3f43738ccc7e7d7b14ffd51833797d896c09117e8dc4fbcbc969bd21b42e5af3e276a911524038c001b2109b63b8e0352601',\n * nonce: 0n\n * }\n * ```\n */\nexport class NewHeadsSubscription extends Web3Subscription<{\n\tdata: BlockHeaderOutput;\n}> {\n\t// eslint-disable-next-line\n\tprotected _buildSubscriptionParams() {\n\t\treturn ['newHeads'];\n\t}\n\n\tprotected formatSubscriptionResult(data: BlockHeaderOutput): BlockHeaderOutput {\n\t\treturn format(blockHeaderSchema, data, super.returnFormat);\n\t}\n}\n\n/**\n * ## subscribe('syncing')\n *\n * Subscribe to syncing events. This will return `true` when the node is syncing and when it’s finished syncing will return `false`, for the `changed` event.\n * @example\n * ```ts\n * (await web3.eth.subscribe('syncing')).on('changed', console.log);\n * > `true` // when syncing\n *\n * (await web3.eth.subscribe('syncing')).on('data', console.log);\n * > {\n *      startingBlock: 0,\n *      currentBlock: 0,\n *      highestBlock: 0,\n *      pulledStates: 0,\n *      knownStates: 0\n *   }\n * ```\n */\nexport class SyncingSubscription extends Web3Subscription<{\n\tdata: SyncOutput;\n\tchanged: boolean;\n}> {\n\t// eslint-disable-next-line\n\tprotected _buildSubscriptionParams() {\n\t\treturn ['syncing'];\n\t}\n\n\tpublic _processSubscriptionResult(\n\t\tdata:\n\t\t\t| {\n\t\t\t\t\tsyncing: boolean;\n\t\t\t\t\tstatus: SyncOutput;\n\t\t\t  }\n\t\t\t| boolean,\n\t) {\n\t\tif (typeof data === 'boolean') {\n\t\t\tthis.emit('changed', data);\n\t\t} else {\n\t\t\tconst mappedData: SyncOutput = Object.fromEntries(\n\t\t\t\tObject.entries(data?.status || data).map(([key, value]) => [\n\t\t\t\t\tkey.charAt(0).toLowerCase() + key.substring(1),\n\t\t\t\t\tvalue,\n\t\t\t\t]),\n\t\t\t) as SyncOutput;\n\n\t\t\tthis.emit('changed', data.syncing);\n\t\t\tthis.emit('data', format(syncSchema, mappedData, super.returnFormat));\n\t\t}\n\t}\n}\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;EAeE,CACF,iDAAA,EAAmD;;;;;;;;AAanD,OAAO,EAAE,iBAAiB,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAZxE,OAAO,EAAE,MAAM,EAAE,MAAM,YAAY,CAAC;AAWpC,OAAO,EAAE,gBAAgB,EAAE,MAAM,WAAW,CAAC;;;;AAavC,MAAO,gBAAiB,kSAAQ,mBASrC;IACU,wBAAwB,GAAA;QACjC,OAAO;YAAC,MAAM;YAAE,IAAI,CAAC,IAAI;SAAC,CAAC;IAC5B,CAAC;IAES,wBAAwB,CAAC,IAAgB,EAAA;QAClD,8NAAO,SAAA,AAAM,6TAAC,YAAS,EAAE,IAAI,EAAE,KAAK,CAAC,YAAY,CAAC,CAAC;IACpD,CAAC;CACD;AAYK,MAAO,kCAAmC,kSAAQ,mBAEtD;IACD,2BAA2B;IACjB,wBAAwB,GAAA;QACjC,OAAO;YAAC,wBAAwB;SAAC,CAAC;IACnC,CAAC;IAES,wBAAwB,CAAC,IAAY,EAAA;QAC9C,8NAAO,SAAA,AAAM,EAAC;YAAE,MAAM,EAAE,QAAQ;QAAA,CAAE,EAAE,IAAI,EAAE,KAAK,CAAC,YAAY,CAAC,CAAC;IAC/D,CAAC;CACD;AA+BK,MAAO,oBAAqB,kSAAQ,mBAExC;IACD,2BAA2B;IACjB,wBAAwB,GAAA;QACjC,OAAO;YAAC,UAAU;SAAC,CAAC;IACrB,CAAC;IAES,wBAAwB,CAAC,IAAuB,EAAA;QACzD,8NAAO,SAAA,AAAM,6TAAC,oBAAiB,EAAE,IAAI,EAAE,KAAK,CAAC,YAAY,CAAC,CAAC;IAC5D,CAAC;CACD;AAqBK,MAAO,mBAAoB,iSAAQ,oBAGvC;IACD,2BAA2B;IACjB,wBAAwB,GAAA;QACjC,OAAO;YAAC,SAAS;SAAC,CAAC;IACpB,CAAC;IAEM,0BAA0B,CAChC,IAKU,EAAA;QAEV,IAAI,OAAO,IAAI,KAAK,SAAS,EAAE,CAAC;YAC/B,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QAC5B,CAAC,MAAM,CAAC;YACP,MAAM,UAAU,GAAe,MAAM,CAAC,WAAW,CAChD,MAAM,CAAC,OAAO,CAAC,CAAA,IAAI,KAAA,QAAJ,IAAI,KAAA,KAAA,IAAA,KAAA,IAAJ,IAAI,CAAE,MAAM,KAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,CAAG,CAAD;oBACzD,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;oBAC9C,KAAK;iBACL,CAAC,CACY,CAAC;YAEhB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YACnC,IAAI,CAAC,IAAI,CAAC,MAAM,yNAAE,SAAA,AAAM,6TAAC,aAAU,EAAE,UAAU,EAAE,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;QACvE,CAAC;IACF,CAAC;CACD","ignoreList":[0]}},
    {"offset": {"line": 3226, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3232, "column": 0}, "map": {"version":3,"file":"web3_eth.js","sources":["file:///Users/jamesmorgan/Developer/web3/E-VOT/frontend/e-vote-app/node_modules/.pnpm/web3-eth%404.11.1_bufferutil%404.0.9_typescript%405.7.3_utf-8-validate%405.0.10_zod%403.24.1/node_modules/web3-eth/src/web3_eth.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// Disabling because returnTypes must be last param to match 1.x params\n/* eslint-disable default-param-last */\n\nimport {\n\tSupportedProviders,\n\tAddress,\n\tBytes,\n\tFeeData,\n\tFilter,\n\tHexString32Bytes,\n\tHexString8Bytes,\n\tNumbers,\n\tBlockNumberOrTag,\n\tLogsOutput,\n\tTransaction,\n\tTransactionCall,\n\tWeb3EthExecutionAPI,\n\tTransactionWithFromLocalWalletIndex,\n\tTransactionWithToLocalWalletIndex,\n\tTransactionWithFromAndToLocalWalletIndex,\n\tTransactionForAccessList,\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tEip712TypedData,\n\tFMT_BYTES,\n\tFMT_NUMBER,\n\tFilterParams,\n} from 'web3-types';\nimport { isSupportedProvider, Web3Context, Web3ContextInitOptions } from 'web3-core';\nimport { TransactionNotFound } from 'web3-errors';\nimport { toChecksumAddress, isNullish, ethUnitMap } from 'web3-utils';\nimport { ethRpcMethods } from 'web3-rpc-methods';\n\nimport * as rpcMethodsWrappers from './rpc_method_wrappers.js';\nimport * as filteringRpcMethodsWrappers from './filtering_rpc_method_wrappers.js';\nimport { SendTransactionOptions, TransactionMiddleware } from './types.js';\nimport {\n\tLogsSubscription,\n\tNewPendingTransactionsSubscription,\n\tNewHeadsSubscription,\n\tSyncingSubscription,\n} from './web3_subscriptions.js';\n\nexport type RegisteredSubscription = {\n\tlogs: typeof LogsSubscription;\n\tnewPendingTransactions: typeof NewPendingTransactionsSubscription;\n\tpendingTransactions: typeof NewPendingTransactionsSubscription;\n\tnewHeads: typeof NewHeadsSubscription;\n\tnewBlockHeaders: typeof NewHeadsSubscription;\n\tsyncing: typeof SyncingSubscription;\n};\n\nexport const registeredSubscriptions = {\n\tlogs: LogsSubscription,\n\tnewPendingTransactions: NewPendingTransactionsSubscription,\n\tnewHeads: NewHeadsSubscription,\n\tsyncing: SyncingSubscription,\n\tpendingTransactions: NewPendingTransactionsSubscription, // the same as newPendingTransactions. just for support API like in version 1.x\n\tnewBlockHeaders: NewHeadsSubscription, // the same as newHeads. just for support API like in version 1.x\n};\n\n/**\n *\n * The Web3Eth allows you to interact with an Ethereum blockchain.\n *\n * For using Web3 Eth functions, first install Web3 package using `npm i web3` or `yarn add web3` based on your package manager usage.\n * After that, Web3 Eth functions will be available as mentioned in following snippet.\n * ```ts\n * import { Web3 } from 'web3';\n * const web3 = new Web3('https://mainnet.infura.io/v3/<YOURPROJID>');\n *\n * const block = await web3.eth.getBlock(0);\n *\n * ```\n *\n * For using individual package install `web3-eth` package using `npm i web3-eth` or `yarn add web3-eth` and only import required functions.\n * This is more efficient approach for building lightweight applications.\n * ```ts\n * import { Web3Eth } from 'web3-eth';\n *\n * const eth = new Web3Eth('https://mainnet.infura.io/v3/<YOURPROJID>');\n * const block = await eth.getBlock(0);\n *\n * ```\n */\nexport class Web3Eth extends Web3Context<Web3EthExecutionAPI, RegisteredSubscription> {\n\tprivate transactionMiddleware?: TransactionMiddleware;\n\n\tpublic constructor(\n\t\t// eslint-disable-next-line  @typescript-eslint/no-explicit-any\n\t\tproviderOrContext?: SupportedProviders<any> | Web3ContextInitOptions | string,\n\t) {\n\t\tif (\n\t\t\ttypeof providerOrContext === 'string' ||\n\t\t\t// eslint-disable-next-line  @typescript-eslint/no-explicit-any\n\t\t\tisSupportedProvider(providerOrContext as SupportedProviders<any>)\n\t\t) {\n\t\t\t// @ts-expect-error disable the error: \"A 'super' call must be a root-level statement within a constructor of a derived class that contains initialized properties, parameter properties, or private identifiers.\"\n\t\t\tsuper({\n\t\t\t\t// eslint-disable-next-line  @typescript-eslint/no-explicit-any\n\t\t\t\tprovider: providerOrContext as SupportedProviders<any>,\n\t\t\t\tregisteredSubscriptions,\n\t\t\t});\n\n\t\t\treturn;\n\t\t}\n\n\t\tif ((providerOrContext as Web3ContextInitOptions).registeredSubscriptions) {\n\t\t\tsuper(providerOrContext as Web3ContextInitOptions);\n\t\t\treturn;\n\t\t}\n\n\t\tsuper({\n\t\t\t...(providerOrContext as Web3ContextInitOptions),\n\t\t\tregisteredSubscriptions,\n\t\t});\n\t}\n\n\tpublic setTransactionMiddleware(transactionMiddleware: TransactionMiddleware) {\n\t\tthis.transactionMiddleware = transactionMiddleware;\n\t}\n\n\tpublic getTransactionMiddleware() {\n\t\treturn this.transactionMiddleware;\n\t}\n\n\t/**\n\t * @returns Returns the ethereum protocol version of the node.\n\t *\n\t * ```ts\n\t * web3.eth.getProtocolVersion().then(console.log);\n\t * > \"63\"\n\t * ```\n\t */\n\tpublic async getProtocolVersion() {\n\t\treturn ethRpcMethods.getProtocolVersion(this.requestManager);\n\t}\n\n\t// TODO Add returnFormat parameter\n\t/**\n\t * Checks if the node is currently syncing.\n\t *\n\t * @returns Either a {@link SyncingStatusAPI}, or `false`.\n\t *\n\t * ```ts\n\t * web3.eth.isSyncing().then(console.log);\n\t * > {\n\t *     startingBlock: 100,\n\t *     currentBlock: 312,\n\t *     highestBlock: 512,\n\t *     knownStates: 234566,\n\t *     pulledStates: 123455\n\t * }\n\t * ```\n\t */\n\tpublic async isSyncing() {\n\t\treturn ethRpcMethods.getSyncing(this.requestManager);\n\t}\n\n\t// TODO consider adding returnFormat parameter (to format address as bytes)\n\t/**\n\t * @returns Returns the coinbase address to which mining rewards will go.\n\t *\n\t * ```ts\n\t * web3.eth.getCoinbase().then(console.log);\n\t * > \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\"\n\t * ```\n\t */\n\tpublic async getCoinbase() {\n\t\treturn ethRpcMethods.getCoinbase(this.requestManager);\n\t}\n\n\t/**\n\t * Checks whether the node is mining or not.\n\t *\n\t * @returns `true` if the node is mining, otherwise `false`.\n\t *\n\t * ```ts\n\t * web3.eth.isMining().then(console.log);\n\t * > true\n\t * ```\n\t */\n\tpublic async isMining() {\n\t\treturn ethRpcMethods.getMining(this.requestManager);\n\t}\n\n\t/**\n\t * @deprecated Will be removed in the future, please use {@link Web3Eth.getHashRate} method instead.\n\t *\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The number of hashes per second that the node is mining with.\n\t *\n\t * ```ts\n\t * web3.eth.getHashrate().then(console.log);\n\t * > 493736n\n\t *\n\t * web3.eth.getHashrate({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > \"0x788a8\"\n\t * ```\n\t */\n\tpublic async getHashrate<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\treturnFormat: ReturnFormat = (this.defaultReturnFormat ??\n\t\t\tDEFAULT_RETURN_FORMAT) as ReturnFormat,\n\t) {\n\t\treturn this.getHashRate(returnFormat);\n\t}\n\n\t/**\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The number of hashes per second that the node is mining with.\n\t *\n\t * ```ts\n\t * web3.eth.getHashRate().then(console.log);\n\t * > 493736n\n\t *\n\t * web3.eth.getHashRate({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > \"0x788a8\"\n\t * ```\n\t */\n\tpublic async getHashRate<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getHashRate(this, returnFormat);\n\t}\n\n\t/**\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The gas price determined by the last few blocks median gas price.\n\t *\n\t * ```ts\n\t * web3.eth.getGasPrice().then(console.log);\n\t * > 20000000000n\n\t *\n\t * web3.eth.getGasPrice({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > \"0x4a817c800\"\n\t * ```\n\t */\n\tpublic async getGasPrice<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getGasPrice(this, returnFormat);\n\t}\n\n\t/**\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns the current maxPriorityFeePerGas per gas in wei.\n\t *\n\t * ```ts\n\t * web3.eth.getMaxPriorityFeePerGas().then(console.log);\n\t * > 20000000000n\n\t *\n\t * web3.eth.getMaxPriorityFeePerGas({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > \"0x4a817c800\"\n\t * ```\n\t */\n\tpublic async getMaxPriorityFeePerGas<\n\t\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\n\t>(returnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat) {\n\t\treturn rpcMethodsWrappers.getMaxPriorityFeePerGas(this, returnFormat);\n\t}\n\n\t/**\n\t * Calculates the current Fee Data.\n\t * If the node supports EIP-1559, then `baseFeePerGas` and `maxPriorityFeePerGas` will be returned along with the calculated `maxFeePerGas` value.\n\t * `maxFeePerGas` is calculated as `baseFeePerGas` * `baseFeePerGasFactor` + `maxPriorityFeePerGas`.\n\t * If the node does not support EIP-1559, then the `gasPrice` will be returned and the other values will be undefined.\n\t *\n\t * @param baseFeePerGasFactor (optional) The factor to multiply the `baseFeePerGas` with when calculating `maxFeePerGas`, if the node supports EIP-1559. This can be a `bigint` for precise calculation or a `number` to support decimals. The default value is 2 (BigInt).\n\t * If a `number` is provided, it will be converted to `bigint` with three decimal precision.\n\t * @param alternativeMaxPriorityFeePerGas (optional) The alternative `maxPriorityFeePerGas` to use when calculating `maxFeePerGas`, if the node supports EIP-1559 but does not support the method `eth_maxPriorityFeePerGas`. The default value is 1 gwei.\n\t * @returns The current fee data.\n\t *\n\t * @example\n\t * web3.eth.calculateFeeData().then(console.log);\n\t * > {\n\t *     gasPrice: 20000000000n,\n\t *     maxFeePerGas: 60000000000n,\n\t *     maxPriorityFeePerGas: 20000000000n,\n\t *     baseFeePerGas: 20000000000n\n\t * }\n\t *\n\t * @example\n\t * // Using a `bigint` for baseFeePerGasFactor\n\t * web3.eth.calculateFeeData(1n).then(console.log);\n\t * > {\n\t *     gasPrice: 20000000000n,\n\t *     maxFeePerGas: 40000000000n,\n\t *     maxPriorityFeePerGas: 20000000000n,\n\t *     baseFeePerGas: 20000000000n\n\t * }\n\t *\n\t * @example\n\t * // Using a `number` for baseFeePerGasFactor (with decimals)\n\t * web3.eth.calculateFeeData(1.5).then(console.log);\n\t * > {\n\t *     gasPrice: 20000000000n,\n\t *     maxFeePerGas: 50000000000n,  // baseFeePerGasFactor is converted to BigInt(1.500)\n\t *     maxPriorityFeePerGas: 20000000000n,\n\t *     baseFeePerGas: 20000000000n\n\t * }\n\t *\n\t * @example\n\t * web3.eth.calculateFeeData(3n).then(console.log);\n\t * > {\n\t *     gasPrice: 20000000000n,\n\t *     maxFeePerGas: 80000000000n,\n\t *     maxPriorityFeePerGas: 20000000000n,\n\t *     baseFeePerGas: 20000000000n\n\t * }\n\t */\n\n\tpublic async calculateFeeData(\n\t\tbaseFeePerGasFactor: bigint | number = BigInt(2),\n\t\talternativeMaxPriorityFeePerGas = ethUnitMap.Gwei,\n\t): Promise<FeeData> {\n\t\tconst block = await this.getBlock<{ number: FMT_NUMBER.BIGINT; bytes: FMT_BYTES.HEX }>(\n\t\t\tundefined,\n\t\t\tfalse,\n\t\t);\n\n\t\tconst baseFeePerGas: bigint | undefined = block?.baseFeePerGas ?? undefined; // use undefined if it was null\n\n\t\tlet gasPrice: bigint | undefined;\n\t\ttry {\n\t\t\tgasPrice = await this.getGasPrice<{\n\t\t\t\tnumber: FMT_NUMBER.BIGINT;\n\t\t\t\tbytes: FMT_BYTES.HEX;\n\t\t\t}>();\n\t\t} catch (error) {\n\t\t\t// do nothing\n\t\t}\n\n\t\tlet maxPriorityFeePerGas: bigint | undefined;\n\t\ttry {\n\t\t\tmaxPriorityFeePerGas = await this.getMaxPriorityFeePerGas<{\n\t\t\t\tnumber: FMT_NUMBER.BIGINT;\n\t\t\t\tbytes: FMT_BYTES.HEX;\n\t\t\t}>();\n\t\t} catch (error) {\n\t\t\t// do nothing\n\t\t}\n\n\t\tlet maxFeePerGas: bigint | undefined;\n\t\t// if the `block.baseFeePerGas` is available, then EIP-1559 is supported\n\t\t// and we can calculate the `maxFeePerGas` from the `block.baseFeePerGas`\n\t\tif (baseFeePerGas) {\n\t\t\t// tip the miner with alternativeMaxPriorityFeePerGas, if no value available from getMaxPriorityFeePerGas\n\t\t\tmaxPriorityFeePerGas = maxPriorityFeePerGas ?? alternativeMaxPriorityFeePerGas;\n\t\t\t// basically maxFeePerGas = (baseFeePerGas +- 12.5%) + maxPriorityFeePerGas\n\t\t\t// and we multiply the `baseFeePerGas` by `baseFeePerGasFactor`, to allow\n\t\t\t// trying to include the transaction in the next few blocks even if the\n\t\t\t// baseFeePerGas is increasing fast\n\t\t\tlet baseFeeMultiplier: bigint;\n\t\t\tif (typeof baseFeePerGasFactor === 'number') {\n\t\t\t\t// Convert number to bigint with three decimal places\n\t\t\t\tbaseFeeMultiplier = BigInt(Math.floor(baseFeePerGasFactor * 1000)) / BigInt(1000);\n\t\t\t} else {\n\t\t\t\t// It's already a BigInt, so just use it as-is\n\t\t\t\tbaseFeeMultiplier = baseFeePerGasFactor;\n\t\t\t}\n\t\t\tmaxFeePerGas = baseFeePerGas * baseFeeMultiplier + maxPriorityFeePerGas;\n\t\t}\n\n\t\treturn { gasPrice, maxFeePerGas, maxPriorityFeePerGas, baseFeePerGas };\n\t}\n\n\t// an alias for calculateFeeData\n\t// eslint-disable-next-line\n\tpublic getFeeData = this.calculateFeeData;\n\n\t/**\n\t * @returns A list of accounts the node controls (addresses are checksummed).\n\t *\n\t * ```ts\n\t * web3.eth.getAccounts().then(console.log);\n\t * > [\"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\", \"0xDCc6960376d6C6dEa93647383FfB245CfCed97Cf\"]\n\t * ```\n\t */\n\tpublic async getAccounts() {\n\t\tconst hexAddresses = (await ethRpcMethods.getAccounts(this.requestManager)) ?? [];\n\t\treturn hexAddresses.map(address => toChecksumAddress(address));\n\t}\n\n\t/**\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The current block number.\n\t *\n\t * ```ts\n\t * web3.eth.getBlockNumber().then(console.log);\n\t * > 2744n\n\t *\n\t * web3.eth.getBlockNumber({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > \"0xab8\"\n\t * ```\n\t */\n\tpublic async getBlockNumber<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getBlockNumber(this, returnFormat);\n\t}\n\n\t/**\n\t * Get the balance of an address at a given block.\n\t *\n\t * @param address The address to get the balance of.\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the balance query.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The current balance for the given address in `wei`.\n\t *\n\t * ```ts\n\t * web3.eth.getBalance(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\n\t * > 1000000000000n\n\t *\n\t * web3.eth.getBalance(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\n\t * > \"0xe8d4a51000\"\n\t * ```\n\t */\n\tpublic async getBalance<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\taddress: Address,\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getBalance(this, address, blockNumber, returnFormat);\n\t}\n\n\t/**\n\t * Get the storage at a specific position of an address.\n\t *\n\t * @param address The address to get the storage from.\n\t * @param storageSlot The index position of the storage.\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the storage query.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The value in storage at the given position.\n\t *\n\t * ```ts\n\t * web3.eth.getStorageAt(\"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\", 0).then(console.log);\n\t * > \"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\"\n\t *\n\t * web3.eth.getStorageAt(\n\t *      \"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\",\n\t *      0,\n\t *      undefined,\n\t *      { number: FMT_NUMBER.HEX , bytes: FMT_BYTES.UINT8ARRAY }\n\t * ).then(console.log);\n\t * > Uint8Array(31) [\n\t *       3, 52,  86, 115,  33,  35, 255, 255,\n\t *       35, 66,  52,  45, 209,  35,  66,  67,\n\t *       67, 36,  35,  66,  52, 253,  35,  79,\n\t *       210, 63, 212, 242,  61,  66,  52\n\t *    ]\n\t * ```\n\t */\n\tpublic async getStorageAt<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\taddress: Address,\n\t\tstorageSlot: Numbers,\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getStorageAt(\n\t\t\tthis,\n\t\t\taddress,\n\t\t\tstorageSlot,\n\t\t\tblockNumber,\n\t\t\treturnFormat,\n\t\t);\n\t}\n\n\t/**\n\t * Get the code at a specific address.\n\t *\n\t * @param address The address to get the code from.\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the code query.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The [data](https://ethereum.org/en/developers/docs/transactions/#the-data-field) at the provided `address`.\n\t *\n\t * ```ts\n\t * web3.eth.getCode(\"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\").then(console.log);\n\t * > \"0x600160008035811a818181146012578301005b601b6001356025565b8060005260206000f25b600060078202905091905056\"\n\t *\n\t * web3.eth.getCode(\n\t *      \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\n\t *      undefined,\n\t *      { number: FMT_NUMBER.HEX , bytes: FMT_BYTES.UINT8ARRAY }\n\t * ).then(console.log);\n\t * > Uint8Array(50) [\n\t *   96,  1,  96,   0, 128, 53, 129, 26, 129, 129, 129,\n\t *   20, 96,  18,  87, 131,  1,   0, 91,  96,  27,  96,\n\t *   1, 53,  96,  37,  86, 91, 128, 96,   0,  82,  96,\n\t *   32, 96,   0, 242,  91, 96,   0, 96,   7, 130,   2,\n\t *   144, 80, 145, 144,  80, 86\n\t * ]\n\t * ```\n\t */\n\tpublic async getCode<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\taddress: Address,\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getCode(this, address, blockNumber, returnFormat);\n\t}\n\n\t/**\n\t * Retrieves a {@link Block} matching the provided block number, block hash or block tag.\n\t *\n\t * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\n\t * @param hydrated If specified `true`, the returned block will contain all transactions as objects. If `false` it will only contain transaction hashes.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted (does not format transaction objects or hashes).\n\t * @returns A {@link Block} object matching the provided block number or block hash.\n\t *\n\t * ```ts\n\t * web3.eth.getBlock(0).then(console.log);\n\t * > {\n\t *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',\n\t *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n\t *    miner: '0x0000000000000000000000000000000000000000',\n\t *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',\n\t *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n\t *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n\t *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *    difficulty: 1n,\n\t *    number: 0n,\n\t *    gasLimit: 30000000n,\n\t *    gasUsed: 0n,\n\t *    timestamp: 1658281638n,\n\t *    extraData: '0x',\n\t *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *    nonce: 0n,\n\t *    totalDifficulty: 1n,\n\t *    baseFeePerGas: 1000000000n,\n\t *    size: 514n,\n\t *    transactions: [],\n\t *    uncles: []\n\t *  }\n\t *\n\t * web3.eth.getBlock(\n\t *      \"0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d\",\n\t *      false,\n\t *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * > {\n\t *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',\n\t *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n\t *    miner: '0x0000000000000000000000000000000000000000',\n\t *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',\n\t *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n\t *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n\t *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *    difficulty: 1,\n\t *    number: 0,\n\t *    gasLimit: 30000000,\n\t *    gasUsed: 0,\n\t *    timestamp: 1658281638,\n\t *    extraData: '0x',\n\t *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *    nonce: 0,\n\t *    totalDifficulty: 1,\n\t *    baseFeePerGas: 1000000000,\n\t *    size: 514,\n\t *    transactions: [],\n\t *    uncles: []\n\t *  }\n\t * ```\n\t */\n\tpublic async getBlock<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tblock: HexString32Bytes | BlockNumberOrTag = this.defaultBlock,\n\t\thydrated = false,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getBlock(this, block, hydrated, returnFormat);\n\t}\n\n\t/**\n\t * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The number of transactions in the provided block.\n\t *\n\t * ```ts\n\t * web3.eth.getBlockTransactionCount(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\n\t * > 1n\n\t *\n\t * web3.eth.getBlockTransactionCount(\n\t *     \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\n\t *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * > 1\n\t * ```\n\t */\n\tpublic async getBlockTransactionCount<\n\t\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\n\t>(\n\t\tblock: HexString32Bytes | BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getBlockTransactionCount(this, block, returnFormat);\n\t}\n\n\t/**\n\t * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The number of [uncles](https://ethereum.org/en/glossary/#ommer) in the provided block.\n\t *\n\t * ```ts\n\t * web3.eth.getBlockUncleCount(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\n\t * > 1n\n\t *\n\t * web3.eth.getBlockUncleCount(\n\t *     \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\n\t *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * > 1\n\t * ```\n\t */\n\tpublic async getBlockUncleCount<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tblock: HexString32Bytes | BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getBlockUncleCount(this, block, returnFormat);\n\t}\n\n\t/**\n\t *\n\t * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\n\t * @param uncleIndex The index position of the uncle.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns A blocks [uncle](https://ethereum.org/en/glossary/#ommer) by a given uncle index position.\n\t *\n\t * ```ts\n\t * web3.eth.getUncle(0, 1).then(console.log);\n\t * > {\n\t *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',\n\t *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n\t *    miner: '0x0000000000000000000000000000000000000000',\n\t *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',\n\t *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n\t *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n\t *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *    difficulty: 1n,\n\t *    number: 0n,\n\t *    gasLimit: 30000000n,\n\t *    gasUsed: 0n,\n\t *    timestamp: 1658281638n,\n\t *    extraData: '0x',\n\t *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *    nonce: 0n,\n\t *    totalDifficulty: 1n,\n\t *    baseFeePerGas: 1000000000n,\n\t *    size: 514n,\n\t *    transactions: [],\n\t *    uncles: []\n\t *  }\n\t *\n\t * web3.eth.getUncle(\n\t *      \"0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d\",\n\t *      1,\n\t *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * > {\n\t *    hash: '0x7dbfdc6a7a67a670cb9b0c3f81ca60c007762f1e4e598cb027a470678ff26d0d',\n\t *    parentHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *    sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n\t *    miner: '0x0000000000000000000000000000000000000000',\n\t *    stateRoot: '0x5ed9882897d363c4632a6e67fba6203df61bd994813dcf048da59be442a9c6c4',\n\t *    transactionsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n\t *    receiptsRoot: '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n\t *    logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *    difficulty: 1,\n\t *    number: 0,\n\t *    gasLimit: 30000000,\n\t *    gasUsed: 0,\n\t *    timestamp: 1658281638,\n\t *    extraData: '0x',\n\t *    mixHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *    nonce: 0,\n\t *    totalDifficulty: 1,\n\t *    baseFeePerGas: 1000000000,\n\t *    size: 514,\n\t *    transactions: [],\n\t *    uncles: []\n\t *  }\n\t * ```\n\t */\n\tpublic async getUncle<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tblock: HexString32Bytes | BlockNumberOrTag = this.defaultBlock,\n\t\tuncleIndex: Numbers,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getUncle(this, block, uncleIndex, returnFormat);\n\t}\n\n\t/**\n\t * @param transactionHash The hash of the desired transaction.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The desired transaction object.\n\t *\n\t * ```ts\n\t * web3.eth.getTransaction('0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc').then(console.log);\n\t * {\n\t *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n\t *    type: 0n,\n\t *    nonce: 0n,\n\t *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',\n\t *    blockNumber: 1n,\n\t *    transactionIndex: 0n,\n\t *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *    value: 1n,\n\t *    gas: 90000n,\n\t *    gasPrice: 2000000000n,\n\t *    input: '0x',\n\t *    v: 2709n,\n\t *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n\t *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n\t *  }\n\t *\n\t * web3.eth.getTransaction(\n\t *     web3.utils.hexToBytes(\"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\"),\n\t *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * {\n\t *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n\t *    type: 0,\n\t *    nonce: 0,\n\t *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',\n\t *    blockNumber: 1,\n\t *    transactionIndex: 0,\n\t *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *    value: 1,\n\t *    gas: 90000,\n\t *    gasPrice: 2000000000,\n\t *    input: '0x',\n\t *    v: 2709,\n\t *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n\t *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n\t *  }\n\t * ```\n\t */\n\tpublic async getTransaction<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\ttransactionHash: Bytes,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\tconst response = await rpcMethodsWrappers.getTransaction(\n\t\t\tthis,\n\t\t\ttransactionHash,\n\t\t\treturnFormat,\n\t\t);\n\n\t\tif (!response) throw new TransactionNotFound();\n\n\t\treturn response;\n\t}\n\n\t/**\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns A list of pending transactions.\n\t *\n\t * ```ts\n\t * web3.eth.getPendingTransactions().then(console.log);\n\t * > [\n\t *      {\n\t *          hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n\t *          type: 0n,\n\t *          nonce: 0n,\n\t *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *          blockNumber: null,\n\t *          transactionIndex: 0n,\n\t *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *          value: 1n,\n\t *          gas: 90000n,\n\t *          gasPrice: 2000000000n,\n\t *          input: '0x',\n\t *          v: 2709n,\n\t *          r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n\t *          s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n\t *      },\n\t *      {\n\t *          hash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\n\t *          type: 0n,\n\t *          nonce: 1n,\n\t *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *          blockNumber: null,\n\t *          transactionIndex: 0n,\n\t *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *          value: 1n,\n\t *          gas: 90000n,\n\t *          gasPrice: 2000000000n,\n\t *          input: '0x',\n\t *          v: 2710n,\n\t *          r: '0x55ac19fade21db035a1b7ea0a8d49e265e05dbb926e75f273f836ad67ce5c96a',\n\t *          s: '0x6550036a7c3fd426d5c3d35d96a7075cd673957620b7889846a980d2d017ec08'\n\t *      }\n\t *   ]\n\t *\n\t * * web3.eth.getPendingTransactions({ number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > [\n\t *      {\n\t *          hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n\t *          type: 0,\n\t *          nonce: 0,\n\t *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *          blockNumber: null,\n\t *          transactionIndex: 0,\n\t *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *          value: 1,\n\t *          gas: 90000,\n\t *          gasPrice: 2000000000,\n\t *          input: '0x',\n\t *          v: 2709,\n\t *          r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n\t *          s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n\t *      },\n\t *      {\n\t *          hash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\n\t *          type: 0,\n\t *          nonce: 1,\n\t *          blockHash: '0x0000000000000000000000000000000000000000000000000000000000000000',\n\t *          blockNumber: null,\n\t *          transactionIndex: 0,\n\t *          from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *          to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *          value: 1,\n\t *          gas: 90000,\n\t *          gasPrice: 2000000000,\n\t *          input: '0x',\n\t *          v: 2710,\n\t *          r: '0x55ac19fade21db035a1b7ea0a8d49e265e05dbb926e75f273f836ad67ce5c96a',\n\t *          s: '0x6550036a7c3fd426d5c3d35d96a7075cd673957620b7889846a980d2d017ec08'\n\t *      }\n\t *   ]\n\t * ```\n\t */\n\tpublic async getPendingTransactions<\n\t\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\n\t>(returnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat) {\n\t\treturn rpcMethodsWrappers.getPendingTransactions(this, returnFormat);\n\t}\n\n\t/**\n\t * @param block The {@link BlockNumberOrTag} (defaults to {@link Web3Eth.defaultBlock}) or block hash of the desired block.\n\t * @param transactionIndex The index position of the transaction.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The desired transaction object.\n\t *\n\t * ```ts\n\t * web3.eth.getTransactionFromBlock('0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00', 0).then(console.log);\n\t * {\n\t *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n\t *    type: 0n,\n\t *    nonce: 0n,\n\t *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',\n\t *    blockNumber: 1n,\n\t *    transactionIndex: 0n,\n\t *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *    value: 1n,\n\t *    gas: 90000n,\n\t *    gasPrice: 2000000000n,\n\t *    input: '0x',\n\t *    v: 2709n,\n\t *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n\t *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n\t *  }\n\t *\n\t * web3.eth.getTransactionFromBlock(\n\t *     hexToBytes(\"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\"),\n\t *     0,\n\t *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * {\n\t *    hash: '0x73aea70e969941f23f9d24103e91aa1f55c7964eb13daf1c9360c308a72686dc',\n\t *    type: 0,\n\t *    nonce: 0,\n\t *    blockHash: '0x43202bd16b6bd54bea1b310736bd78bdbe93a64ad940f7586739d9eb25ad8d00',\n\t *    blockNumber: 1,\n\t *    transactionIndex: 0,\n\t *    from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *    to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *    value: 1,\n\t *    gas: 90000,\n\t *    gasPrice: 2000000000,\n\t *    input: '0x',\n\t *    v: 2709,\n\t *    r: '0x8b336c290f6d7b2af3ccb2c02203a8356cc7d5b150ab19cce549d55636a3a78c',\n\t *    s: '0x5a83c6f816befc5cd4b0c997a347224a8aa002e5799c4b082a3ec726d0e9531d'\n\t *  }\n\t * ```\n\t */\n\tpublic async getTransactionFromBlock<\n\t\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\n\t>(\n\t\tblock: HexString32Bytes | BlockNumberOrTag = this.defaultBlock,\n\t\ttransactionIndex: Numbers,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getTransactionFromBlock(\n\t\t\tthis,\n\t\t\tblock,\n\t\t\ttransactionIndex,\n\t\t\treturnFormat,\n\t\t);\n\t}\n\n\t/**\n\t * @param transactionHash Hash of the transaction to retrieve the receipt for.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The desired {@link TransactionReceipt} object.\n\t *\n\t * ```ts\n\t * web3.eth.getTransactionReceipt(\"0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\").then(console.log);\n\t * > {\n\t *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\n\t *      transactionIndex: 0n,\n\t *      blockNumber: 2n,\n\t *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',\n\t *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *      cumulativeGasUsed: 21000n,\n\t *      gasUsed: 21000n,\n\t *      logs: [],\n\t *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *      status: 1n,\n\t *      effectiveGasPrice: 2000000000n,\n\t *      type: 0n\n\t *  }\n\t *\n\t * web3.eth.getTransactionReceipt(\n\t *      \"0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\",\n\t *      { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * > {\n\t *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\n\t *      transactionIndex: 0,\n\t *      blockNumber: 2,\n\t *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',\n\t *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *      cumulativeGasUsed: 21000,\n\t *      gasUsed: 21000,\n\t *      logs: [],\n\t *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *      status: 1,\n\t *      effectiveGasPrice: 2000000000,\n\t *      type: 0n\n\t *  }\n\t * ```\n\t */\n\tpublic async getTransactionReceipt<\n\t\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\n\t>(\n\t\ttransactionHash: Bytes,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\tconst response = await rpcMethodsWrappers.getTransactionReceipt(\n\t\t\tthis,\n\t\t\ttransactionHash,\n\t\t\treturnFormat,\n\t\t);\n\n\t\tif (!response) throw new TransactionNotFound();\n\n\t\treturn response;\n\t}\n\n\t/**\n\t * @param address The address to get the number of transactions for.\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) Specifies what block to use as the current state for the query.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The number of transactions sent from the provided address.\n\t *\n\t * ```ts\n\t * web3.eth.getTransactionCount(\"0x407d73d8a49eeb85d32cf465507dd71d507100c1\").then(console.log);\n\t * > 1n\n\t *\n\t * web3.eth.getTransactionCount(\n\t *     \"0x407d73d8a49eeb85d32cf465507dd71d507100c1\",\n\t *     undefined,\n\t *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * > 1\n\t * ```\n\t */\n\tpublic async getTransactionCount<\n\t\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\n\t>(\n\t\taddress: Address,\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getTransactionCount(this, address, blockNumber, returnFormat);\n\t}\n\n\t/**\n\t * @param transaction The {@link Transaction}, {@link TransactionWithFromLocalWalletIndex}, {@link TransactionWithToLocalWalletIndex} or {@link TransactionWithFromAndToLocalWalletIndex} to send. __Note:__ In the `to` and `from` fields when hex strings are used, it is assumed they are addresses, for any other form (number, string number, etc.) it is assumed they are wallet indexes.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @param options A configuration object used to change the behavior of the `sendTransaction` method.\n\t * @returns If `await`ed or `.then`d (i.e. the promise resolves), the transaction hash is returned.\n\t * ```ts\n\t * const transaction = {\n\t *   from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\n\t *   to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',\n\t *   value: '0x1'\n\t * }\n\t *\n\t * const transactionReceipt = await web3.eth.sendTransaction(transaction);\n\t * console.log(transactionReceipt);\n\t * > {\n\t *      blockHash: '0x39cee0da843293ae3136cee0de4c0803745868b6e72b7cd05fba395bffa0ee85',\n\t *      blockNumber: 6659547n,\n\t *      cumulativeGasUsed: 1029036n,\n\t *      effectiveGasPrice: 6765796845n,\n\t *      from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\n\t *      gasUsed: 21000n,\n\t *      logs: [],\n\t *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *      status: 1n,\n\t *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *      transactionHash: '0x619de868dd73c07bd0c096adcd405c93c1e924fdf741e684a127a52324c28bb9',\n\t *      transactionIndex: 16n,\n\t *      type: 2n\n\t *}\n\t *\n\t * web3.eth.sendTransaction(transaction).then(console.log);\n\t * > {\n\t *      blockHash: '0x39cee0da843293ae3136cee0de4c0803745868b6e72b7cd05fba395bffa0ee85',\n\t *      blockNumber: 6659547n,\n\t *      cumulativeGasUsed: 1029036n,\n\t *      effectiveGasPrice: 6765796845n,\n\t *      from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\n\t *      gasUsed: 21000n,\n\t *      logs: [],\n\t *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *      status: 1n,\n\t *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *      transactionHash: '0x619de868dd73c07bd0c096adcd405c93c1e924fdf741e684a127a52324c28bb9',\n\t *      transactionIndex: 16n,\n\t *      type: 2n\n\t *}\n\t *\n\t * web3.eth.sendTransaction(transaction).catch(console.log);\n\t * > <Some TransactionError>\n\t *\n\t * // Example using options.ignoreGasPricing = true\n\t * web3.eth.sendTransaction(transaction, undefined, { ignoreGasPricing: true }).then(console.log);\n\t * > {\n\t *      blockHash: '0x39cee0da843293ae3136cee0de4c0803745868b6e72b7cd05fba395bffa0ee85',\n\t *      blockNumber: 6659547n,\n\t *      cumulativeGasUsed: 1029036n,\n\t *      effectiveGasPrice: 6765796845n,\n\t *      from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\n\t *      gasUsed: 21000n,\n\t *      logs: [],\n\t *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *      status: 1n,\n\t *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *      transactionHash: '0x619de868dd73c07bd0c096adcd405c93c1e924fdf741e684a127a52324c28bb9',\n\t *      transactionIndex: 16n,\n\t *      type: 2n\n\t *}\n\t * ```\n\t *\n\t *\n\t * Otherwise, a {@link Web3PromiEvent} is returned which has several events than can be listened to using the `.on` syntax, such as:\n\t * - `sending`\n\t * ```ts\n\t * web3.eth.sendTransaction(transaction).on('sending', transactionToBeSent => console.log(transactionToBeSent));\n\t * > {\n\t *      from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\n\t *      to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',\n\t *      value: '0x1',\n\t *      gasPrice: '0x77359400',\n\t *      maxPriorityFeePerGas: undefined,\n\t *      maxFeePerGas: undefined\n\t * }\n\t * ```\n\t * - `sent`\n\t * ```ts\n\t * web3.eth.sendTransaction(transaction).on('sent', sentTransaction => console.log(sentTransaction));\n\t * > {\n\t *      from: '0x6E599DA0bfF7A6598AC1224E4985430Bf16458a4',\n\t *      to: '0x6f1DF96865D09d21e8f3f9a7fbA3b17A11c7C53C',\n\t *      value: '0x1',\n\t *      gasPrice: '0x77359400',\n\t *      maxPriorityFeePerGas: undefined,\n\t *      maxFeePerGas: undefined\n\t * }\n\t * ```\n\t * - `transactionHash`\n\t * ```ts\n\t * web3.eth.sendTransaction(transaction).on('transactionHash', transactionHash => console.log(transactionHash));\n\t * > 0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f\n\t * ```\n\t * - `receipt`\n\t * ```ts\n\t * web3.eth.sendTransaction(transaction).on('receipt', receipt => console.log(receipt));\n\t * > {\n\t *      transactionHash: '0xdf7756865c2056ce34c4eabe4eff42ad251a9f920a1c620c00b4ea0988731d3f',\n\t *      transactionIndex: 0n,\n\t *      blockNumber: 2n,\n\t *      blockHash: '0xeb1565a08b23429552dafa92e32409f42eb43944f7611963c63ce40e7243941a',\n\t *      from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *      to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *      cumulativeGasUsed: 21000n,\n\t *      gasUsed: 21000n,\n\t *      logs: [],\n\t *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *      status: 1n,\n\t *      effectiveGasPrice: 2000000000n,\n\t *      type: 0n\n\t * }\n\t * ```\n\t * - `confirmation`\n\t * ```ts\n\t * web3.eth.sendTransaction(transaction).on('confirmation', confirmation => console.log(confirmation));\n\t * > {\n\t *      confirmations: 1n,\n\t *      receipt: {\n\t *         transactionHash: '0xb4a3a35ae0f3e77ef0ff7be42010d948d011b21a4e341072ee18717b67e99ab8',\n\t *         transactionIndex: 0n,\n\t *         blockNumber: 5n,\n\t *         blockHash: '0xb57fbe6f145cefd86a305a9a024a4351d15d4d39607d7af53d69a319bc3b5548',\n\t *         from: '0x6e599da0bff7a6598ac1224e4985430bf16458a4',\n\t *         to: '0x6f1df96865d09d21e8f3f9a7fba3b17a11c7c53c',\n\t *         cumulativeGasUsed: 21000n,\n\t *         gasUsed: 21000n,\n\t *         logs: [],\n\t *         logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *         status: 1n,\n\t *         effectiveGasPrice: 2000000000n,\n\t *         type: 0n\n\t *      },\n\t *      latestBlockHash: '0xb57fbe6f145cefd86a305a9a024a4351d15d4d39607d7af53d69a319bc3b5548'\n\t * }\n\t * ```\n\t * - `error`\n\t * ```ts\n\t * web3.eth.sendTransaction(transaction).on('error', error => console.log);\n\t * > <Some TransactionError>\n\t * ```\n\t */\n\tpublic sendTransaction<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\ttransaction:\n\t\t\t| Transaction\n\t\t\t| TransactionWithFromLocalWalletIndex\n\t\t\t| TransactionWithToLocalWalletIndex\n\t\t\t| TransactionWithFromAndToLocalWalletIndex,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t\toptions?: SendTransactionOptions,\n\t) {\n\t\treturn rpcMethodsWrappers.sendTransaction(\n\t\t\tthis,\n\t\t\ttransaction,\n\t\t\treturnFormat,\n\t\t\toptions,\n\t\t\tthis.transactionMiddleware,\n\t\t);\n\t}\n\n\t/**\n\t * @param transaction Signed transaction in one of the valid {@link Bytes} format.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @param options A configuration object used to change the behavior of the method\n\t * @returns If `await`ed or `.then`d (i.e. the promise resolves), the transaction hash is returned.\n\t * ```ts\n\t * const signedTransaction = \"0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f\"\n\t *\n\t * const transactionHash = await web3.eth.sendSignedTransaction(signedTransaction);\n\t * console.log(transactionHash);\n\t * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700\n\t *\n\t * web3.eth.sendSignedTransaction(signedTransaction).then(console.log);\n\t * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700\n\t *\n\t * web3.eth.sendSignedTransaction(signedTransaction).catch(console.log);\n\t * > <Some TransactionError>\n\t * ```\n\t *\n\t *\n\t * Otherwise, a {@link Web3PromiEvent} is returned which has several events than can be listened to using the `.on` syntax, such as:\n\t * - `sending`\n\t * ```ts\n\t * web3.eth.sendSignedTransaction(signedTransaction).on('sending', transactionToBeSent => console.log(transactionToBeSent));\n\t * > \"0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f\"\n\t * ```\n\t * - `sent`\n\t * ```ts\n\t * web3.eth.sendSignedTransaction(signedTransaction).on('sent', sentTransaction => console.log(sentTransaction));\n\t * > \"0xf86580843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a95a03a42d53ca5b71f845e1cd4c65359b05446a85d16881372d3bfaab8980935cb04a0711497bc8dd3b541152e2fed14fe650a647f1f0edab0d386ad9506f0e642410f\"\n\t * ```\n\t * - `transactionHash`\n\t * ```ts\n\t * web3.eth.sendSignedTransaction(signedTransaction).on('transactionHash', transactionHash => console.log(transactionHash));\n\t * > 0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700\n\t * ```\n\t * - `receipt`\n\t * ```ts\n\t * web3.eth.sendSignedTransaction(signedTransaction).on('receipt', receipt => console.log(receipt));\n\t * > {\n\t *      blockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081',\n\t *      blockNumber: 1n,\n\t *      cumulativeGasUsed: 21000n,\n\t *      effectiveGasPrice: 1000000001n,\n\t *      from: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n\t *      gasUsed: 21000n,\n\t *      logs: [],\n\t *      logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *      status: 1n,\n\t *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n\t *      transactionHash: '0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700',\n\t *      transactionIndex: 0n,\n\t *      type: 0n\n\t * }\n\t * ```\n\t * - `confirmation`\n\t * ```ts\n\t * web3.eth.sendSignedTransaction(signedTransaction).on('confirmation', confirmation => console.log(confirmation));\n\t * > {\n\t *     confirmations: 1n,\n\t *     receipt: {\n\t *          blockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081',\n\t *          blockNumber: 1n,\n\t *          cumulativeGasUsed: 21000n,\n\t *          effectiveGasPrice: 1000000001n,\n\t *          from: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n\t *          gasUsed: 21000n,\n\t *          logs: [],\n\t *          logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t *          status: 1n,\n\t *          to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n\t *          transactionHash: '0xed8c241ea44d57f4605dc22c63500de46254d6c7844fd65fa438b128c80cf700',\n\t *          transactionIndex: 0n,\n\t *          type: 0n\n\t *     },\n\t *     latestBlockHash: '0xff2b1687995d81066361bc6affe4455746120a7d4bb75fc938211a2692a50081'\n\t * }\n\t * ```\n\t * - `error`\n\t * ```ts\n\t * web3.eth.sendSignedTransaction(signedTransaction).on('error', error => console.log(error));\n\t * > <Some TransactionError>\n\t * ```\n\t */\n\tpublic sendSignedTransaction<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\ttransaction: Bytes,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t\toptions?: SendTransactionOptions,\n\t) {\n\t\treturn rpcMethodsWrappers.sendSignedTransaction(this, transaction, returnFormat, options);\n\t}\n\n\t/**\n\t * @param message Data to sign in one of the valid {@link Bytes} format.\n\t * @param address Address to sign data with, can be an address or the index of a local wallet.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns The signed `message`.\n\t *\n\t * ```ts\n\t * // Using an unlocked account managed by connected RPC client\n\t * web3.eth.sign(\"0x48656c6c6f20776f726c64\", \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\").then(console.log);\n\t * > \"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\"\n\t *\n\t * // Using an unlocked account managed by connected RPC client\n\t * web3.eth.sign(\"0x48656c6c6f20776f726c64\", \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\", { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.UINT8ARRAY }).then(console.log);\n\t * > Uint8Array(65) [\n\t *    48, 117,  94, 214,  83, 150, 250, 207, 134, 197,  62,\n\t *    98,  23, 197,  43,  77, 174, 190, 114, 170,  73,  65,\n\t *   216, 150,  53,  64, 157, 228, 201, 199, 249,  70, 109,\n\t *    78, 154, 174, 199, 151, 127,   5, 233,  35, 136, 155,\n\t *    51, 192, 208, 221,  39, 215,  34, 107, 110, 111,  86,\n\t *   206, 115, 116, 101, 197, 207, 208,  75, 228,   0\n\t * ]\n\t * ```\n\t *\n\t * // Using an indexed account managed by local Web3 wallet\n\t * web3.eth.sign(\"0x48656c6c6f20776f726c64\", 0).then(console.log);\n\t * > \"0x30755ed65396facf86c53e6217c52b4daebe72aa4941d89635409de4c9c7f9466d4e9aaec7977f05e923889b33c0d0dd27d7226b6e6f56ce737465c5cfd04be400\"\n\t */\n\tpublic async sign<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tmessage: Bytes,\n\t\taddressOrIndex: Address | number,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.sign(this, message, addressOrIndex, returnFormat);\n\t}\n\n\t/**\n\t * @param transaction The transaction object to sign.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns {@link SignedTransactionInfoAPI}, an object containing the [RLP](https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/#top) encoded signed transaction (accessed via the `raw` property) and the signed transaction object (accessed via the `tx` property).\n\t *\n\t * ```ts\n\t * const transaction = {\n\t *      from: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',\n\t *      to: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',\n\t *      value: '0x1',\n\t *      gas: '21000',\n\t *      gasPrice: await web3Eth.getGasPrice(),\n\t *      nonce: '0x1',\n\t *      type: '0x0'\n\t * }\n\t *\n\t * web3.eth.signTransaction(transaction).then(console.log);\n\t * > {\n\t *   raw: '0xf86501843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a96a0adb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679a027d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',\n\t *   tx: {\n\t *      type: 0n,\n\t *      nonce: 1n,\n\t *      gasPrice: 1000000001n,\n\t *      gas: 21000n,\n\t *      value: 1n,\n\t *      v: 2710n,\n\t *      r: '0xadb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679',\n\t *      s: '0x27d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',\n\t *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n\t *      data: '0x'\n\t *   }\n\t * }\n\t *\n\t * web3.eth.signTransaction(transaction, { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > {\n\t *   raw: '0xf86501843b9aca0182520894e899f0130fd099c0b896b2ce4e5e15a25b23139a0180820a96a0adb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679a027d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',\n\t *   tx: {\n\t *      type: 0,\n\t *      nonce: 1,\n\t *      gasPrice: 1000000001,\n\t *      gas: 21000,\n\t *      value: 1,\n\t *      v: 2710,\n\t *      r: '0xadb3468dbb4dce89fe1785ea9182e85fb56b399b378f82b93af7a8a12a4f9679',\n\t *      s: '0x27d37d736e9bcf00121f78b2d10e4404fa5c45856d62b746574345f5cd278097',\n\t *      to: '0xe899f0130fd099c0b896b2ce4e5e15a25b23139a',\n\t *      data: '0x'\n\t *   }\n\t * }\n\t * ```\n\t */\n\tpublic async signTransaction<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\ttransaction: Transaction,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.signTransaction(this, transaction, returnFormat);\n\t}\n\n\t// TODO Decide what to do with transaction.to\n\t// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n\t/**\n\t * Executes a message call within the EVM without creating a transaction.\n\t * It does not publish anything to the blockchain and does not consume any gas.\n\t *\n\t * @param transaction - A transaction object where all properties are optional except `to`, however it's recommended to include the `from` property or it may default to `0x0000000000000000000000000000000000000000` depending on your node or provider.\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the transaction.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n\t * @returns The returned data of the call, e.g. a smart contract function's return value.\n\t */\n\tpublic async call<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\ttransaction: TransactionCall,\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.call(this, transaction, blockNumber, returnFormat);\n\t}\n\n\t/**\n\t * Simulates the transaction within the EVM to estimate the amount of gas to be used by the transaction.\n\t * The transaction will not be added to the blockchain, and actual gas usage can vary when interacting\n\t * with a contract as a result of updating the contract's state.\n\t *\n\t * @param transaction The {@link Transaction} object to estimate the gas for.\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the gas estimation.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n\t * @returns The used gas for the simulated transaction execution.\n\t *\n\t * ```ts\n\t * const transaction = {\n\t *       from: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',\n\t *       to: '0xe899f0130FD099c0b896B2cE4E5E15A25b23139a',\n\t *       value: '0x1',\n\t *       nonce: '0x1',\n\t *       type: '0x0'\n\t * }\n\t *\n\t * web3.eth.estimateGas(transaction).then(console.log);\n\t * > 21000n\n\t *\n\t * web3.eth.estimateGas(transaction, { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > 21000\n\t * ```\n\t */\n\tpublic async estimateGas<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\ttransaction: Transaction,\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.estimateGas(this, transaction, blockNumber, returnFormat);\n\t}\n\n\t/**\n\t * Gets past logs, matching the provided `filter`.\n\t *\n\t * @param filter A {@link Filter} object containing the properties for the desired logs.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n\t * @returns {@link FilterResultsAPI}, an array of {@link Log} objects.\n\t *\n\t * ```ts\n\t * web3.eth.getPastLogs({\n\t *      address: \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\",\n\t *      topics: [\"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\"]\n\t *  }).then(console.log);\n\t * > [{\n\t *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\n\t *       logIndex: 0n,\n\t *       transactionIndex: 0n,\n\t *       transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *       blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n\t *       blockNumber: 1234n,\n\t *       address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\n\t *   },\n\t *   {...}]\n\t *\n\t * web3.eth.getPastLogs(\n\t *     {\n\t *       address: \"0x11f4d0A3c12e86B4b5F39B213F7E19D048276DAe\",\n\t *       topics: [\"0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234\"]\n\t *     },\n\t *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * > [{\n\t *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\n\t *       logIndex: 0,\n\t *       transactionIndex: 0,\n\t *       transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *       blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n\t *       blockNumber: 1234,\n\t *       address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\n\t *   },\n\t *   {...}]\n\t * ```\n\t */\n\tpublic async getPastLogs<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tfilter: Filter,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getLogs(this, filter, returnFormat);\n\t}\n\n\t/**\n\t * Gets work for miners to mine on. Returns the hash of the current block, the seedHash, and the boundary condition to be met ('target').\n\t *\n\t * @returns The mining work as an array of strings with the following structure:\n\t *\n\t * String 32 Bytes - at index 0: current block header pow-hash\n\t * String 32 Bytes - at index 1: the seed hash used for the DAG.\n\t * String 32 Bytes - at index 2: the boundary condition ('target'), 2^256 / difficulty.\n\t *\n\t * ```ts\n\t * web3.eth.getWork().then(console.log);\n\t * > [\n\t *     \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n\t *     \"0x5EED00000000000000000000000000005EED0000000000000000000000000000\",\n\t *     \"0xd1ff1c01710000000000000000000000d1ff1c01710000000000000000000000\"\n\t * ]\n\t * ```\n\t */\n\tpublic async getWork() {\n\t\treturn ethRpcMethods.getWork(this.requestManager);\n\t}\n\n\t/**\n\t * Used for submitting a proof-of-work solution.\n\t *\n\t * @param nonce The nonce found (8 bytes).\n\t * @param hash  The header’s pow-hash (32 bytes).\n\t * @param digest The mix digest (32 bytes).\n\t * @returns Returns `true` if the provided solution is valid, otherwise `false`.\n\t *\n\t * ```ts\n\t * web3.eth.submitWork([\n\t *     \"0x0000000000000001\",\n\t *     \"0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\",\n\t *     \"0xD1FE5700000000000000000000000000D1FE5700000000000000000000000000\"\n\t * ]).then(console.log);\n\t * > true\n\t * ```\n\t */\n\tpublic async submitWork(\n\t\tnonce: HexString8Bytes,\n\t\thash: HexString32Bytes,\n\t\tdigest: HexString32Bytes,\n\t) {\n\t\treturn ethRpcMethods.submitWork(this.requestManager, nonce, hash, digest);\n\t}\n\n\t// TODO - Format addresses\n\t/**\n\t * This method will request/enable the accounts from the current environment and for supporting [EIP 1102](https://eips.ethereum.org/EIPS/eip-1102)\n\t * This method will only work if you’re using the injected provider from a application like Metamask, Status or TrustWallet.\n\t * It doesn’t work if you’re connected to a node with a default Web3.js provider (WebsocketProvider, HttpProvider and IpcProvider).\n\t * For more information about the behavior of this method please read [EIP-1102](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1102.md): Opt-in account exposure.\n\t *\n\t * @returns An array of enabled accounts.\n\t *\n\t * ```ts\n\t * web3.eth.requestAccounts().then(console.log);\n\t * > ['0aae0B295369a9FD31d5F28D9Ec85E40f4cb692BAf', '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe']\n\t * ```\n\t */\n\tpublic async requestAccounts() {\n\t\treturn ethRpcMethods.requestAccounts(this.requestManager);\n\t}\n\n\t/**\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n\t * @returns The chain ID of the current connected node as described in the [EIP-695](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-695.md).\n\t *\n\t * ```ts\n\t * web3.eth.getChainId().then(console.log);\n\t * > 61n\n\t *\n\t * web3.eth.getChainId({ number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > 61\n\t * ```\n\t */\n\tpublic async getChainId<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getChainId(this, returnFormat);\n\t}\n\n\t/**\n\t * @returns The current client version.\n\t *\n\t * ```ts\n\t * web3.eth.getNodeInfo().then(console.log);\n\t * > \"Mist/v0.9.3/darwin/go1.4.1\"\n\t * ```\n\t */\n\tpublic async getNodeInfo() {\n\t\treturn ethRpcMethods.getNodeInfo(this.requestManager);\n\t}\n\n\t/**\n\t * @param address The Address of the account or contract.\n\t * @param storageKeys Array of storage-keys which should be proofed and included. See {@link web3.getStorageAt}.\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the gas estimation.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n\t * @returns The account and storage-values of the specified account including the Merkle-proof as described in [EIP-1186](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1186.md).\n\t *\n\t * ```ts\n\t * web3.eth.getProof(\n\t *     \"0x1234567890123456789012345678901234567890\",\n\t *     [\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000000000000000000000000001\"],\n\t *     \"latest\"\n\t * ).then(console.log);\n\t * > {\n\t *     \"address\": \"0x1234567890123456789012345678901234567890\",\n\t *     \"accountProof\": [\n\t *         \"0xf90211a090dcaf88c40c7bbc95a912cbdde67c175767b31173df9ee4b0d733bfdd511c43a0babe369f6b12092f49181ae04ca173fb68d1a5456f18d20fa32cba73954052bda0473ecf8a7e36a829e75039a3b055e51b8332cbf03324ab4af2066bbd6fbf0021a0bbda34753d7aa6c38e603f360244e8f59611921d9e1f128372fec0d586d4f9e0a04e44caecff45c9891f74f6a2156735886eedf6f1a733628ebc802ec79d844648a0a5f3f2f7542148c973977c8a1e154c4300fec92f755f7846f1b734d3ab1d90e7a0e823850f50bf72baae9d1733a36a444ab65d0a6faaba404f0583ce0ca4dad92da0f7a00cbe7d4b30b11faea3ae61b7f1f2b315b61d9f6bd68bfe587ad0eeceb721a07117ef9fc932f1a88e908eaead8565c19b5645dc9e5b1b6e841c5edbdfd71681a069eb2de283f32c11f859d7bcf93da23990d3e662935ed4d6b39ce3673ec84472a0203d26456312bbc4da5cd293b75b840fc5045e493d6f904d180823ec22bfed8ea09287b5c21f2254af4e64fca76acc5cd87399c7f1ede818db4326c98ce2dc2208a06fc2d754e304c48ce6a517753c62b1a9c1d5925b89707486d7fc08919e0a94eca07b1c54f15e299bd58bdfef9741538c7828b5d7d11a489f9c20d052b3471df475a051f9dd3739a927c89e357580a4c97b40234aa01ed3d5e0390dc982a7975880a0a089d613f26159af43616fd9455bb461f4869bfede26f2130835ed067a8b967bfb80\",\n\t *         \"0xf90211a0395d87a95873cd98c21cf1df9421af03f7247880a2554e20738eec2c7507a494a0bcf6546339a1e7e14eb8fb572a968d217d2a0d1f3bc4257b22ef5333e9e4433ca012ae12498af8b2752c99efce07f3feef8ec910493be749acd63822c3558e6671a0dbf51303afdc36fc0c2d68a9bb05dab4f4917e7531e4a37ab0a153472d1b86e2a0ae90b50f067d9a2244e3d975233c0a0558c39ee152969f6678790abf773a9621a01d65cd682cc1be7c5e38d8da5c942e0a73eeaef10f387340a40a106699d494c3a06163b53d956c55544390c13634ea9aa75309f4fd866f312586942daf0f60fb37a058a52c1e858b1382a8893eb9c1f111f266eb9e21e6137aff0dddea243a567000a037b4b100761e02de63ea5f1fcfcf43e81a372dafb4419d126342136d329b7a7ba032472415864b08f808ba4374092003c8d7c40a9f7f9fe9cc8291f62538e1cc14a074e238ff5ec96b810364515551344100138916594d6af966170ff326a092fab0a0d31ac4eef14a79845200a496662e92186ca8b55e29ed0f9f59dbc6b521b116fea090607784fe738458b63c1942bba7c0321ae77e18df4961b2bc66727ea996464ea078f757653c1b63f72aff3dcc3f2a2e4c8cb4a9d36d1117c742833c84e20de994a0f78407de07f4b4cb4f899dfb95eedeb4049aeb5fc1635d65cf2f2f4dfd25d1d7a0862037513ba9d45354dd3e36264aceb2b862ac79d2050f14c95657e43a51b85c80\",\n\t *         \"0xf90171a04ad705ea7bf04339fa36b124fa221379bd5a38ffe9a6112cb2d94be3a437b879a08e45b5f72e8149c01efcb71429841d6a8879d4bbe27335604a5bff8dfdf85dcea00313d9b2f7c03733d6549ea3b810e5262ed844ea12f70993d87d3e0f04e3979ea0b59e3cdd6750fa8b15164612a5cb6567cdfb386d4e0137fccee5f35ab55d0efda0fe6db56e42f2057a071c980a778d9a0b61038f269dd74a0e90155b3f40f14364a08538587f2378a0849f9608942cf481da4120c360f8391bbcc225d811823c6432a026eac94e755534e16f9552e73025d6d9c30d1d7682a4cb5bd7741ddabfd48c50a041557da9a74ca68da793e743e81e2029b2835e1cc16e9e25bd0c1e89d4ccad6980a041dda0a40a21ade3a20fcd1a4abb2a42b74e9a32b02424ff8db4ea708a5e0fb9a09aaf8326a51f613607a8685f57458329b41e938bb761131a5747e066b81a0a16808080a022e6cef138e16d2272ef58434ddf49260dc1de1f8ad6dfca3da5d2a92aaaadc58080\",\n\t *         \"0xf851808080a009833150c367df138f1538689984b8a84fc55692d3d41fe4d1e5720ff5483a6980808080808080808080a0a319c1c415b271afc0adcb664e67738d103ac168e0bc0b7bd2da7966165cb9518080\"\n\t *     ],\n\t *     \"balance\": 0n,\n\t *     \"codeHash\": \"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\",\n\t *     \"nonce\": 0n,\n\t *     \"storageHash\": \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\n\t *     \"storageProof\": [\n\t *         {\n\t *             \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n\t *             \"value\": 0n,\n\t *             \"proof\": []\n\t *         },\n\t *         {\n\t *             \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000001\",\n\t *             \"value\": 0n,\n\t *             \"proof\": []\n\t *         }\n\t *     ]\n\t * }\n\t *\n\t * web3.eth.getProof(\n\t *     \"0x1234567890123456789012345678901234567890\",\n\t *     [\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"0x0000000000000000000000000000000000000000000000000000000000000001\"],\n\t *     undefined,\n\t *     { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }\n\t * ).then(console.log);\n\t * > {\n\t *     \"address\": \"0x1234567890123456789012345678901234567890\",\n\t *     \"accountProof\": [\n\t *         \"0xf90211a090dcaf88c40c7bbc95a912cbdde67c175767b31173df9ee4b0d733bfdd511c43a0babe369f6b12092f49181ae04ca173fb68d1a5456f18d20fa32cba73954052bda0473ecf8a7e36a829e75039a3b055e51b8332cbf03324ab4af2066bbd6fbf0021a0bbda34753d7aa6c38e603f360244e8f59611921d9e1f128372fec0d586d4f9e0a04e44caecff45c9891f74f6a2156735886eedf6f1a733628ebc802ec79d844648a0a5f3f2f7542148c973977c8a1e154c4300fec92f755f7846f1b734d3ab1d90e7a0e823850f50bf72baae9d1733a36a444ab65d0a6faaba404f0583ce0ca4dad92da0f7a00cbe7d4b30b11faea3ae61b7f1f2b315b61d9f6bd68bfe587ad0eeceb721a07117ef9fc932f1a88e908eaead8565c19b5645dc9e5b1b6e841c5edbdfd71681a069eb2de283f32c11f859d7bcf93da23990d3e662935ed4d6b39ce3673ec84472a0203d26456312bbc4da5cd293b75b840fc5045e493d6f904d180823ec22bfed8ea09287b5c21f2254af4e64fca76acc5cd87399c7f1ede818db4326c98ce2dc2208a06fc2d754e304c48ce6a517753c62b1a9c1d5925b89707486d7fc08919e0a94eca07b1c54f15e299bd58bdfef9741538c7828b5d7d11a489f9c20d052b3471df475a051f9dd3739a927c89e357580a4c97b40234aa01ed3d5e0390dc982a7975880a0a089d613f26159af43616fd9455bb461f4869bfede26f2130835ed067a8b967bfb80\",\n\t *         \"0xf90211a0395d87a95873cd98c21cf1df9421af03f7247880a2554e20738eec2c7507a494a0bcf6546339a1e7e14eb8fb572a968d217d2a0d1f3bc4257b22ef5333e9e4433ca012ae12498af8b2752c99efce07f3feef8ec910493be749acd63822c3558e6671a0dbf51303afdc36fc0c2d68a9bb05dab4f4917e7531e4a37ab0a153472d1b86e2a0ae90b50f067d9a2244e3d975233c0a0558c39ee152969f6678790abf773a9621a01d65cd682cc1be7c5e38d8da5c942e0a73eeaef10f387340a40a106699d494c3a06163b53d956c55544390c13634ea9aa75309f4fd866f312586942daf0f60fb37a058a52c1e858b1382a8893eb9c1f111f266eb9e21e6137aff0dddea243a567000a037b4b100761e02de63ea5f1fcfcf43e81a372dafb4419d126342136d329b7a7ba032472415864b08f808ba4374092003c8d7c40a9f7f9fe9cc8291f62538e1cc14a074e238ff5ec96b810364515551344100138916594d6af966170ff326a092fab0a0d31ac4eef14a79845200a496662e92186ca8b55e29ed0f9f59dbc6b521b116fea090607784fe738458b63c1942bba7c0321ae77e18df4961b2bc66727ea996464ea078f757653c1b63f72aff3dcc3f2a2e4c8cb4a9d36d1117c742833c84e20de994a0f78407de07f4b4cb4f899dfb95eedeb4049aeb5fc1635d65cf2f2f4dfd25d1d7a0862037513ba9d45354dd3e36264aceb2b862ac79d2050f14c95657e43a51b85c80\",\n\t *         \"0xf90171a04ad705ea7bf04339fa36b124fa221379bd5a38ffe9a6112cb2d94be3a437b879a08e45b5f72e8149c01efcb71429841d6a8879d4bbe27335604a5bff8dfdf85dcea00313d9b2f7c03733d6549ea3b810e5262ed844ea12f70993d87d3e0f04e3979ea0b59e3cdd6750fa8b15164612a5cb6567cdfb386d4e0137fccee5f35ab55d0efda0fe6db56e42f2057a071c980a778d9a0b61038f269dd74a0e90155b3f40f14364a08538587f2378a0849f9608942cf481da4120c360f8391bbcc225d811823c6432a026eac94e755534e16f9552e73025d6d9c30d1d7682a4cb5bd7741ddabfd48c50a041557da9a74ca68da793e743e81e2029b2835e1cc16e9e25bd0c1e89d4ccad6980a041dda0a40a21ade3a20fcd1a4abb2a42b74e9a32b02424ff8db4ea708a5e0fb9a09aaf8326a51f613607a8685f57458329b41e938bb761131a5747e066b81a0a16808080a022e6cef138e16d2272ef58434ddf49260dc1de1f8ad6dfca3da5d2a92aaaadc58080\",\n\t *         \"0xf851808080a009833150c367df138f1538689984b8a84fc55692d3d41fe4d1e5720ff5483a6980808080808080808080a0a319c1c415b271afc0adcb664e67738d103ac168e0bc0b7bd2da7966165cb9518080\"\n\t *     ],\n\t *     \"balance\": 0,\n\t *     \"codeHash\": \"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\",\n\t *     \"nonce\": 0,\n\t *     \"storageHash\": \"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\n\t *     \"storageProof\": [\n\t *         {\n\t *             \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n\t *             \"value\": 0,\n\t *             \"proof\": []\n\t *         },\n\t *         {\n\t *             \"key\": \"0x0000000000000000000000000000000000000000000000000000000000000001\",\n\t *             \"value\": 0,\n\t *             \"proof\": []\n\t *         }\n\t *     ]\n\t * }\n\t * ```\n\t */\n\tpublic async getProof<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\taddress: Address,\n\t\tstorageKeys: Bytes[],\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getProof(this, address, storageKeys, blockNumber, returnFormat);\n\t}\n\n\t// TODO Throwing an error with Geth, but not Infura\n\t// TODO gasUsedRatio and reward not formatting\n\t/**\n\t * @param blockCount Number of blocks in the requested range. Between `1` and `1024` blocks can be requested in a single query. Less than requested may be returned if not all blocks are available.\n\t * @param newestBlock Highest number block of the requested range.\n\t * @param rewardPercentiles A monotonically increasing list of percentile values to sample from each block’s effective priority fees per gas in ascending order, weighted by gas used. Example: `['0', '25', '50', '75', '100']` or `['0', '0.5', '1', '1.5', '3', '80']`\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n\t * @returns `baseFeePerGas` and transaction effective `priorityFeePerGas` history for the requested block range if available.\n\t * The range between `headBlock - 4` and `headBlock` is guaranteed to be available while retrieving data from the `pending` block and older history are optional to support.\n\t * For pre-EIP-1559 blocks the `gasPrice`s are returned as `rewards` and zeroes are returned for the `baseFeePerGas`.\n\t *\n\t * ```ts\n\t * web3.eth.getFeeHistory(4, 'pending', [0, 25, 75, 100]).then(console.log);\n\t * > {\n\t *     baseFeePerGas: [\n\t *         22983878621n,\n\t *         21417903463n,\n\t *         19989260230n,\n\t *         17770954829n,\n\t *         18850641304n\n\t *     ],\n\t *     gasUsedRatio: [\n\t *         0.22746546666666667,\n\t *         0.2331871,\n\t *         0.05610054885262125,\n\t *         0.7430227268212117\n\t *     ],\n\t *     oldestBlock: 15216343n,\n\t *     reward: [\n\t *         [ '0x3b9aca00', '0x53724e00', '0x77359400', '0x1d92c03423' ],\n\t *         [ '0x3b9aca00', '0x3b9aca00', '0x3b9aca00', '0xee6b2800' ],\n\t *         [ '0x3b9aca00', '0x4f86a721', '0x77d9743a', '0x9502f900' ],\n\t *         [ '0xcc8ff9e', '0x53724e00', '0x77359400', '0x1ec9771bb3' ]\n\t *     ]\n\t * }\n\t *\n\t * web3.eth.getFeeHistory(4, BlockTags.LATEST, [0, 25, 75, 100], { number: FMT_NUMBER.NUMBER , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > {\n\t *     baseFeePerGas: [\n\t *         22983878621,\n\t *         21417903463,\n\t *         19989260230,\n\t *         17770954829,\n\t *         18850641304\n\t *     ],\n\t *     gasUsedRatio: [\n\t *         0.22746546666666667,\n\t *         0.2331871,\n\t *         0.05610054885262125,\n\t *         0.7430227268212117\n\t *     ],\n\t *     oldestBlock: 15216343,\n\t *     reward: [\n\t *         [ '0x3b9aca00', '0x53724e00', '0x77359400', '0x1d92c03423' ],\n\t *         [ '0x3b9aca00', '0x3b9aca00', '0x3b9aca00', '0xee6b2800' ],\n\t *         [ '0x3b9aca00', '0x4f86a721', '0x77d9743a', '0x9502f900' ],\n\t *         [ '0xcc8ff9e', '0x53724e00', '0x77359400', '0x1ec9771bb3' ]\n\t *     ]\n\t * }\n\t * ```\n\t */\n\tpublic async getFeeHistory<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tblockCount: Numbers,\n\t\tnewestBlock: BlockNumberOrTag = this.defaultBlock,\n\t\trewardPercentiles: Numbers[],\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.getFeeHistory(\n\t\t\tthis,\n\t\t\tblockCount,\n\t\t\tnewestBlock,\n\t\t\trewardPercentiles,\n\t\t\treturnFormat,\n\t\t);\n\t}\n\n\t/**\n\t * This method generates an access list for a transaction.\n\t *\n\t * @param transaction - A transaction object where all properties are optional except `from`, however it's recommended to include the `to` property.\n\t * @param blockNumber ({@link BlockNumberOrTag} defaults to {@link Web3Eth.defaultBlock}) - Specifies what block to use as the current state of the blockchain while processing the transaction.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the createAccessList should be formatted.\n\t * @returns The returned data of the createAccessList,  e.g. The generated access list for transaction.\n\t * @example\n\t * ```ts\n\t * web3.eth.createAccessList({\n\t * from: '0xDe95305a63302C3aa4d3A9B42654659AeA72b694',\n\t * data: '0x9a67c8b100000000000000000000000000000000000000000000000000000000000004d0',\n\t * gasPrice: '0x3b9aca00',\n\t * gas: '0x3d0900',\n\t * to: '0x940b25304947ae863568B3804434EC77E2160b87'\n\t * })\n\t * .then(console.log);\n\t *\n\t * > {\n\t *  \"accessList\": [\n\t *     {\n\t *       \"address\": \"0x15859bdf5aff2080a9968f6a410361e9598df62f\",\n\t *       \"storageKeys\": [\n\t *         \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n\t *       ]\n\t *     }\n\t *   ],\n\t *   \"gasUsed\": \"0x7671\"\n\t * }\n\t * ```\n\t */\n\tpublic async createAccessList<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\ttransaction: TransactionForAccessList,\n\t\tblockNumber: BlockNumberOrTag = this.defaultBlock,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.createAccessList(this, transaction, blockNumber, returnFormat);\n\t}\n\n\t/**\n\t * This method sends EIP-712 typed data to the RPC provider to be signed.\n\t *\n\t * @param address The address that corresponds with the private key used to sign the typed data.\n\t * @param typedData The EIP-712 typed data object.\n\t * @param useLegacy A boolean flag determining whether the RPC call uses the legacy method `eth_signTypedData` or the newer method `eth_signTypedData_v4`\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the signed typed data should be formatted.\n\t * @returns The signed typed data.\n\t */\n\tpublic async signTypedData<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\taddress: Address,\n\t\ttypedData: Eip712TypedData,\n\t\tuseLegacy = false,\n\t\treturnFormat: ReturnFormat = (this.defaultReturnFormat ??\n\t\t\tDEFAULT_RETURN_FORMAT) as ReturnFormat,\n\t) {\n\t\treturn rpcMethodsWrappers.signTypedData(this, address, typedData, useLegacy, returnFormat);\n\t}\n\n\t/**\n\t * Lets you subscribe to specific events in the blockchain.\n\t *\n\t * @param name - The subscription you want to subscribe to.\n\t * @param args - Optional additional parameters, depending on the subscription type.\n\t * @returns A subscription object of type {@link RegisteredSubscription}. The object contains:\n\t *  - subscription.id: The subscription id, used to identify and unsubscribing the subscription.\n\t *  - subscription.subscribe(): Can be used to re-subscribe with the same parameters.\n\t *  - subscription.unsubscribe(): Unsubscribes the subscription and returns TRUE in the callback if successful.\n\t *  - subscription.args: The subscription arguments, used when re-subscribing.\n\t *\n\t *\n\t * You can use the subscription object to listen on:\n\t *\n\t * - on(\"data\") - Fires on each incoming log with the log object as argument.\n\t * - on(\"changed\") - Fires on each log which was removed from the blockchain. The log will have the additional property \"removed: true\".\n\t * - on(\"error\") - Fires when an error in the subscription occurs.\n\t * - on(\"connected\") - Fires once after the subscription successfully connected. Returns the subscription id.\n\t *\n\t * @example **Subscribe to Smart Contract events**\n\t * ```ts\n\t * // Subscribe to `logs`\n\t * const logSubscription = web3.eth.subscribe('logs', {\n\t *     address: '0x1234567890123456789012345678901234567890',\n\t *     topics: ['0x033456732123ffff2342342dd12342434324234234fd234fd23fd4f23d4234']\n\t * });\n\t * logSubscription.on('data', (data: any) => console.log(data));\n\t * logSubscription.on('error', (error: any) => console.log(error));\n\t *\n\t * ```\n\t *\n\t * @example **Subscribe to new block headers**\n\t * ```ts\n\t * // Subscribe to `newBlockHeaders`\n\t * const newBlocksSubscription = await web3.eth.subscribe('newBlockHeaders');\n\t *\n\t * newBlocksSubscription.on('data', async blockhead => {\n\t * \tconsole.log('New block header: ', blockhead);\n\t *\n\t * \t// You do not need the next line, if you like to keep notified for every new block\n\t * \tawait newBlocksSubscription.unsubscribe();\n\t * \tconsole.log('Unsubscribed from new block headers.');\n\t * });\n\t * newBlocksSubscription.on('error', error =>\n\t * \tconsole.log('Error when subscribing to New block header: ', error),\n\t * );\n\t * ```\n\t *\n\t * \t### subscribe('pendingTransactions')\n\t *\n\t * Subscribes to incoming pending transactions.\n\t * You can subscribe to pending transactions by calling web3.eth.subscribe('pendingTransactions').\n\t *\n\t * ```ts\n\t * (await web3.eth.subscribe('pendingTransactions')).on('data', console.log);\n\t * ```\n\t *\n\t * ### subscribe('newHeads')\n\t * ( same as subscribe('newBlockHeaders'))\n\t * Subscribes to incoming block headers. This can be used as timer to check for changes on the blockchain.\n\t *\n\t * The structure of a returned block header is {@link BlockHeaderOutput}:\n\t *\n\t * ```ts\n\t * (await web3.eth.subscribe('newHeads')).on( // 'newBlockHeaders' would work as well\n\t *  'data',\n\t * console.log\n\t * );\n\t * >{\n\t * parentHash: '0x9e746a1d906b299def98c75b06f714d62dacadd567c7515d76eeaa8c8074c738',\n\t * sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n\t * miner: '0x0000000000000000000000000000000000000000',\n\t * stateRoot: '0xe0f04b04861ecfa95e82a9310d6a7ef7aef8d7417f5209c182582bfb98a8e307',\n\t * transactionsRoot: '0x31ab4ea571a9e10d3a19aaed07d190595b1dfa34e03960c04293fec565dea536',\n\t * logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n\t * difficulty: 2n,\n\t * number: 21n,\n\t * gasLimit: 11738125n,\n\t * gasUsed: 830006n,\n\t * timestamp: 1678797237n,\n\t * extraData: '0xd883010b02846765746888676f312e32302e31856c696e757800000000000000e0a6e93cf40e2e71a72e493272210c3f43738ccc7e7d7b14ffd51833797d896c09117e8dc4fbcbc969bd21b42e5af3e276a911524038c001b2109b63b8e0352601',\n\t * nonce: 0n\n\t * }\n\t * ```\n\t *\n\t * ### subscribe('syncing')\n\t * Subscribe to syncing events. This will return `true` when the node is syncing and when it’s finished syncing will return `false`, for the `changed` event.\n\t *\n\t * ```ts\n\t * (await web3.eth.subscribe('syncing')).on('changed', console.log);\n\t * > `true` // when syncing\n\t *\n\t * (await web3.eth.subscribe('syncing')).on('data', console.log);\n\t * > {\n\t *      startingBlock: 0,\n\t *      currentBlock: 0,\n\t *      highestBlock: 0,\n\t *      pulledStates: 0,\n\t *      knownStates: 0\n\t *   }\n\t * ```\n\t *\n\t * ### subscribe('logs', options)\n\t * Subscribes to incoming logs, filtered by the given options. If a valid numerical fromBlock options property is set, web3.js will retrieve logs beginning from this point, backfilling the response as necessary.\n\t *\n\t * options: You can subscribe to logs matching a given filter object, which can take the following parameters:\n\t * - `fromBlock`: (optional, default: 'latest') Integer block number, or `'latest'` for the last mined block or `'pending'`, `'earliest'` for not yet mined transactions.\n\t * - `address`: (optional) Contract address or a list of addresses from which logs should originate.\n\t * - `topics`: (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with `or` options.\n\t *\n\t * ```ts\n\t *  (await web3.eth.subscribe('logs', {\n\t *    address: '0xdac17f958d2ee523a2206206994597c13d831ec7',\n\t *   })).on('data', console.log);\n\t *\n\t * > {\n\t * removed: false,\n\t * logIndex: 119n,\n\t * transactionIndex: 58n,\n\t * transactionHash: '0x61533efa77937360215069d5d6cb0be09a22af9721e6dc3df59d957833ed8870',\n\t * blockHash: '0xe32bb97084479d32247f66f8b46d00af2fbc3c2db2bc6e5843fe2e4d1ca9b099',\n\t * blockNumber: 18771966n,\n\t * address: '0xdac17f958d2ee523a2206206994597c13d831ec7',\n\t * data: '0x00000000000000000000000000000000000000000000000000000000d88b2e40',\n\t * topics: [\n\t * '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',\n\t * '0x0000000000000000000000002fb2457f6ec1865dc0d4e7300c696b69c2a1b989',\n\t * '0x00000000000000000000000027fd43babfbe83a81d14665b1a6fb8030a60c9b4'\n\t * ]\n\t * }\n\t *```\n\t */\n\n\tpublic async subscribe<\n\t\tT extends keyof RegisteredSubscription,\n\t\tReturnType extends DataFormat = DataFormat,\n\t>(\n\t\tname: T,\n\t\targs?: ConstructorParameters<RegisteredSubscription[T]>[0],\n\t\treturnFormat: ReturnType = (this.defaultReturnFormat ??\n\t\t\tDEFAULT_RETURN_FORMAT) as ReturnType,\n\t): Promise<InstanceType<RegisteredSubscription[T]>> {\n\t\tconst subscription = await this.subscriptionManager?.subscribe(name, args, returnFormat);\n\t\tif (\n\t\t\tsubscription instanceof LogsSubscription &&\n\t\t\tname === 'logs' &&\n\t\t\ttypeof args === 'object' &&\n\t\t\t!isNullish((args as { fromBlock?: BlockNumberOrTag }).fromBlock) &&\n\t\t\tNumber.isFinite(Number((args as { fromBlock?: BlockNumberOrTag }).fromBlock))\n\t\t) {\n\t\t\tsetImmediate(() => {\n\t\t\t\tthis.getPastLogs(args)\n\t\t\t\t\t.then(logs => {\n\t\t\t\t\t\tfor (const log of logs) {\n\t\t\t\t\t\t\tsubscription._processSubscriptionResult(log as LogsOutput);\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.catch(e => {\n\t\t\t\t\t\tsubscription._processSubscriptionError(e as Error);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\treturn subscription;\n\t}\n\n\tprivate static shouldClearSubscription({ sub }: { sub: unknown }): boolean {\n\t\treturn !(sub instanceof SyncingSubscription);\n\t}\n\n\t/**\n\t * Resets subscriptions.\n\t *\n\t * @param notClearSyncing If `true` it keeps the `syncing` subscription.\n\t * @returns A promise to an array of subscription ids that were cleared.\n\t *\n\t * ```ts\n\t * web3.eth.clearSubscriptions().then(console.log);\n\t * > [...] An array of subscription ids that were cleared\n\t * ```\n\t */\n\tpublic clearSubscriptions(notClearSyncing = false): Promise<string[]> | undefined {\n\t\treturn this.subscriptionManager?.unsubscribe(\n\t\t\t// eslint-disable-next-line\n\t\t\tnotClearSyncing ? Web3Eth.shouldClearSubscription : undefined,\n\t\t);\n\t}\n\n\t/**\n\t * Creates a filter in the node, to notify when new pending transactions arrive. To check if the state has changed.\n\t *\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns A filter id.\n\t *\n\t * ```ts\n\t * web3.eth.createNewPendingTransactionFilter().then(console.log);\n\t * > 1n\n\t *\n\t * web3.eth.createNewPendingTransactionFilter({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > \"0x1\"\n\t * ```\n\t */\n\tpublic async createNewPendingTransactionFilter<\n\t\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\n\t>(returnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat) {\n\t\treturn filteringRpcMethodsWrappers.createNewPendingTransactionFilter(this, returnFormat);\n\t}\n\n\t/**\n\t * Creates a filter object, based on filter options, to notify when the state changes (logs)\n\t *\n\t * @param filter A {@link FilterParams} object containing the filter properties.\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns A filter id.\n\t *\n\t * ```ts\n\t * web3.eth.createNewFilter(filterParams).then(console.log);\n\t * > 1n\n\t *\n\t * web3.eth.createNewFilter(filterParams, { number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > \"0x1\"\n\t * ```\n\t */\n\tpublic async createNewFilter<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tfilter: FilterParams,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn filteringRpcMethodsWrappers.createNewFilter(this, filter, returnFormat);\n\t}\n\n\t/**\n\t * Creates a filter in the node, to notify when a new block arrives.\n\t *\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) Specifies how the return data should be formatted.\n\t * @returns A filter id.\n\t *\n\t * ```ts\n\t * web3.eth.createNewBlockFilter().then(console.log);\n\t * > 1n\n\t *\n\t * web3.eth.createNewBlockFilter({ number: FMT_NUMBER.HEX , bytes: FMT_BYTES.HEX }).then(console.log);\n\t * > \"0x1\"\n\t * ```\n\t */\n\tpublic async createNewBlockFilter<\n\t\tReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT,\n\t>(returnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat) {\n\t\treturn filteringRpcMethodsWrappers.createNewBlockFilter(this, returnFormat);\n\t}\n\n\t/**\n\t * Uninstalls a filter with given id. Should always be called when watch is no longer needed.\n\t *\n\t * @param filterIdentifier ({@link Numbers} filter id\n\t * @returns true if the filter was successfully uninstalled, otherwise false.\n\t *\n\t * ```ts\n\t * web3.eth.uninstallFilter(123).then(console.log);\n\t * > true\n\t *\n\t * web3.eth.uninstallFilter('0x123').then(console.log);\n\t * > true\n\t *\n\t * web3.eth.uninstallFilter(12n).then(console.log);\n\t * > true\n\t * ```\n\t */\n\tpublic async uninstallFilter(filterIdentifier: Numbers) {\n\t\treturn filteringRpcMethodsWrappers.uninstallFilter(this, filterIdentifier);\n\t}\n\n\t/**\n\t *  Polling method for a filter, which returns an array of logs which occurred since last poll.\n\t *\n\t * @param filterIdentifier ({@link Numbers} filter id\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n\t * @returns {@link FilterResultsAPI}, an array of {@link Log} objects.\n\t *\n\t * ```ts\n\t * web3.eth.getFilterChanges(123).then(console.log);\n\t * > [{\n\t *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\n\t *       logIndex: 0n,\n\t *       transactionIndex: 0n,\n\t *       transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *       blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n\t *       blockNumber: 1234n,\n\t *       address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\n\t *   },\n\t *   {...}]\n\t */\n\tpublic async getFilterChanges<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tfilterIdentifier: Numbers,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn filteringRpcMethodsWrappers.getFilterChanges(this, filterIdentifier, returnFormat);\n\t}\n\n\t/**\n\t *  Returns an array of all logs matching filter with given id.\n\t *\n\t * @param filterIdentifier ({@link Numbers} filter id\n\t * @param returnFormat ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n\t * @returns {@link FilterResultsAPI}, an array of {@link Log} objects.\n\t *\n\t * ```ts\n\t * web3.eth.getFilterLogs(123).then(console.log);\n\t * > [{\n\t *       data: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *       topics: ['0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7', '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385']\n\t *       logIndex: 0n,\n\t *       transactionIndex: 0n,\n\t *       transactionHash: '0x7f9fade1c0d57a7af66ab4ead79fade1c0d57a7af66ab4ead7c2c2eb7b11a91385',\n\t *       blockHash: '0xfd43ade1c09fade1c0d57a7af66ab4ead7c2c2eb7b11a91ffdd57a7af66ab4ead7',\n\t *       blockNumber: 1234n,\n\t *       address: '0xde0B295669a9FD93d5F28D9Ec85E40f4cb697BAe'\n\t *   },\n\t *   {...}]\n\t */\n\tpublic async getFilterLogs<ReturnFormat extends DataFormat = typeof DEFAULT_RETURN_FORMAT>(\n\t\tfilterIdentifier: Numbers,\n\t\treturnFormat: ReturnFormat = this.defaultReturnFormat as ReturnFormat,\n\t) {\n\t\treturn filteringRpcMethodsWrappers.getFilterLogs(this, filterIdentifier, returnFormat);\n\t}\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 5112, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5118, "column": 0}, "map": {"version":3,"file":"types.js","sources":["file:///Users/jamesmorgan/Developer/web3/E-VOT/frontend/e-vote-app/node_modules/.pnpm/web3-eth%404.11.1_bufferutil%404.0.9_typescript%405.7.3_utf-8-validate%405.0.10_zod%403.24.1/node_modules/web3-eth/src/types.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\tContractExecutionError,\n\tTransactionRevertedWithoutReasonError,\n\tTransactionRevertInstructionError,\n\tTransactionRevertWithCustomError,\n\tInvalidResponseError,\n\tTransactionPollingTimeoutError,\n} from 'web3-errors';\nimport {\n\tFormatType,\n\tETH_DATA_FORMAT,\n\tDataFormat,\n\tBytes,\n\tContractAbi,\n\tHexString,\n\tNumbers,\n\tTransaction,\n\tTransactionReceipt,\n\tTransactionWithFromAndToLocalWalletIndex,\n\tTransactionWithFromLocalWalletIndex,\n\tTransactionWithToLocalWalletIndex,\n} from 'web3-types';\nimport { Schema } from 'web3-validator';\n\nexport type InternalTransaction = FormatType<Transaction, typeof ETH_DATA_FORMAT>;\n\nexport type SendTransactionEventsBase<ReturnFormat extends DataFormat, TxType> = {\n\tsending: FormatType<TxType, typeof ETH_DATA_FORMAT>;\n\tsent: FormatType<TxType, typeof ETH_DATA_FORMAT>;\n\ttransactionHash: FormatType<Bytes, ReturnFormat>;\n\treceipt: FormatType<TransactionReceipt, ReturnFormat>;\n\tconfirmation: {\n\t\tconfirmations: FormatType<Numbers, ReturnFormat>;\n\t\treceipt: FormatType<TransactionReceipt, ReturnFormat>;\n\t\tlatestBlockHash: FormatType<Bytes, ReturnFormat>;\n\t};\n\terror:\n\t\t| TransactionRevertedWithoutReasonError<FormatType<TransactionReceipt, ReturnFormat>>\n\t\t| TransactionRevertInstructionError<FormatType<TransactionReceipt, ReturnFormat>>\n\t\t| TransactionRevertWithCustomError<FormatType<TransactionReceipt, ReturnFormat>>\n\t\t| TransactionPollingTimeoutError\n\t\t| InvalidResponseError\n\t\t| ContractExecutionError;\n};\n\nexport type SendTransactionEvents<ReturnFormat extends DataFormat> = SendTransactionEventsBase<\n\tReturnFormat,\n\tTransaction\n>;\nexport type SendSignedTransactionEvents<ReturnFormat extends DataFormat> =\n\tSendTransactionEventsBase<ReturnFormat, Bytes>;\n\nexport interface SendTransactionOptions<ResolveType = TransactionReceipt> {\n\tignoreGasPricing?: boolean;\n\ttransactionResolver?: (receipt: TransactionReceipt) => ResolveType;\n\tcontractAbi?: ContractAbi;\n\tcheckRevertBeforeSending?: boolean;\n\tignoreFillingGasLimit?: boolean;\n}\n\nexport interface SendSignedTransactionOptions<ResolveType = TransactionReceipt> {\n\ttransactionResolver?: (receipt: TransactionReceipt) => ResolveType;\n\tcontractAbi?: ContractAbi;\n\tcheckRevertBeforeSending?: boolean;\n}\n\nexport interface RevertReason {\n\treason: string;\n\tsignature?: HexString;\n\tdata?: HexString;\n}\n\nexport interface RevertReasonWithCustomError extends RevertReason {\n\tcustomErrorName: string;\n\tcustomErrorDecodedSignature: string;\n\tcustomErrorArguments: Record<string, unknown>;\n}\n\nexport type TransactionMiddlewareData =\n\t| Transaction\n\t| TransactionWithFromLocalWalletIndex\n\t| TransactionWithToLocalWalletIndex\n\t| TransactionWithFromAndToLocalWalletIndex;\n\nexport interface TransactionMiddleware {\n\t// for transaction processing before signing\n\tprocessTransaction(\n\t\ttransaction: TransactionMiddlewareData,\n\t\toptions?: { [key: string]: unknown },\n\t): Promise<TransactionMiddlewareData>;\n}\n\nexport type CustomTransactionSchema = {\n\ttype: string;\n\tproperties: Record<string, Schema>;\n};\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;EAeE","ignoreList":[0]}},
    {"offset": {"line": 5136, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5142, "column": 0}, "map": {"version":3,"file":"validation.js","sources":["file:///Users/jamesmorgan/Developer/web3/E-VOT/frontend/e-vote-app/node_modules/.pnpm/web3-eth%404.11.1_bufferutil%404.0.9_typescript%405.7.3_utf-8-validate%405.0.10_zod%403.24.1/node_modules/web3-eth/src/validation.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\tAccessList,\n\tAccessListEntry,\n\tBaseTransactionAPI,\n\tTransaction1559UnsignedAPI,\n\tTransaction2930UnsignedAPI,\n\tTransactionCall,\n\tTransactionLegacyUnsignedAPI,\n\tTransaction,\n\tTransactionWithSenderAPI,\n\tETH_DATA_FORMAT,\n} from 'web3-types';\nimport { isAddress, isHexStrict, isHexString32Bytes, isNullish, isUInt } from 'web3-validator';\nimport {\n\tChainMismatchError,\n\tHardforkMismatchError,\n\tChainIdMismatchError,\n\tCommonOrChainAndHardforkError,\n\tEip1559GasPriceError,\n\tInvalidGasOrGasPrice,\n\tInvalidMaxPriorityFeePerGasOrMaxFeePerGas,\n\tInvalidNonceOrChainIdError,\n\tInvalidTransactionCall,\n\tInvalidTransactionObjectError,\n\tInvalidTransactionWithSender,\n\tMissingChainOrHardforkError,\n\tMissingCustomChainError,\n\tMissingCustomChainIdError,\n\tMissingGasError,\n\tTransactionGasMismatchError,\n\tUnsupportedFeeMarketError,\n} from 'web3-errors';\nimport { formatTransaction } from './utils/format_transaction.js';\nimport { CustomTransactionSchema, InternalTransaction } from './types.js';\n\nexport function isBaseTransaction(value: BaseTransactionAPI): boolean {\n\tif (!isNullish(value.to) && !isAddress(value.to)) return false;\n\tif (!isHexStrict(value.type) && !isNullish(value.type) && value.type.length !== 2) return false;\n\tif (!isHexStrict(value.nonce)) return false;\n\tif (!isHexStrict(value.gas)) return false;\n\tif (!isHexStrict(value.value)) return false;\n\tif (!isHexStrict(value.input)) return false;\n\tif (value.chainId && !isHexStrict(value.chainId)) return false;\n\n\treturn true;\n}\n\nexport function isAccessListEntry(value: AccessListEntry): boolean {\n\tif (!isNullish(value.address) && !isAddress(value.address)) return false;\n\tif (\n\t\t!isNullish(value.storageKeys) &&\n\t\t!value.storageKeys.every(storageKey => isHexString32Bytes(storageKey))\n\t)\n\t\treturn false;\n\n\treturn true;\n}\n\nexport function isAccessList(value: AccessList): boolean {\n\tif (\n\t\t!Array.isArray(value) ||\n\t\t!value.every(accessListEntry => isAccessListEntry(accessListEntry))\n\t)\n\t\treturn false;\n\n\treturn true;\n}\n\nexport function isTransaction1559Unsigned(value: Transaction1559UnsignedAPI): boolean {\n\tif (!isBaseTransaction(value)) return false;\n\tif (!isHexStrict(value.maxFeePerGas)) return false;\n\tif (!isHexStrict(value.maxPriorityFeePerGas)) return false;\n\tif (!isAccessList(value.accessList)) return false;\n\n\treturn true;\n}\n\nexport function isTransaction2930Unsigned(value: Transaction2930UnsignedAPI): boolean {\n\tif (!isBaseTransaction(value)) return false;\n\tif (!isHexStrict(value.gasPrice)) return false;\n\tif (!isAccessList(value.accessList)) return false;\n\n\treturn true;\n}\n\nexport function isTransactionLegacyUnsigned(value: TransactionLegacyUnsignedAPI): boolean {\n\tif (!isBaseTransaction(value)) return false;\n\tif (!isHexStrict(value.gasPrice)) return false;\n\n\treturn true;\n}\n\nexport function isTransactionWithSender(value: TransactionWithSenderAPI): boolean {\n\tif (!isAddress(value.from)) return false;\n\tif (!isBaseTransaction(value)) return false;\n\tif (\n\t\t!isTransaction1559Unsigned(value as Transaction1559UnsignedAPI) &&\n\t\t!isTransaction2930Unsigned(value as Transaction2930UnsignedAPI) &&\n\t\t!isTransactionLegacyUnsigned(value as TransactionLegacyUnsignedAPI)\n\t)\n\t\treturn false;\n\n\treturn true;\n}\n\nexport function validateTransactionWithSender(value: TransactionWithSenderAPI) {\n\tif (!isTransactionWithSender(value)) throw new InvalidTransactionWithSender(value);\n}\n\nexport function isTransactionCall(value: TransactionCall): boolean {\n\tif (!isNullish(value.from) && !isAddress(value.from)) return false;\n\tif (!isAddress(value.to)) return false;\n\tif (!isNullish(value.gas) && !isHexStrict(value.gas)) return false;\n\tif (!isNullish(value.gasPrice) && !isHexStrict(value.gasPrice)) return false;\n\tif (!isNullish(value.value) && !isHexStrict(value.value)) return false;\n\tif (!isNullish(value.data) && !isHexStrict(value.data)) return false;\n\tif (!isNullish(value.input) && !isHexStrict(value.input)) return false;\n\tif (!isNullish(value.type)) return false;\n\tif (isTransaction1559Unsigned(value as Transaction1559UnsignedAPI)) return false;\n\tif (isTransaction2930Unsigned(value as Transaction2930UnsignedAPI)) return false;\n\n\treturn true;\n}\n\nexport function validateTransactionCall(value: TransactionCall) {\n\tif (!isTransactionCall(value)) throw new InvalidTransactionCall(value);\n}\n\nexport const validateCustomChainInfo = (transaction: InternalTransaction) => {\n\tif (!isNullish(transaction.common)) {\n\t\tif (isNullish(transaction.common.customChain)) throw new MissingCustomChainError();\n\t\tif (isNullish(transaction.common.customChain.chainId))\n\t\t\tthrow new MissingCustomChainIdError();\n\t\tif (\n\t\t\t!isNullish(transaction.chainId) &&\n\t\t\ttransaction.chainId !== transaction.common.customChain.chainId\n\t\t)\n\t\t\tthrow new ChainIdMismatchError({\n\t\t\t\ttxChainId: transaction.chainId,\n\t\t\t\tcustomChainId: transaction.common.customChain.chainId,\n\t\t\t});\n\t}\n};\nexport const validateChainInfo = (transaction: InternalTransaction) => {\n\tif (\n\t\t!isNullish(transaction.common) &&\n\t\t!isNullish(transaction.chain) &&\n\t\t!isNullish(transaction.hardfork)\n\t) {\n\t\tthrow new CommonOrChainAndHardforkError();\n\t}\n\tif (\n\t\t(!isNullish(transaction.chain) && isNullish(transaction.hardfork)) ||\n\t\t(!isNullish(transaction.hardfork) && isNullish(transaction.chain))\n\t)\n\t\tthrow new MissingChainOrHardforkError({\n\t\t\tchain: transaction.chain,\n\t\t\thardfork: transaction.hardfork,\n\t\t});\n};\nexport const validateBaseChain = (transaction: InternalTransaction) => {\n\tif (!isNullish(transaction.common))\n\t\tif (!isNullish(transaction.common.baseChain))\n\t\t\tif (\n\t\t\t\t!isNullish(transaction.chain) &&\n\t\t\t\ttransaction.chain !== transaction.common.baseChain\n\t\t\t) {\n\t\t\t\tthrow new ChainMismatchError({\n\t\t\t\t\ttxChain: transaction.chain,\n\t\t\t\t\tbaseChain: transaction.common.baseChain,\n\t\t\t\t});\n\t\t\t}\n};\nexport const validateHardfork = (transaction: InternalTransaction) => {\n\tif (!isNullish(transaction.common))\n\t\tif (!isNullish(transaction.common.hardfork))\n\t\t\tif (\n\t\t\t\t!isNullish(transaction.hardfork) &&\n\t\t\t\ttransaction.hardfork !== transaction.common.hardfork\n\t\t\t) {\n\t\t\t\tthrow new HardforkMismatchError({\n\t\t\t\t\ttxHardfork: transaction.hardfork,\n\t\t\t\t\tcommonHardfork: transaction.common.hardfork,\n\t\t\t\t});\n\t\t\t}\n};\n\nexport const validateLegacyGas = (transaction: InternalTransaction) => {\n\tif (\n\t\t// This check is verifying gas and gasPrice aren't less than 0.\n\t\tisNullish(transaction.gas) ||\n\t\t!isUInt(transaction.gas) ||\n\t\tisNullish(transaction.gasPrice) ||\n\t\t!isUInt(transaction.gasPrice)\n\t)\n\t\tthrow new InvalidGasOrGasPrice({\n\t\t\tgas: transaction.gas,\n\t\t\tgasPrice: transaction.gasPrice,\n\t\t});\n\tif (!isNullish(transaction.maxFeePerGas) || !isNullish(transaction.maxPriorityFeePerGas))\n\t\tthrow new UnsupportedFeeMarketError({\n\t\t\tmaxFeePerGas: transaction.maxFeePerGas,\n\t\t\tmaxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n\t\t});\n};\n\nexport const validateFeeMarketGas = (transaction: InternalTransaction) => {\n\t// These errors come from 1.x, so they must be checked before\n\t// InvalidMaxPriorityFeePerGasOrMaxFeePerGas to throw the same error\n\t// for the same code executing in 1.x\n\tif (!isNullish(transaction.gasPrice) && transaction.type === '0x2')\n\t\tthrow new Eip1559GasPriceError(transaction.gasPrice);\n\tif (transaction.type === '0x0' || transaction.type === '0x1')\n\t\tthrow new UnsupportedFeeMarketError({\n\t\t\tmaxFeePerGas: transaction.maxFeePerGas,\n\t\t\tmaxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n\t\t});\n\n\tif (\n\t\tisNullish(transaction.maxFeePerGas) ||\n\t\t!isUInt(transaction.maxFeePerGas) ||\n\t\tisNullish(transaction.maxPriorityFeePerGas) ||\n\t\t!isUInt(transaction.maxPriorityFeePerGas)\n\t)\n\t\tthrow new InvalidMaxPriorityFeePerGasOrMaxFeePerGas({\n\t\t\tmaxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n\t\t\tmaxFeePerGas: transaction.maxFeePerGas,\n\t\t});\n};\n\n/**\n * This method checks if all required gas properties are present for either\n * legacy gas (type 0x0 and 0x1) OR fee market transactions (0x2)\n */\nexport const validateGas = (transaction: InternalTransaction) => {\n\tconst gasPresent = !isNullish(transaction.gas) || !isNullish(transaction.gasLimit);\n\tconst legacyGasPresent = gasPresent && !isNullish(transaction.gasPrice);\n\tconst feeMarketGasPresent =\n\t\tgasPresent &&\n\t\t!isNullish(transaction.maxPriorityFeePerGas) &&\n\t\t!isNullish(transaction.maxFeePerGas);\n\n\tif (!legacyGasPresent && !feeMarketGasPresent)\n\t\tthrow new MissingGasError({\n\t\t\tgas: transaction.gas,\n\t\t\tgasPrice: transaction.gasPrice,\n\t\t\tmaxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n\t\t\tmaxFeePerGas: transaction.maxFeePerGas,\n\t\t});\n\n\tif (legacyGasPresent && feeMarketGasPresent)\n\t\tthrow new TransactionGasMismatchError({\n\t\t\tgas: transaction.gas,\n\t\t\tgasPrice: transaction.gasPrice,\n\t\t\tmaxPriorityFeePerGas: transaction.maxPriorityFeePerGas,\n\t\t\tmaxFeePerGas: transaction.maxFeePerGas,\n\t\t});\n\n\t(legacyGasPresent ? validateLegacyGas : validateFeeMarketGas)(transaction);\n\t(!isNullish(transaction.type) && transaction.type > '0x1'\n\t\t? validateFeeMarketGas\n\t\t: validateLegacyGas)(transaction);\n};\n\nexport const validateTransactionForSigning = (\n\ttransaction: InternalTransaction,\n\toverrideMethod?: (transaction: InternalTransaction) => void,\n\toptions: {\n\t\ttransactionSchema?: CustomTransactionSchema;\n\t} = { transactionSchema: undefined },\n) => {\n\tif (!isNullish(overrideMethod)) {\n\t\toverrideMethod(transaction);\n\t\treturn;\n\t}\n\n\tif (typeof transaction !== 'object' || isNullish(transaction))\n\t\tthrow new InvalidTransactionObjectError(transaction);\n\n\tvalidateCustomChainInfo(transaction);\n\tvalidateChainInfo(transaction);\n\tvalidateBaseChain(transaction);\n\tvalidateHardfork(transaction);\n\n\tconst formattedTransaction = formatTransaction(transaction as Transaction, ETH_DATA_FORMAT, {\n\t\ttransactionSchema: options.transactionSchema,\n\t});\n\tvalidateGas(formattedTransaction);\n\n\tif (\n\t\tisNullish(formattedTransaction.nonce) ||\n\t\tisNullish(formattedTransaction.chainId) ||\n\t\tformattedTransaction.nonce.startsWith('-') ||\n\t\tformattedTransaction.chainId.startsWith('-')\n\t)\n\t\tthrow new InvalidNonceOrChainIdError({\n\t\t\tnonce: transaction.nonce,\n\t\t\tchainId: transaction.chainId,\n\t\t});\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 5361, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5367, "column": 0}, "map": {"version":3,"file":"prepare_transaction_for_signing.js","sources":["file:///Users/jamesmorgan/Developer/web3/E-VOT/frontend/e-vote-app/node_modules/.pnpm/web3-eth%404.11.1_bufferutil%404.0.9_typescript%405.7.3_utf-8-validate%405.0.10_zod%403.24.1/node_modules/web3-eth/src/utils/prepare_transaction_for_signing.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\tEthExecutionAPI,\n\tHexString,\n\tPopulatedUnsignedEip1559Transaction,\n\tPopulatedUnsignedEip2930Transaction,\n\tPopulatedUnsignedTransaction,\n\tTransaction,\n\tValidChains,\n\tFormatType,\n\tETH_DATA_FORMAT,\n} from 'web3-types';\nimport { Web3Context } from 'web3-core';\nimport { toNumber } from 'web3-utils';\nimport { TransactionFactory, TxOptions, Common } from 'web3-eth-accounts';\nimport { isNullish } from 'web3-validator';\nimport { validateTransactionForSigning } from '../validation.js';\nimport { formatTransaction } from './format_transaction.js';\nimport { transactionBuilder } from './transaction_builder.js';\n\nconst getEthereumjsTxDataFromTransaction = (\n\ttransaction: FormatType<PopulatedUnsignedTransaction, typeof ETH_DATA_FORMAT>,\n) => ({\n\t...transaction,\n\tnonce: transaction.nonce,\n\tgasPrice: transaction.gasPrice,\n\tgasLimit: transaction.gasLimit ?? transaction.gas,\n\tto: transaction.to,\n\tvalue: transaction.value,\n\tdata: transaction.data ?? transaction.input,\n\ttype: transaction.type,\n\tchainId: transaction.chainId,\n\taccessList: (\n\t\ttransaction as FormatType<PopulatedUnsignedEip2930Transaction, typeof ETH_DATA_FORMAT>\n\t).accessList,\n\tmaxPriorityFeePerGas: (\n\t\ttransaction as FormatType<PopulatedUnsignedEip1559Transaction, typeof ETH_DATA_FORMAT>\n\t).maxPriorityFeePerGas,\n\tmaxFeePerGas: (\n\t\ttransaction as FormatType<PopulatedUnsignedEip1559Transaction, typeof ETH_DATA_FORMAT>\n\t).maxFeePerGas,\n});\n\nconst getEthereumjsTransactionOptions = (\n\ttransaction: FormatType<PopulatedUnsignedTransaction, typeof ETH_DATA_FORMAT>,\n\tweb3Context: Web3Context<EthExecutionAPI>,\n) => {\n\tconst hasTransactionSigningOptions =\n\t\t(!isNullish(transaction.chain) && !isNullish(transaction.hardfork)) ||\n\t\t!isNullish(transaction.common);\n\n\tlet common;\n\tif (!hasTransactionSigningOptions) {\n\t\t// if defaultcommon is specified, use that.\n\t\tif (web3Context.defaultCommon) {\n\t\t\tcommon = { ...web3Context.defaultCommon };\n\n\t\t\tif (isNullish(common.hardfork))\n\t\t\t\tcommon.hardfork = transaction.hardfork ?? web3Context.defaultHardfork;\n\t\t\tif (isNullish(common.baseChain))\n\t\t\t\tcommon.baseChain = web3Context.defaultChain as ValidChains;\n\t\t} else {\n\t\t\tcommon = Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: 'custom-network',\n\t\t\t\t\tchainId: toNumber(transaction.chainId) as number,\n\t\t\t\t\tnetworkId: !isNullish(transaction.networkId)\n\t\t\t\t\t\t? (toNumber(transaction.networkId) as number)\n\t\t\t\t\t\t: undefined,\n\t\t\t\t\tdefaultHardfork: transaction.hardfork ?? web3Context.defaultHardfork,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tbaseChain: web3Context.defaultChain,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t} else {\n\t\tconst name =\n\t\t\ttransaction?.common?.customChain?.name ?? transaction.chain ?? 'custom-network';\n\t\tconst chainId = toNumber(\n\t\t\ttransaction?.common?.customChain?.chainId ?? transaction?.chainId,\n\t\t) as number;\n\t\tconst networkId = toNumber(\n\t\t\ttransaction?.common?.customChain?.networkId ?? transaction?.networkId,\n\t\t) as number;\n\t\tconst defaultHardfork =\n\t\t\ttransaction?.common?.hardfork ?? transaction?.hardfork ?? web3Context.defaultHardfork;\n\t\tconst baseChain =\n\t\t\ttransaction.common?.baseChain ?? transaction.chain ?? web3Context.defaultChain;\n\n\t\tif (chainId && networkId && name) {\n\t\t\tcommon = Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname,\n\t\t\t\t\tchainId,\n\t\t\t\t\tnetworkId,\n\t\t\t\t\tdefaultHardfork,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tbaseChain,\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t}\n\treturn { common } as TxOptions;\n};\n\nexport const prepareTransactionForSigning = async (\n\ttransaction: Transaction,\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tprivateKey?: HexString | Uint8Array,\n\tfillGasPrice = false,\n\tfillGasLimit = true,\n) => {\n\tconst populatedTransaction = (await transactionBuilder({\n\t\ttransaction,\n\t\tweb3Context,\n\t\tprivateKey,\n\t\tfillGasPrice,\n\t\tfillGasLimit,\n\t})) as unknown as PopulatedUnsignedTransaction;\n\tconst formattedTransaction = formatTransaction(populatedTransaction, ETH_DATA_FORMAT, {\n\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t}) as unknown as FormatType<PopulatedUnsignedTransaction, typeof ETH_DATA_FORMAT>;\n\n\tvalidateTransactionForSigning(\n\t\tformattedTransaction as unknown as FormatType<Transaction, typeof ETH_DATA_FORMAT>,\n\t\tundefined,\n\t\t{\n\t\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t\t},\n\t);\n\n\treturn TransactionFactory.fromTxData(\n\t\tgetEthereumjsTxDataFromTransaction(formattedTransaction),\n\t\tgetEthereumjsTransactionOptions(formattedTransaction, web3Context),\n\t);\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}},
    {"offset": {"line": 5509, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5515, "column": 0}, "map": {"version":3,"file":"index.js","sources":["file:///Users/jamesmorgan/Developer/web3/E-VOT/frontend/e-vote-app/node_modules/.pnpm/web3-eth%404.11.1_bufferutil%404.0.9_typescript%405.7.3_utf-8-validate%405.0.10_zod%403.24.1/node_modules/web3-eth/src/index.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * The `web3-eth` package allows you to interact with an Ethereum blockchain and Ethereum smart contracts.\n *\n * To use this package standalone and use its methods use:\n * ```ts\n * import { Web3Context } from 'web3-core';\n * import { BlockTags } from 'web3-types';\n * import { DEFAULT_RETURN_FORMAT } from 'web3-types';\n * import { getBalance} from 'web3-eth';\n *\n * getBalance(\n *      new Web3Context('http://127.0.0.1:8545'),\n *      '0x407d73d8a49eeb85d32cf465507dd71d507100c1',\n *      BlockTags.LATEST,\n *      DEFAULT_RETURN_FORMAT\n * ).then(console.log);\n * > 1000000000000n\n * ```\n *\n * To use this package within the `web3` object use:\n * ```ts\n * import Web3 from 'web3';\n *\n * const web3 = new Web3(Web3.givenProvider || 'ws://some.local-or-remote.node:8546');\n * web3.eth.getBalance('0x407d73d8a49eeb85d32cf465507dd71d507100c1').then(console.log);\n * > 1000000000000n\n *```\n *\n * With `web3-eth` you can also subscribe (if supported by provider) to events in the Ethereum Blockchain, using the `subscribe` function. See more at the {@link Web3Eth.subscribe} function.\n */\n/**\n *\n */\nimport 'setimmediate';\n\nimport { Web3Eth } from './web3_eth.js';\n\nexport * from './web3_eth.js';\nexport * from './utils/decoding.js';\nexport * from './schemas.js';\nexport * from './constants.js';\nexport * from './types.js';\nexport * from './validation.js';\nexport * from './rpc_method_wrappers.js';\nexport * from './utils/format_transaction.js';\nexport * from './utils/prepare_transaction_for_signing.js';\nexport * from './web3_subscriptions.js';\nexport { detectTransactionType } from './utils/detect_transaction_type.js';\nexport { transactionBuilder, getTransactionFromOrToAttr } from './utils/transaction_builder.js';\nexport { waitForTransactionReceipt } from './utils/wait_for_transaction_receipt.js';\nexport { trySendTransaction } from './utils/try_send_transaction.js';\nexport { SendTxHelper } from './utils/send_tx_helper.js';\n\nexport default Web3Eth;\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;EAeE,CAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG,CACH;;GAEG;;;AAGH,OAAO,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC;;;;;;;;;;;;;;;;;;mWAkBzB,UAAO,CAAC","ignoreList":[0]}},
    {"offset": {"line": 5584, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}